*
*	Ｍｓｘ Ｓｉｍｕｌａｔｅｒ
*
*		[[[ Ｒ８００ Ｓｉｍｕｌａｔｅｒ ]]]		
*			ＭＣ６８０３０以降専用バージョン
*
*				1995.9.24		by Kuni.
*

*	TODO:
*	ＲＥＴＮとＲＥＴＩをちゃんとやってない


*	 31     16 15 8 7  0
*	|         |    | A  |  d4	Ａレジスタ
*	|         |    |HC1 |  d5	フラグ
*	|         |flag| SZ |  d6	フラグ
*	| PC page | PC(16k) |  d7
*	|     registers     |  a3	a3 = レジスターの格納されているアドレス
*	|    PC Base ADD    |  a4	a4 = PC
*
*	PC Base ADD + PC(16k) = 実アドレス
*
*	PC page は PC(R800) の上位２ビットの値が入っている
*	PC(16k) は PC(R800) の下位14ビットの値
*
*		PC(R800)  $8100  =   %10___000001_00000000 
*
*		=> d7 %00000000_00000010_00000001_00000000
*
*
*	flag = 00000000
*	       |   | |+--Cy
*	       |   | +---N
*	       |   +-----HC のモード。0の時通常モード。1の時 ADC,SBC モード。
*	       +---------SZ のモード。0の時通常モード。1の時S,Zどちらも１になる。
*
*	演算結果で変化するSZフラグ(Signフラグ、Zeroフラグ)は毎回判定せずに、演算結果を d6の b7-0に
*	保存しておき、フラグを見るタイミングで評価するようにしています。例えば、SUB A,B の命令の結果、
*	演算結果が -1 ($FF) だった場合、マイナスなのでSフラグを立て、Zフラグは0にする必要がありますが、
*	演算結果の $FFを d6に保存するだけにしています。
*
*	registers:
*	a:	.dc.b	0	* Aレジスタは d4 を使うから使わない
*	f:	.dc.b	0	* Fレジスタは d5 を使うから使わない
*	b:	.dc.b	0
*	c:	.dc.b	0
*	d:	.dc.b	0
*	e:	.dc.b	0
*	h:	.dc.b	0
*	l:	.dc.b	0
*
*	ix_h:	.dc.b	0
*	ix_l:	.dc.b	0
*	iy_h:	.dc.b	0
*	iy_l:	.dc.b	0
*
*	s:	.dc.b	0
*	p:	.dc.b	0
*
*	    7  6  5  4  3  2  1  0
*	F:| s| z|  | H|  |PV| N|CY|
*
*		H と P/V は、その 0,1 を判定するための値をそれぞれ
*		HC1,HC2 と PV に保存し、必用な時に計算する。
*
*		S と Z は、その 0,1 を判断するための値を SZ に保存
*		し、必用な時に計算する。
*

	.cpu 68030

	.include	iocscall.mac
	.include	doscall.mac

	.text
	.even

	.xref	page0		;暫定処理

	.xref	ms_read_mem_8
	.xref	ms_read_mem_16
	.xref	ms_write_mem_8
	.xref	ms_write_mem_16

	.xref	ms_io_input_table
	.xref	ms_io_output_table

	.xref	native_jpt_add		* ６８ネイティブルーチンのジャンプテーブル

	; CPUコアに対する割り込み要求フラグ(実CPUのINT端子に相当する)
	; この1バイトの値が1になるとCPUに対する割り込み要求となる
	; このフラグ領域は本CPUコアは定義していないので、外部で定義する必要がある
	; MSXの場合はVDPのステータスレジスタ0のbit7の値が割り込み要求フラグになる
	.xref	ms_cpu_int

	.xref	HEX
	.xref	host_rate
	.xref	int_block_count

	.xref	ms_vdp_interrupt_tick	; TODO VDP依存を除去

	.xref	w_port_A8

	.xdef	f
	.xdef	HC2
	.xdef	PV

	.xdef	_emulater_ini
	.xdef	_emulate
	.xdef	cpu_main
	.xdef	cpu_emu_yield
	.xdef	cpu_yield
	.xdef	emu_yield
	.xdef	debug_log_level
	.xdef	_readMemFromC
	.xdef	int_skip_counter
	.xdef	int_exec_counter
	.xdef	interrupt_history_ptr
	.xdef	interrupt_history_wr
	.xdef	interrupt_history_rd

	.xdef	base

a	equ	0
f	equ	1	
b	equ	2	
c	equ	3	
d	equ	4
e	equ	5
h	equ	6
l	equ	7
ix_h	equ	8
ix_l	equ	9
iy_h	equ	10
iy_l	equ	11
s	equ	12
p	equ	13

bc	equ	2
de	equ	4
hl	equ	6
ix	equ	8
iy	equ	10
sp_	equ	12

a_	equ	14
f_	equ	15	
b_	equ	16	
c_	equ	17	
d_	equ	18
e_	equ	19
h_	equ	20
l_	equ	21

af_	equ	14
bc_	equ	16
de_	equ	18
hl_	equ	20

r	equ	r_-base
i	equ	i_-base

HC2	equ	HC2_-base
PV	equ	PV_-base

HC1_d	equ	HC1_d_-base
HC2_d	equ	HC2_d_-base
PV_d	equ	PV_d_-base
d6_d	equ	d6_d_-base


PC_page_inc	macro
		swap	d7
		addq.w	#1,d7
		andi.w	#3,d7
		lea	page0,a4
		movea.l	(a4,d7.w*4),a4
		swap	d7
		endm

PC_page_set	macro			* JP命令等で PCが変わった時の処理
		move.w	d7,d0
		clr.l	d7		* d7 の上位ワードを０にする。符号拡張ではだめ
		move.w	d0,d7
		andi.w	#%00111111_11111111,d0
		lsl.l	#2,d7
		move.w	d0,d7
		swap	d7
		lea	page0,a4
		movea.l	(a4,d7.w*4),a4
		swap	d7
		endm

*
*	int emulater_ini();
*
_emulater_ini:
	link	a6,#0
	movem.l	d3-d7/a0-a5,-(sp)

	lea.l	registers,a3
	clr.w	d1
	jsr	w_port_A8		* スロットを０で初期化

	clr.w	d7			* pc = 0
	PC_page_set
	clr.w	sp_(a3)			* sp = 0
	move.b	#$00,interrupt_enable	* DI に
	clr.b	interrupt_mode		* IM を０に

	movem.l	(sp)+,d3-d7/a0-a5
	unlk	a6
	rts

	.data

emu_counter:
	.dc.l	0
emu_counter_latch:
	.dc.l	0
int_skip_counter:
	.dc.l	0
int_exec_counter:
	.dc.l	0
emu_yield_div:
	.dc.w	0

interrupt_history_ptr:
	.dc.l	interrupt_history
interrupt_history:
	; ロングワード*2 *32個のリングバッファ
	; struct interrupt_history_st {
	;    unsigned short int_tick;
	;    unsigned short process_type;
	;    unsigned long emu_counter;
	; }
	; int_tick はその時点の interrupt_tick の値
	; reason は割り込みが発生した時にどう処理したかを示す
	; 0x00: EI状態で、正常にZ80に割り込みがかかった
	; 0x01: EIだったが、emu_counterが int_block_count に達していなかったのでスキップ
	; 0x02: DI状態のため、Z80の割り込みがスキップされた
	; emu_counterには、割り込み時の emu_counter - emu_counter_latch の値を格納

	.ds.l	2*32
interrupt_history_wr:
	.dc.w	0
interrupt_history_rd:
	.dc.w	0

	.text
*
*	void emulate(emu_loop_func);
*
_emulate:
	link	a6,#0
	movem.l	d3-d7/a0-a5,-(sp)
	
	move.l	8(a6),emu_loop_func	* 引数1のループ関数のポインタを保存しておく

	clr.l	emu_counter
	clr.l	emu_counter_latch
	clr.w	emu_yield_div
	clr.w	interrupt_history_wr
	clr.w	interrupt_history_rd
	lea.l	registers,a3
cpu_main:
	add.l	#1,emu_counter
	move.l	cpu_emu_yield,d0
	beq	cpu_main_next
	bsr	check_yield
cpu_main_next:
	clr.w	d0			* d0 の上位ビットを０にクリア
	move.b	0(a4,d7.w),d0		* 命令を読み込む
	lea.l	instructions,a0
	movea.l	(a0,d0.w*4),a0
	move.l	#cpu_main,-(sp)		* 戻り先をスタックに積む
	jmp	(a0)

rts_common:
	rts

; cpu_yieldか emu_yieldのどちらかが0でない場合の中断処理
check_yield:
	move.w	sr,d0
	move.w	d0,-(sp)
	or.w	#%00000111_00000000,d0	* 一時的に割り込み禁止
	move.w	d0,sr

	; cpu_yieldの処理
	cmpi.w	#0,cpu_yield
	beq	do_emu_yield
	subq.w	#1,cpu_yield
	bne	do_emu_yield
	; cpu_yieldが1→0になったので、割り込み判定を行う
	cmpi.b	#1,interrupt_enable
	bmi	skip_by_di	* DIなら割り込まない
	beq	1f
	; EI = 2だった場合
	move.b	#1,interrupt_enable
	move.w	#1,cpu_yield
	bra	do_emu_yield
1:	; あらためて割り込み要求端子の値(ms_cpu_int)を見て割り込み要求があるかどうかを見る
	cmpi.b	#0,ms_cpu_int
	beq	do_emu_yield
	; emu_counter の増加量が int_block_count に達していなかったら割り込みを一回スキップ(実験)
	move.l	emu_counter,d0
	sub.l	emu_counter_latch,d0
	cmp.l	int_block_count,d0
	bgt	1f
	; Skip処理
	addq.l	#1,int_skip_counter

	move.w	#1,d0
	bsr	add_interrupt_history

	cmp.w	#0,cpu_yield	* 絶対に0のはず
	beq	check_yield_rts
	; サブルーチンを1段飛ばすために、SPをインクリメント
	lea.l	4(sp),sp
	bra	emu_end		* 強制終了

1:
	addq.l	#1,int_exec_counter
	bsr	INT
	move.w	#0,d0
	bsr	add_interrupt_history
	move.l	emu_counter,emu_counter_latch	* この時点の値を覚えておく
	bra	check_yield_rts

skip_by_di:
	move.w	#2,d0
	bsr	add_interrupt_history
	bra	do_emu_yield

	; emu_yieldの処理
do_emu_yield:
	cmpi.w	#0,emu_yield
	bne	@f
	bra	check_yield_rts
@@:	subq.w	#1,emu_yield
	beq	@f
	bra	check_yield_rts

	; emu_yieldが0になったので、C側の処理を呼び出す
@@:	cmpi.w	#0,emu_yield_div		* さらに間引きを実施
	beq	@f				* 0なら実行
	subq.w	#1,emu_yield_div
	bra	check_yield_rts
@@:	move.w	host_rate,emu_yield_div		* 1 = 2回に一回実行, 2 = 3回に1回
	subq.w	#1,emu_yield_div
	movem.l	d1-d7/a0-a6,-(sp)
	movea.l	emu_loop_func,a0
	move.l	emu_counter,d0
	sub.l	emu_counter_latch,d0
	move.l	d0,-(sp)			* カウンタ差分を引数として渡す
	move.l	d7,-(sp)			* PCを引数として渡す
	jsr	(a0)
	lea.l	8(sp),sp
	movem.l	(sp)+,d1-d7/a0-a6
	move.l	d0,d0
	bne	@f
	bra	check_yield_rts
@@:	
	; 0以外が帰ってきたのでエミュレータを終了
	move.w	(sp)+,sr
	; サブルーチンを1段飛ばすために、SPをインクリメント
	lea.l	4(sp),sp
	bra	emu_end

check_yield_rts:
	move.w	(sp)+,sr
	rts

emu_end:
	movem.l	(sp)+,d3-d7/a0-a5
	unlk	a6
	moveq.l #-1,d0
	rts

*
* 割り込みヒストリに情報を追記します
*	入力: d0.w		割り込みに対する対応の結果: 0: EI状態で割り込みがかかった, 1: EIだったがスキップ, 2: DI状態で割り込みがスキップ
* 	破壊: a0, d0, d1
*
add_interrupt_history:
	lea	interrupt_history,a0
	move.w	interrupt_history_wr,d1
	move.w	ms_vdp_interrupt_tick,(a0,d1.w*8)
	move.w	d0,2(a0,d1.w*8)
	move.l	emu_counter,d0
	sub.l	emu_counter_latch,d0
	move.l	d0,4(a0,d1.w*8)
	addq.w	#1,d1				* wrを一つ進める
	andi.w	#$1f,d1
	move.w	interrupt_history_rd,d0
	cmp.w	d0,d1
	bne	history_not_full
	; 履歴が一杯になったので、読み出し開始位置をずらず
	addq.w	#1,d0				※ rdを一つ進める
	andi.w	#$1f,d0
history_not_full:
	move.w	d1,interrupt_history_wr
	move.w	d0,interrupt_history_rd

	rts

	.data
instructions:
	.dc.l	nop				* $00
	.dc.l	LD_BC_nn
	.dc.l	LD_lBCl_A
	.dc.l	INC_BC
	.dc.l	INC_B
	.dc.l	DEC_B
	.dc.l	LD_B_n
	.dc.l	RLCA
	.dc.l	EX_AF_AFd			* $08
	.dc.l	ADD_HL_BC
	.dc.l	LD_A_lBCl
	.dc.l	DEC_BC
	.dc.l	INC_C
	.dc.l	DEC_C
	.dc.l	LD_C_n
	.dc.l	RRCA				* $0f

	.dc.l	DJNZ				* $10
	.dc.l	LD_DE_nn
	.dc.l	LD_lDEl_A
	.dc.l	INC_DE
	.dc.l	INC_D
	.dc.l	DEC_D
	.dc.l	LD_D_n
	.dc.l	RLA
	.dc.l	JR				* $18
	.dc.l	ADD_HL_DE
	.dc.l	LD_A_lDEl
	.dc.l	DEC_DE
	.dc.l	INC_E
	.dc.l	DEC_E
	.dc.l	LD_E_n
	.dc.l	RRA				* $1f

	.dc.l	JR_NZ				* $20
	.dc.l	LD_HL_nn
	.dc.l	LD_lnnl_HL
	.dc.l	INC_HL
	.dc.l	INC_H
	.dc.l	DEC_H
	.dc.l	LD_H_n
	.dc.l	DAA
	.dc.l	JR_Z				* $28
	.dc.l	ADD_HL_HL
	.dc.l	LD_HL_lnnl
	.dc.l	DEC_HL
	.dc.l	INC_L
	.dc.l	DEC_L
	.dc.l	LD_L_n
	.dc.l	CPL				* $2f

	.dc.l	JR_NC				* $30
	.dc.l	LD_SP_nn
	.dc.l	LD_lnnl_A
	.dc.l	INC_SP
	.dc.l	INC_lHLl
	.dc.l	DEC_lHLl
	.dc.l	LD_lHLl_n
	.dc.l	SCF
	.dc.l	JR_C				* $38
	.dc.l	ADD_HL_SP
	.dc.l	LD_A_lnnl
	.dc.l	DEC_SP
	.dc.l	INC_A
	.dc.l	DEC_A
	.dc.l	LD_A_n
	.dc.l	CCF				* $3f

	.dc.l	LD_B_B				* 0
	.dc.l	LD_B_C
	.dc.l	LD_B_D
	.dc.l	LD_B_E
	.dc.l	LD_B_H
	.dc.l	LD_B_L
	.dc.l	LD_B_lHLl
	.dc.l	LD_B_A
	.dc.l	LD_C_B				* $08
	.dc.l	LD_C_C
	.dc.l	LD_C_D
	.dc.l	LD_C_E
	.dc.l	LD_C_H
	.dc.l	LD_C_L
	.dc.l	LD_C_lHLl
	.dc.l	LD_C_A				* $0f

	.dc.l	LD_D_B				* $50
	.dc.l	LD_D_C
	.dc.l	LD_D_D
	.dc.l	LD_D_E
	.dc.l	LD_D_H
	.dc.l	LD_D_L
	.dc.l	LD_D_lHLl
	.dc.l	LD_D_A
	.dc.l	LD_E_B				* $58
	.dc.l	LD_E_C
	.dc.l	LD_E_D
	.dc.l	LD_E_E
	.dc.l	LD_E_H
	.dc.l	LD_E_L
	.dc.l	LD_E_lHLl
	.dc.l	LD_E_A				* $5f

	.dc.l	LD_H_B				* $60
	.dc.l	LD_H_C
	.dc.l	LD_H_D
	.dc.l	LD_H_E
	.dc.l	LD_H_H
	.dc.l	LD_H_L
	.dc.l	LD_H_lHLl
	.dc.l	LD_H_A
	.dc.l	LD_L_B				* $68
	.dc.l	LD_L_C
	.dc.l	LD_L_D
	.dc.l	LD_L_E
	.dc.l	LD_L_H
	.dc.l	LD_L_L
	.dc.l	LD_L_lHLl
	.dc.l	LD_L_A				* $6f

	.dc.l	LD_lHLl_B			* $70
	.dc.l	LD_lHLl_C
	.dc.l	LD_lHLl_D
	.dc.l	LD_lHLl_E
	.dc.l	LD_lHLl_H
	.dc.l	LD_lHLl_L
	.dc.l	HALT
	.dc.l	LD_lHLl_A
	.dc.l	LD_A_B				* $78
	.dc.l	LD_A_C
	.dc.l	LD_A_D
	.dc.l	LD_A_E
	.dc.l	LD_A_H
	.dc.l	LD_A_L
	.dc.l	LD_A_lHLl
	.dc.l	LD_A_A				* $7f

	.dc.l	ADD_A_B				* $80
	.dc.l	ADD_A_C
	.dc.l	ADD_A_D
	.dc.l	ADD_A_E
	.dc.l	ADD_A_H
	.dc.l	ADD_A_L
	.dc.l	ADD_A_lHLl
	.dc.l	ADD_A_A
	.dc.l	ADC_A_B				* $88
	.dc.l	ADC_A_C
	.dc.l	ADC_A_D
	.dc.l	ADC_A_E
	.dc.l	ADC_A_H
	.dc.l	ADC_A_L
	.dc.l	ADC_A_lHLl
	.dc.l	ADC_A_A				* $8f

	.dc.l	SUB_B				* $90
	.dc.l	SUB_C
	.dc.l	SUB_D
	.dc.l	SUB_E
	.dc.l	SUB_H
	.dc.l	SUB_L
	.dc.l	SUB_lHLl
	.dc.l	SUB_A
	.dc.l	SBC_A_B				* $98
	.dc.l	SBC_A_C
	.dc.l	SBC_A_D
	.dc.l	SBC_A_E
	.dc.l	SBC_A_H
	.dc.l	SBC_A_L
	.dc.l	SBC_A_lHLl
	.dc.l	SBC_A_A				* $9f

	.dc.l	AND_B				* $A0
	.dc.l	AND_C
	.dc.l	AND_D
	.dc.l	AND_E
	.dc.l	AND_H
	.dc.l	AND_L
	.dc.l	AND_lHLl
	.dc.l	AND_A
	.dc.l	XOR_B				* $A8
	.dc.l	XOR_C
	.dc.l	XOR_D
	.dc.l	XOR_E
	.dc.l	XOR_H
	.dc.l	XOR_L
	.dc.l	XOR_lHLl
	.dc.l	XOR_A				* $Af

	.dc.l	OR_B				* $B0
	.dc.l	OR_C
	.dc.l	OR_D
	.dc.l	OR_E
	.dc.l	OR_H
	.dc.l	OR_L
	.dc.l	OR_lHLl
	.dc.l	OR_A
	.dc.l	CP_B				* $B8
	.dc.l	CP_C
	.dc.l	CP_D
	.dc.l	CP_E
	.dc.l	CP_H
	.dc.l	CP_L
	.dc.l	CP_lHLl
	.dc.l	CP_A				* $Bf

	.dc.l	RET_NZ				* $C0
	.dc.l	POP_BC
	.dc.l	JP_NZ
	.dc.l	JP
	.dc.l	CALL_NZ
	.dc.l	PUSH_BC
	.dc.l	ADD_A_n
	.dc.l	RST_00H
	.dc.l	RET_Z				* $C8
	.dc.l	RET
	.dc.l	JP_Z
	.dc.l	CB				* $CB ライン命令
	.dc.l	CALL_Z
	.dc.l	CALL
	.dc.l	ADC_A_n
	.dc.l	RST_08H				* $Cf

	.dc.l	RET_NC				* $D0
	.dc.l	POP_DE
	.dc.l	JP_NC
	.dc.l	OUT_n_A
	.dc.l	CALL_NC
	.dc.l	PUSH_DE
	.dc.l	SUB_n
	.dc.l	RST_10H
	.dc.l	RET_C				* $D8
	.dc.l	EXX
	.dc.l	JP_C
	.dc.l	IN_A_n
	.dc.l	CALL_C
	.dc.l	DD				* $DD ライン命令
	.dc.l	SBC_A_n
	.dc.l	RST_18H				* $Df

	.dc.l	RET_PO				* $E0
	.dc.l	POP_HL
	.dc.l	JP_PO
	.dc.l	EX_lSPl_HL
	.dc.l	CALL_PO
	.dc.l	PUSH_HL
	.dc.l	AND_n
	.dc.l	RST_20H
	.dc.l	RET_PE				* $E8
	.dc.l	JP_lHLl
	.dc.l	JP_PE
	.dc.l	EX_DE_HL
	.dc.l	CALL_PE
	.dc.l	ED				* $ED ライン命令
	.dc.l	XOR_n
	.dc.l	RST_28H				* $Ef

	.dc.l	RET_P				* $F0
	.dc.l	POP_AF
	.dc.l	JP_P
	.dc.l	DI
	.dc.l	CALL_P
	.dc.l	PUSH_AF
	.dc.l	OR_n
	.dc.l	RST_30H
	.dc.l	RET_M				* $F8
	.dc.l	LD_SP_HL
	.dc.l	JP_M
	.dc.l	EI
	.dc.l	CALL_M
	.dc.l	FD				* $FD ライン命令
	.dc.l	CP_n
	.dc.l	RST_38H				* $ff

	.text

*	------ 割り込み処理 ------
INT:	move.b	#0,interrupt_enable	* DI に
	cmpi.b	#1,interrupt_mode	* 割り込みがかかった時の処理
	bhi	mode2
					* モード０割り込みは実現できない
mode1:	move.l	d7,d1
	swap	d7		* d7 = 00000000_000000pp
	ror.w	#2,d7		* d7 = pp000000_00000000
	or.w	d7,d1		* d1 = PC (R800)
	subq.w	#2,sp_(a3)	* PUSH	
	move.w	sp_(a3),d0
	jsr	ms_write_mem_16

	move.w	#$0038,d7
	PC_page_set
	rts

mode2:	move.l	d7,d1
	swap	d7		* d7 = 00000000_000000pp
	ror.w	#2,d7		* d7 = pp000000_00000000
	or.w	d7,d1		* d1 = PC (R800)
	subq.w	#2,sp_(a3)	* PUSH	
	move.w	sp_(a3),d0
	jsr	ms_write_mem_16

	move.b	i(a3),d0
	lsl.w	#8,d0

	jsr	ms_read_mem_16
	move.w	d0,d7
	PC_page_set
	rts


nop:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

*
*	-------- ＬＤ --------
*
*	------ ＬＤ Ａ,？ ------
LD_A_A:
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_A_B:
	move.b	b(a3),d4
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_A_C:
	move.b	c(a3),d4
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_A_D:
	move.b	d(a3),d4
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_A_E:
	move.b	e(a3),d4
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_A_H:
	move.b	h(a3),d4
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_A_L:
	move.b	l(a3),d4
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_A_lHLl:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,d4
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_A_lBCl:
	move.w	bc(a3),d0
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,d4
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_A_lDEl:
	move.w	de(a3),d0
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,d4
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_A_lnnl:
	move.b	2(a4,d7.w),d0		* nn の上位８ビットを読む 
	lsl.w	#8,d0
	move.b	1(a4,d7.w),d0		* nn の下位８ビットを読む 
	addq.w	#3,d7			* PC += 3
	btst.l	#14,d7			* PC がページ境界をまたいだか？
	bne	1f
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,d4
	rts
1:	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	bne	2f
	jsr	ms_read_mem_8		* d7 = 0 の時
	move.b	d0,d4
	rts
2:	cmpi.w	#2,d7			* d7 = 2 の時
	beq	3f
	move.b	d0,d2			* d7 = 1 の時
	move.b	(a4),d0			* nn の上位８ビットを読む
	lsl.w	#8,d0
	move.b	d2,d0
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,d4
	rts
3:	move.b	1(a4),d0		* nn の上位８ビットを読む 
	lsl.w	#8,d0
	move.b	 (a4),d0		* nn の下位８ビットを読む 
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,d4
	rts

LD_A_n:	move.b	1(a4,d7.w),d4
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7			* PC がページ境界をまたいだか？
	beq	rts_common
	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	beq	rts_common
	move.b	(a4),d4			* d7 = 1 の時
	rts

*	------ ＬＤ Ｂ,？ ------
LD_B_A:	move.b	d4,b(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_B_B:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_B_C:	move.b	c(a3),b(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_B_D:	move.b	d(a3),b(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_B_E:	move.b	e(a3),b(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_B_H:	move.b	h(a3),b(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_B_L:	move.b	l(a3),b(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_B_lHLl:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,b(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_B_n:	move.b	1(a4,d7.w),b(a3)
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7			* PC がページ境界をまたいだか？
	beq	rts_common
	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	beq	rts_common			* d7 = 0 の時
	move.b	(a4),b(a3)		* d7 = 1 の時
	rts

*	------ ＬＤ Ｃ,？ ------
LD_C_A:	move.b	d4,c(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_C_B:	move.b	b(a3),c(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_C_C:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_C_D:	move.b	d(a3),c(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_C_E:	move.b	e(a3),c(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_C_H:	move.b	h(a3),c(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_C_L:	move.b	l(a3),c(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_C_lHLl:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,c(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_C_n:	move.b	1(a4,d7.w),c(a3)
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7			* PC がページ境界をまたいだか？
	beq	rts_common
	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	beq	rts_common		* d7 = 0 の時
	move.b	(a4),c(a3)		* d7 = 1 の時
	rts

*	------ ＬＤ Ｄ,？ ------
LD_D_A:	move.b	d4,d(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_D_B:	move.b	b(a3),d(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_D_C:	move.b	c(a3),d(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_D_D:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_D_E:	move.b	e(a3),d(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_D_H:	move.b	h(a3),d(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_D_L:	move.b	l(a3),d(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_D_lHLl:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,d(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_D_n:	move.b	1(a4,d7.w),d(a3)
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7			* PC がページ境界をまたいだか？
	beq	rts_common
	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	beq	rts_common			* d7 = 0 の時
	move.b	(a4),d(a3)		* d7 = 1 の時
	rts

*	------ ＬＤ Ｅ,？ ------
LD_E_A:	move.b	d4,e(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_E_B:	move.b	b(a3),e(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_E_C:	move.b	c(a3),e(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_E_D:	move.b	d(a3),e(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_E_E:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_E_H:	move.b	h(a3),e(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_E_L:	move.b	l(a3),e(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_E_lHLl:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,e(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_E_n:	move.b	1(a4,d7.w),e(a3)
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7			* PC がページ境界をまたいだか？
	beq	rts_common
	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	beq	rts_common			* d7 = 0 の時
	move.b	(a4),e(a3)		* d7 = 1 の時
	rts

*	------ ＬＤ Ｈ,？ ------
LD_H_A:	move.b	d4,h(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_H_B:	move.b	b(a3),h(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_H_C:	move.b	c(a3),h(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_H_D:	move.b	d(a3),h(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_H_E:	move.b	e(a3),h(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_H_H:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_H_L:	move.b	l(a3),h(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_H_lHLl:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,h(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_H_n:	move.b	1(a4,d7.w),h(a3)
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7			* PC がページ境界をまたいだか？
	beq	rts_common
	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	beq	rts_common			* d7 = 0 の時
	move.b	(a4),h(a3)		* d7 = 1 の時
	rts

*	------ ＬＤ Ｌ,？ ------
LD_L_A:	move.b	d4,l(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_L_B:	move.b	b(a3),l(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_L_C:	move.b	c(a3),l(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_L_D:	move.b	d(a3),l(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_L_E:	move.b	e(a3),l(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_L_H:	move.b	h(a3),l(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_L_L:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_L_lHLl:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,l(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_L_n:	move.b	1(a4,d7.w),l(a3)
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7			* PC がページ境界をまたいだか？
	beq	rts_common
	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	beq	rts_common			* d7 = 0 の時
	move.b	(a4),l(a3)		* d7 = 1 の時
	rts


*	------ ＬＤ （ＨＬ）,？
LD_lHLl_A:
	move.w	hl(a3),d0
	move.b	d4,d1
	jsr	ms_write_mem_8
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_lHLl_B:
	move.w	hl(a3),d0
	move.b	b(a3),d1
	jsr	ms_write_mem_8
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_lHLl_C:
	move.w	hl(a3),d0
	move.b	c(a3),d1
	jsr	ms_write_mem_8
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_lHLl_D:
	move.w	hl(a3),d0
	move.b	d(a3),d1
	jsr	ms_write_mem_8
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_lHLl_E:
	move.w	hl(a3),d0
	move.b	e(a3),d1
	jsr	ms_write_mem_8
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_lHLl_H:
	move.w	hl(a3),d0
	move.b	h(a3),d1
	jsr	ms_write_mem_8
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_lHLl_L:
	move.w	hl(a3),d0
	move.b	l(a3),d1
	jsr	ms_write_mem_8
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_lHLl_n:
	move.w	hl(a3),d0
	move.b	1(a4,d7.w),d1
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7			* PC がページ境界をまたいだか？
	bne	1f
	jsr	ms_write_mem_8
	rts
1:	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	beq	2f
	move.b	(a4),d1			* d7 = 1 の時
2:	jsr	ms_write_mem_8
	rts
LD_lBCl_A:
	move.w	bc(a3),d0
	move.b	d4,d1
	jsr	ms_write_mem_8
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_lDEl_A:
	move.w	de(a3),d0
	move.b	d4,d1
	jsr	ms_write_mem_8
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_lnnl_A:
	move.b	d4,d1
	move.b	2(a4,d7.w),d0		* nn の上位８ビットを読む 
	lsl.w	#8,d0
	move.b	1(a4,d7.w),d0		* nn の下位８ビットを読む 
	addq.w	#3,d7
	btst.l	#14,d7
	bne	1f
	jsr	ms_write_mem_8
	rts
1:	PC_page_inc			* 命令がページ境界をまたぐ時
	andi.w	#$3fff,d7
	bne	2f
	jsr	ms_write_mem_8		* d7 = 0 の時
	rts
2:	cmpi.w	#2,d7			
	beq	3f
	move.b	d0,d2			* d7 = 1 の時
	move.b	(a4),d0			* nn の上位８ビットを読む
	lsl.w	#8,d0
	move.b	d2,d0
	jsr	ms_write_mem_8
	rts
3:	move.b	1(a4),d0		* d7 = 2 の時
	lsl.w	#8,d0
	move.b	 (a4),d0 
	jsr	ms_write_mem_8
	rts


*	------ ＬＤ ＸＸ,nn ------
LD_BC_nn:
	move.b	1(a4,d7.w),c(a3)	* nn の下位８ビットを読む 
	move.b	2(a4,d7.w),b(a3)	* nn の上位８ビットを読む 
	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	beq	rts_common			* d7 = 0 の時
	cmpi.w	#2,d1
	beq	1f
	move.b	 (a4),b(a3)		* d7 = 1 の時
	rts
1:	move.b	 (a4),c(a3)		* d7 = 2 の時 
	move.b	1(a4),b(a3)
	rts
LD_DE_nn:
	move.b	1(a4,d7.w),e(a3)	* nn の下位８ビットを読む 
	move.b	2(a4,d7.w),d(a3)	* nn の上位８ビットを読む 
	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	beq	rts_common			* d7 = 0 の時
	cmpi.w	#2,d1
	beq	1f
	move.b	 (a4),d(a3)		* d7 = 1 の時
	rts
1:	move.b	 (a4),e(a3)		* d7 = 2 の時 
	move.b	1(a4),d(a3)
	rts
LD_HL_nn:
	move.b	1(a4,d7.w),l(a3)	* nn の下位８ビットを読む 
	move.b	2(a4,d7.w),h(a3)	* nn の上位８ビットを読む 
	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	beq	rts_common			* d7 = 0 の時
	cmpi.w	#2,d1
	beq	1f
	move.b	 (a4),h(a3)		* d7 = 1 の時
	rts
1:	move.b	 (a4),l(a3)		* d7 = 2 の時 
	move.b	1(a4),h(a3)
	rts
LD_SP_nn:
	move.b	1(a4,d7.w),p(a3)	* nn の下位８ビットを読む 
	move.b	2(a4,d7.w),s(a3)	* nn の上位８ビットを読む 
	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	beq	rts_common			* d7 = 0 の時
	cmpi.w	#2,d1
	beq	1f
	move.b	 (a4),s(a3)		* d7 = 1 の時
	rts
1:	move.b	 (a4),p(a3)		* d7 = 2 の時 
	move.b	1(a4),s(a3)
	rts
LD_SP_HL:
	move.w	hl(a3),sp_(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts


*	------ ＬＤ ＨＬ,(nn) ------
LD_HL_lnnl:
	move.b	2(a4,d7.w),d0		* nn の上位８ビットを読む 
	lsl.w	#8,d0
	move.b	1(a4,d7.w),d0		* nn の下位８ビットを読む 
	addq.w	#3,d7
	btst.l	#14,d7
	bne	1f
	jsr	ms_read_mem_16
	move.w	d0,hl(a3)
	rts
1:	PC_page_inc			* 命令がページ境界をまたぐ時
	andi.w	#$3fff,d7
	bne	2f
	jsr	ms_read_mem_16		* d7 = 0 の時
	move.w	d0,hl(a3)
	rts
2:	cmpi.w	#2,d7
	beq	3f
	move.b	d0,d2			* d7 = 1 の時
	move.b	(a4),d0			* nn の上位８ビットを読む
	lsl.w	#8,d0
	move.b	d2,d0
	jsr	ms_read_mem_16
	move.w	d0,hl(a3)
	rts
3:	move.b	1(a3),d0		* d7 = 2 の時
	lsl.w	#8,d0
	move.b	 (a3),d0
	jsr	ms_read_mem_16
	move.w	d0,hl(a3)
	rts

*	------ ＬＤ (nn),ＨＬ ------
LD_lnnl_HL:
	move.w	hl(a3),d1
	move.b	2(a4,d7.w),d0		* nn の上位８ビットを読む 
	lsl.w	#8,d0
	move.b	1(a4,d7.w),d0		* nn の下位８ビットを読む 
	addq.w	#3,d7
	btst.l	#14,d7
	bne	1f
	jsr	ms_write_mem_16
	rts
1:	PC_page_inc			* 命令がページ境界をまたぐ時
	andi.w	#$3fff,d7
	bne	2f
	jsr	ms_write_mem_16		* d7 = 0 の時
	rts
2:	cmpi.w	#2,d7
	beq	3f
	move.b	d0,d2			* d7 = 1 の時
	move.b	(a4),d0			* nn の上位８ビットを読む
	lsl.w	#8,d0
	move.b	d2,d0
	jsr	ms_write_mem_16
	rts
3:	move.b	1(a3),d0		* d7 = 2 の時
	lsl.w	#8,d0
	move.b	 (a3),d0
	jsr	ms_write_mem_16
	rts


*******************************************************************
* Cから読み出すサブルーチン
*******************************************************************
_readMemFromC:
	link	a6,#0
	movem.l	d1-d7/a0-a5,-(sp)
	
	move.l	8(a6),d0	* 引数1のアドレスを取得

	lea.l	registers,a3
	jsr	ms_read_mem_8	* メモリから 8ビットのデータを読み込む

	and.l	#$ff,d0		* 上位24ビットをクリア

	movem.l	(sp)+,d1-d7/a0-a5
	unlk	a6
	rts


*------ ＡＤＤ ------
ADD_A_A:
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode,SZ mode をクリア
	move.b	d4,HC2(a3)		* 足す数を HC2に
	add.b	d4,d4
	bvs	V_ADD_A			* オーバーフロー？
	bcc	NC_ADD_A1
	ori.w	#%00000001_00000000,d6	* Ｃをセット
NC_ADD_A1:
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6			* 結果を SZ にセット		
	move.b	d4,d5			* 結果を HC1にセット
	rts

V_ADD_A:
	bcc	NC_ADD_A2
	ori.w	#%00000001_00000000,d6	* Ｃをセット
NC_ADD_A2:
	clr.b	PV(a3)			* PVをセット
	move.b	d4,d6			* 結果を SZ にセット		
	move.b	d4,d5			* 結果を HC1にセット
	rts

ADD_A_B:
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	b(a3),d0
	move.b	d0,HC2(a3)		* 足す数を HC2に
	add.b	d0,d4
	bvs	V_ADD_A			* オーバーフロー？
	bcc	NC_ADD_A1
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6			* 結果を SZ にセット		
	move.b	d4,d5			* 結果を HC1にセット
	rts

ADD_A_C:
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	c(a3),d0
	move.b	d0,HC2(a3)		* 足す数を HC2に
	add.b	d0,d4
	bvs	V_ADD_A			* オーバーフロー？
	bcc	NC_ADD_A1
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6			* 結果を SZ にセット		
	move.b	d4,d5			* 結果を HC1にセット
	rts

ADD_A_D:
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d(a3),d0
	move.b	d0,HC2(a3)		* 足す数を HC2に
	add.b	d0,d4
	bvs	V_ADD_A			* オーバーフロー？
	bcc	NC_ADD_A1
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6			* 結果を SZ にセット		
	move.b	d4,d5			* 結果を HC1にセット
	rts

ADD_A_E:
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	e(a3),d0
	move.b	d0,HC2(a3)		* 足す数を HC2に
	add.b	d0,d4
	bvs	V_ADD_A			* オーバーフロー？
	bcc	NC_ADD_A1
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6			* 結果を SZ にセット		
	move.b	d4,d5			* 結果を HC1にセット
	rts

ADD_A_H:
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	h(a3),d0
	move.b	d0,HC2(a3)		* 足す数を HC2に
	add.b	d0,d4
	bvs	V_ADD_A			* オーバーフロー？
	bcc	NC_ADD_A1
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6			* 結果を SZ にセット		
	move.b	d4,d5			* 結果を HC1にセット
	rts

ADD_A_L:
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	l(a3),d0
	move.b	d0,HC2(a3)		* 足す数を HC2に
	add.b	d0,d4
	bvs	V_ADD_A			* オーバーフロー？
	bcc	NC_ADD_A1
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6			* 結果を SZ にセット		
	move.b	d4,d5			* 結果を HC1にセット
	rts

ADD_A_lHLl:
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	move.b	d0,HC2(a3)		* 足す数を HC2に
	add.b	d0,d4
	bvs	V_ADD_A			* オーバーフロー？
	bcc	NC_ADD_A1
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6
	move.b	d4,d5
	rts
ADD_A_n:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	1(a4,d7.w),d0
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7			* PC がページ境界をまたいだか？
	beq	@f
	PC_page_inc
	andi.w	#$3fff,d7
	beq	@f			* d7 = 0 の時
	move.b	(a4),d0			* d7 = 1 の時
@@:	move.b	d0,HC2(a3)		* 足す数を HC2に
	add.b	d0,d4
	bvs	V_ADD_A			* オーバーフロー？
	bcc	NC_ADD_A1
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6
	move.b	d4,d5
	rts

ADD_HL_BC:
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:	andi.w	#%11111100_11111111,d6	* ＣｙとＮをクリア
	move.w	bc(a3),d0
	add.w	d0,hl(a3)
	bcc	rts_common
	ori.w	#%00000001_00000000,d6	* Ｃｙをセット
	rts

ADD_HL_DE:
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:	andi.w	#%11111100_11111111,d6	* ＣｙとＮをクリア
	move.w	de(a3),d0
	add.w	d0,hl(a3)
	bcc	rts_common
	ori.w	#%00000001_00000000,d6	* Ｃｙをセット
	rts

ADD_HL_HL:
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:	andi.w	#%11111100_11111111,d6	* ＣｙとＮをクリア
	lsl.w	hl(a3)
	bcc	rts_common
	ori.w	#%00000001_00000000,d6	* Ｃｙをセット
	rts

ADD_HL_SP:
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:	andi.w	#%11111100_11111111,d6	* ＣｙとＮをクリア
	move.w	sp_(a3),d0
	add.w	d0,hl(a3)
	bcc	rts_common
	ori.w	#%00000001_00000000,d6	* Ｃｙをセット
	rts

*	------ ＡＤＣ ------
ADC_A_A:
	btst.l	#8,d6
	beq	ADD_A_A			* Cy が０の時 ADD と同じ
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01111100_00000000,d6	* Ｎ,Ｃ,HC mode,SZ,SZ mode をクリア
	ori.w	#%00001000_00000000,d6	* HC モードをセット
	subq.b	#1,d6			* X ビットをセット
	move.b	d4,HC2(a3)		* 足す数を HC2に
	addx.b	d4,d4
	bvs	V_ADC_A			* オーバーフロー？
	bcc	NC_ADC_A1
	ori.w	#%00000001_00000000,d6	* Ｃをセット
NC_ADC_A1:
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6			* 結果を SZ にセット		
	move.b	d4,d5			* 結果を HC1にセット
	rts

V_ADC_A:
	bcc	NC_ADC_A2
	ori.w	#%00000001_00000000,d6	* Ｃをセット
NC_ADC_A2:
	clr.b	PV(a3)			* PVをセット	
	move.b	d4,d6
	move.b	d4,d5
	rts

ADC_A_B:
	btst.l	#8,d6
	beq	ADD_A_B			* Cy が０の時 ADD と同じ
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01111100_00000000,d6	* Ｎ,Ｃ,HC mode,SZ,SZ mode をクリア
	ori.w	#%00001000_00000000,d6	* HC モードをセット
	subq.b	#1,d6			* X ビットをセット
	move.b	b(a3),d0
	move.b	d0,HC2(a3)		* 足す数を HC2に
	addx.b	d0,d4
	bvs	V_ADC_A			* オーバーフロー？
	bcc	NC_ADC_A1
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6			* 結果を SZ にセット		
	move.b	d4,d5			* 結果を HC1にセット
	rts
ADC_A_C:
	btst.l	#8,d6
	beq	ADD_A_C			* Cy が０の時 ADD と同じ
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01111100_00000000,d6	* Ｎ,Ｃ,HC mode,SZ,SZ mode をクリア
	ori.w	#%00001000_00000000,d6	* HC モードをセット
	subq.b	#1,d6			* X ビットをセット
	move.b	c(a3),d0
	move.b	d0,HC2(a3)		* 足す数を HC2に
	addx.b	d0,d4
	bvs	V_ADC_A			* オーバーフロー？
	bcc	NC_ADC_A1
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6			* 結果を SZ にセット		
	move.b	d4,d5			* 結果を HC1にセット
	rts
ADC_A_D:
	btst.l	#8,d6
	beq	ADD_A_D			* Cy が０の時 ADD と同じ
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01111100_00000000,d6	* Ｎ,Ｃ,HC mode,SZ,SZ mode をクリア
	ori.w	#%00001000_00000000,d6	* HC モードをセット
	subq.b	#1,d6			* X ビットをセット
	move.b	d(a3),d0
	move.b	d0,HC2(a3)		* 足す数を HC2に
	addx.b	d0,d4
	bvs	V_ADC_A			* オーバーフロー？
	bcc	NC_ADC_A1
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6			* 結果を SZ にセット		
	move.b	d4,d5			* 結果を HC1にセット
	rts
ADC_A_E:
	btst.l	#8,d6
	beq	ADD_A_E			* Cy が０の時 ADD と同じ
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01111100_00000000,d6	* Ｎ,Ｃ,HC mode,SZ,SZ mode をクリア
	ori.w	#%00001000_00000000,d6	* HC モードをセット
	subq.b	#1,d6			* X ビットをセット
	move.b	e(a3),d0
	move.b	d0,HC2(a3)		* 足す数を HC2に
	addx.b	d0,d4
	bvs	V_ADC_A			* オーバーフロー？
	bcc	NC_ADC_A1
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6			* 結果を SZ にセット		
	move.b	d4,d5			* 結果を HC1にセット
	rts
ADC_A_H:
	btst.l	#8,d6
	beq	ADD_A_H			* Cy が０の時 ADD と同じ
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01111100_00000000,d6	* Ｎ,Ｃ,HC mode,SZ,SZ mode をクリア
	ori.w	#%00001000_00000000,d6	* HC モードをセット
	subq.b	#1,d6			* X ビットをセット
	move.b	h(a3),d0
	move.b	d0,HC2(a3)		* 足す数を HC2に
	addx.b	d0,d4
	bvs	V_ADC_A			* オーバーフロー？
	bcc	NC_ADC_A1
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6			* 結果を SZ にセット		
	move.b	d4,d5			* 結果を HC1にセット
	rts
ADC_A_L:
	btst.l	#8,d6
	beq	ADD_A_L			* Cy が０の時 ADD と同じ
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01111100_00000000,d6	* Ｎ,Ｃ,HC mode,SZ,SZ mode をクリア
	ori.w	#%00001000_00000000,d6	* HC モードをセット
	subq.b	#1,d6			* X ビットをセット
	move.b	l(a3),d0
	move.b	d0,HC2(a3)		* 足す数を HC2に
	addx.b	d0,d4
	bvs	V_ADC_A			* オーバーフロー？
	bcc	NC_ADC_A1
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6			* 結果を SZ にセット		
	move.b	d4,d5			* 結果を HC1にセット
	rts
ADC_A_lHLl:
	btst.l	#8,d6
	beq	ADD_A_lHLl		* Cy が０の時 ADD と同じ
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01111100_00000000,d6	* Ｎ,Ｃ,HC mode,SZ,SZ mode をクリア
	ori.w	#%00001000_00000000,d6	* HC モードをセット
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	subq.b	#1,d6			* X ビットをセット
	move.b	d0,HC2(a3)		* 足す数を HC2に
	addx.b	d0,d4
	bvs	V_ADD_A			* オーバーフロー？
	bcc	NC_ADD_A1
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6			* 結果を SZ にセット		
	move.b	d4,d5			* 結果を HC1にセット
	rts
ADC_A_n:
	btst.l	#8,d6
	beq	ADD_A_n			* Cy が０の時 ADD と同じ
	andi.w	#%01111100_00000000,d6	* Ｎ,Ｃ,HC mode,SZ,SZ mode をクリア
	ori.w	#%00001000_00000000,d6	* HC モードをセット
	move.b	1(a4,d7.w),d0
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7			* PC がページ境界をまたいだか？
	beq	@f
	PC_page_inc
	andi.w	#$3fff,d7
	beq	@f
	move.b	(a4),d0
@@:	subq.b	#1,d6			* X ビットをセット
	move.b	d0,HC2(a3)		* 足す数を HC2に
	addx.b	d0,d4
	bvs	V_ADC_A			* オーバーフロー？
	bcc	NC_ADC_A1
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6			* 結果を SZ にセット		
	move.b	d4,d5			* 結果を HC1にセット
	rts

*	------ ＳＵＢ ------
SUB_A:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110110_00000000,d6	* Ｃ,HC mode をクリア。 SZ を０に
	ori.w	#%00000010_00000000,d6	* Ｎをセット
	move.b	d6,d4
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d5
	move.b	d4,HC2(a3)
	rts

C_SUB_A1:
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6			* 結果を SZ にセット		
	rts

V_SUB_A:
	bcc	NC_SUB_A2
	ori.w	#%00000001_00000000,d6	* Ｃをセット
NC_SUB_A2:
	clr.b	PV(a3)			* PVをセット	
	move.b	d4,d6			* 結果を SZ にセット		
	rts

SUB_B:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110110_11111111,d6	* Ｃ,HC mode をクリア
	ori.w	#%00000010_00000000,d6	* Ｎをセット
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	b(a3),HC2(a3)		* 引く数を HC2に
	sub.b	b(a3),d4
	bvs	V_SUB_A			* オーバーフロー？
	bcs	C_SUB_A1
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6			* 結果を SZ にセット		
	rts

SUB_C:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110110_11111111,d6	* Ｃ,HC mode をクリア
	ori.w	#%00000010_00000000,d6	* Ｎをセット
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	c(a3),HC2(a3)		* 引く数を HC2に
	sub.b	c(a3),d4
	bvs	V_SUB_A			* オーバーフロー？
	bcs	C_SUB_A1
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6
	rts

SUB_D:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110110_11111111,d6	* Ｃ,HC mode をクリア
	ori.w	#%00000010_00000000,d6	* Ｎをセット
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	d(a3),HC2(a3)		* 引く数を HC2に
	sub.b	d(a3),d4
	bvs	V_SUB_A			* オーバーフロー？
	bcs	C_SUB_A1
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6
	rts

SUB_E:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110110_11111111,d6	* Ｃ,HC mode をクリア
	ori.w	#%00000010_00000000,d6	* Ｎをセット
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	e(a3),HC2(a3)		* 引く数を HC2に
	sub.b	e(a3),d4
	bvs	V_SUB_A			* オーバーフロー？
	bcs	C_SUB_A1
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6
	rts

SUB_H:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110110_11111111,d6	* Ｃ,HC mode をクリア
	ori.w	#%00000010_00000000,d6	* Ｎをセット
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	h(a3),HC2(a3)		* 引く数を HC2に
	sub.b	h(a3),d4
	bvs	V_SUB_A			* オーバーフロー？
	bcs	C_SUB_A1
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6
	rts

SUB_L:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110110_11111111,d6	* Ｃ,HC mode をクリア
	ori.w	#%00000010_00000000,d6	* Ｎをセット
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	l(a3),HC2(a3)		* 引く数を HC2に
	sub.b	l(a3),d4
	bvs	V_SUB_A			* オーバーフロー？
	bcs	C_SUB_A1
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6
	rts

SUB_lHLl:
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110110_11111111,d6	* Ｃ,HC mode をクリア
	ori.w	#%00000010_00000000,d6	* Ｎをセット
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	d0,HC2(a3)		* 引く数を HC2に
	sub.b	d0,d4
	bvs	V_SUB_A			* オーバーフロー？
	bcs	C_SUB_A1
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6
	rts

SUB_n:	andi.w	#%01110110_11111111,d6	* Ｃ,HC mode をクリア
	ori.w	#%00000010_00000000,d6	* Ｎをセット
	move.b	1(a4,d7.w),d0
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7			* PC がページ境界をまたいだか？
	beq	@f
	PC_page_inc
	andi.w	#$3fff,d7
	beq	@f
	move.b	(a4),d0			* d7 = 1 の時
@@:
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	d0,HC2(a3)		* 引く数を HC2に
	sub.b	d0,d4
	bvs	V_SUB_A			* オーバーフロー？
	bcs	C_SUB_A1
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6
	rts


*	------ ＳＢＣ ------
SBC_A_A:
	btst.l	#8,d6
	beq	SUB_A			* Cy が０の時 SUB と同じ
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01111111_11111111,d6	* SZ mode を０に
	ori.w	#%00001011_11111111,d6	* Ｎ,Ｃ, HC mode をセット。SZ を $ffに
	move.b	d6,d4			* A レジスタを $FFに
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d5,HC2(a3)		* HC1と HC2を同じに
	rts

NC_SBC_A1:
	andi.w	#%01111110_11111111,d6	* Ｃをクリア
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6			* 結果を SZ にセット
	rts

V_SBC_A:
	bcs	C_SBC_A2
	andi.w	#%01111110_11111111,d6	* Ｃをクリア
	clr.b	PV(a3)			* PVをセット	
	move.b	d4,d6			* sz をセット
	rts
C_SBC_A2:
	andi.w	#%01111111_11111111,d6	* SZ mode をクリア
	clr.b	PV(a3)			* PVをセット	
	move.b	d4,d6			* sz をセット
	rts

SBC_A_B:
	btst.l	#8,d6
	beq	SUB_B			* Cy が０の時 SUB と同じ
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	ori.w	#%00001011_00000000,d6	* Ｎ,Ｃ, HC mode をセット
	clr.w	d0			* X ビットをセット
	subq.w	#1,d0
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	b(a3),d0
	move.b	d0,HC2(a3)		* 引く数を HC2に
	subx.b	d0,d4
	bvs	V_SBC_A			* オーバーフロー？
	bcc	NC_SBC_A1
	move.b	#1,PV(a3)		* PVをクリア
	andi.w	#%01111111_11111111,d6	* SZ mode をクリア
	move.b	d4,d6			* 結果を SZ にセット
	rts
SBC_A_C:
	btst.l	#8,d6
	beq	SUB_C			* Cy が０の時 SUB と同じ
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	ori.w	#%00001011_00000000,d6	* Ｎ,Ｃ, HC mode をセット
	clr.w	d0			* X ビットをセット
	subq.w	#1,d0
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	c(a3),d0
	move.b	d0,HC2(a3)		* 引く数を HC2に
	subx.b	d0,d4
	bvs	V_SBC_A			* オーバーフロー？
	bcc	NC_SBC_A1
	move.b	#1,PV(a3)		* PVをクリア
	andi.w	#%01111111_11111111,d6	* SZ mode をクリア
	move.b	d4,d6			* 結果を SZ にセット
	rts
SBC_A_D:
	btst.l	#8,d6
	beq	SUB_D			* Cy が０の時 SUB と同じ
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	ori.w	#%00001011_00000000,d6	* Ｎ,Ｃ, HC mode をセット
	clr.w	d0			* X ビットをセット
	subq.w	#1,d0
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	d(a3),d0
	move.b	d0,HC2(a3)		* 引く数を HC2に
	subx.b	d0,d4
	bvs	V_SBC_A			* オーバーフロー？
	bcc	NC_SBC_A1
	move.b	#1,PV(a3)		* PVをクリア
	andi.w	#%01111111_11111111,d6	* SZ mode をクリア
	move.b	d4,d6			* 結果を SZ にセット
	rts
SBC_A_E:
	btst.l	#8,d6
	beq	SUB_E			* Cy が０の時 SUB と同じ
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	ori.w	#%00001011_00000000,d6	* Ｎ,Ｃ, HC mode をセット
	clr.w	d0			* X ビットをセット
	subq.w	#1,d0
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	e(a3),d0
	move.b	d0,HC2(a3)		* 引く数を HC2に
	subx.b	d0,d4
	bvs	V_SBC_A			* オーバーフロー？
	bcc	NC_SBC_A1
	move.b	#1,PV(a3)		* PVをクリア
	andi.w	#%01111111_11111111,d6	* SZ mode をクリア
	move.b	d4,d6			* 結果を SZ にセット
	rts
SBC_A_H:
	btst.l	#8,d6
	beq	SUB_H			* Cy が０の時 SUB と同じ
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	ori.w	#%00001011_00000000,d6	* Ｎ,Ｃ, HC mode をセット
	clr.w	d0			* X ビットをセット
	subq.w	#1,d0
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	h(a3),d0
	move.b	d0,HC2(a3)		* 引く数を HC2に
	subx.b	d0,d4
	bvs	V_SBC_A			* オーバーフロー？
	bcc	NC_SBC_A1
	move.b	#1,PV(a3)		* PVをクリア
	andi.w	#%01111111_11111111,d6	* SZ mode をクリア
	move.b	d4,d6			* 結果を SZ にセット
	rts
SBC_A_L:
	btst.l	#8,d6
	beq	SUB_L			* Cy が０の時 SUB と同じ
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	ori.w	#%00001011_00000000,d6	* Ｎ,Ｃ, HC mode をセット
	clr.w	d0			* X ビットをセット
	subq.w	#1,d0
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	l(a3),d0
	move.b	d0,HC2(a3)		* 引く数を HC2に
	subx.b	d0,d4
	bvs	V_SBC_A			* オーバーフロー？
	bcc	NC_SBC_A1
	move.b	#1,PV(a3)		* PVをクリア
	andi.w	#%01111111_11111111,d6	* SZ mode をクリア
	move.b	d4,d6			* 結果を SZ にセット
	rts
SBC_A_lHLl:
	btst.l	#8,d6
	beq	SUB_lHLl		* Cy が０の時 SUB と同じ
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	ori.w	#%00001011_00000000,d6	* Ｎ,Ｃ, HC mode をセット
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	clr.b	d6			* X ビットをセット
	subq.b	#1,d6
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	d0,HC2(a3)		* 引く数を HC2に
	subx.b	d0,d4
	bvs	V_SBC_A			* オーバーフロー？
	bcc	NC_SBC_A1
	move.b	#1,PV(a3)		* PVをクリア
	andi.w	#%01111111_11111111,d6	* SZ mode をクリア
	move.b	d4,d6			* 結果を SZ にセット
	rts
SBC_A_n:
	btst.l	#8,d6
	beq	SUB_n			* Cy が０の時 SUB と同じ
	ori.w	#%00001011_00000000,d6	* Ｎ,Ｃ, HC mode をセット
	move.b	1(a4,d7.w),d0
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7
	beq	@f
	PC_page_inc
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	beq	@f
	move.b	(a4),d0			* d7 = 1 の時
@@:	clr.b	d6			* X ビットをセット
	subq.b	#1,d6
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	d0,HC2(a3)		* 引く数を HC2に
	subx.b	d0,d4
	bvs	V_SBC_A			* オーバーフロー？
	bcc	NC_SBC_A1
	move.b	#1,PV(a3)		* PVをクリア
	andi.w	#%01111111_11111111,d6	* SZ mode をクリア
	move.b	d4,d6			* 結果を SZ にセット
	rts


*	------ ＡＮＤ ------
AND_A:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode,SZ mode をクリア
	clr.b	d5			* HC を 1に
	move.b	#1,HC2(a3)
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

AND_B:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	clr.b	d5			* HC を 1に
	move.b	#1,HC2(a3)
	and.b	b(a3),d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

AND_C:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	clr.b	d5			* HC を 1に
	move.b	#1,HC2(a3)
	and.b	c(a3),d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

AND_D:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	clr.b	d5			* HC を 1に
	move.b	#1,HC2(a3)
	and.b	d(a3),d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

AND_E:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	clr.b	d5			* HC を 1に
	move.b	#1,HC2(a3)
	and.b	e(a3),d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

AND_H:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	clr.b	d5			* HC を 1に
	move.b	#1,HC2(a3)
	and.b	h(a3),d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

AND_L:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	clr.b	d5			* HC を 1に
	move.b	#1,HC2(a3)
	and.b	l(a3),d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

AND_lHLl:
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	clr.b	d5			* HC を 1に
	move.b	#1,HC2(a3)
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	and.b	d0,d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

AND_n:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	clr.b	d5			* HC を 1に
	move.b	#1,HC2(a3)
	move.b	1(a4,d7.w),d0
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7			* PC がページ境界をまたいだか？
	beq	@f
	PC_page_inc
	andi.w	#$3fff,d7
	beq	@f
	move.b	(a4),d0
@@:	and.b	d0,d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

*	------ ＸＯＲ ------
XOR_A:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110100_00000000,d6	* Ｎ,Ｃ,HC mode,SZ,SZ mode をクリア
	move.b	d5,HC2(a3)		* HC を 0に。( HC1 = HC2 の時, HCは０)
	clr.b	d4
	move.b	d4,PV(a3)		* PV をセット
	rts	

XOR_B:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC を 0に。( HC1 = HC2 の時, HCは０)
	move.b	b(a3),d0		* eor <ea>,Dn という命令はないので。
	eor.b	d0,d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

XOR_C:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC を 0に。( HC1 = HC2 の時, HCは０)
	move.b	c(a3),d0		* eor <ea>,Dn という命令はないので。
	eor.b	d0,d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

XOR_D:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC を 0に。( HC1 = HC2 の時, HCは０)
	move.b	d(a3),d0		* eor <ea>,Dn という命令はないので。
	eor.b	d0,d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

XOR_E:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC を 0に。( HC1 = HC2 の時, HCは０)
	move.b	e(a3),d0		* eor <ea>,Dn という命令はないので。
	eor.b	d0,d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

XOR_H:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC を 0に。( HC1 = HC2 の時, HCは０)
	move.b	h(a3),d0		* eor <ea>,Dn という命令はないので。
	eor.b	d0,d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

XOR_L:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC を 0に。( HC1 = HC2 の時, HCは０)
	move.b	l(a3),d0		* eor <ea>,Dn という命令はないので。
	eor.b	d0,d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

XOR_lHLl:
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC を 0に。( HC1 = HC2 の時, HCは０)
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	eor.b	d0,d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

XOR_n:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC を 0に。( HC1 = HC2 の時, HCは０)
	move.b	1(a4,d7.w),d0
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7		* PC がページ境界をまたいだか？
	beq	@f
	PC_page_inc
	andi.w	#$3fff,d7
	beq	@f
	move.b	(a4),d0
@@:	eor.b	d0,d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

*	------ ＯＲ ------
OR_A:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC を 0に。( HC1 = HC2 の時, HCは０)
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

OR_B:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC を 0に。( HC1 = HC2 の時, HCは０)
	or.b	b(a3),d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

OR_C:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC を 0に。( HC1 = HC2 の時, HCは０)
	or.b	c(a3),d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

OR_D:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC を 0に。( HC1 = HC2 の時, HCは０)
	or.b	d(a3),d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

OR_E:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC を 0に。( HC1 = HC2 の時, HCは０)
	or.b	e(a3),d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

OR_H:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC を 0に。( HC1 = HC2 の時, HCは０)
	or.b	h(a3),d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

OR_L:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC を 0に。( HC1 = HC2 の時, HCは０)
	or.b	l(a3),d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

OR_lHLl:
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC を 0に。( HC1 = HC2 の時, HCは０)
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	or.b	d0,d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

OR_n:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC を 0に。( HC1 = HC2 の時, HCは０)
	move.b	1(a4,d7.w),d0
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7			* PC がページ境界をまたいだか？
	beq	@f
	PC_page_inc
	andi.w	#$3fff,d7
	beq	@f
	move.b	(a4),d0
@@:	or.b	d0,d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

*	------ ＣＰ ------
CP_A:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110110_00000000,d6	* Ｃ,HC mode をクリア。SZ,SZ modeを０に
	ori.w	#%00000010_00000000,d6	* Ｎをセット
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d5,HC2(a3)		* HC をクリア
	rts

C_CP_A1:
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	move.b	#1,PV(a3)		* PVをクリア
	rts

V_CP_A:
	bcc	NC_CP_A2
	ori.w	#%00000001_00000000,d6	* Ｃをセット
NC_CP_A2:
	clr.b	PV(a3)			* PVをセット	
	rts

CP_B:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110110_11111111,d6	* Ｃ,HC mode をクリア
	ori.w	#%00000010_00000000,d6	* Ｎをセット
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	b(a3),HC2(a3)		* 引く数を HC2に
	move.b	d4,d6			* 比較かつ結果を SZ にセット		
	sub.b	b(a3),d6		*
	bvs	V_CP_A			* オーバーフロー？
	bcs	C_CP_A1
	move.b	#1,PV(a3)		* PVをクリア
	rts

CP_C:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110110_11111111,d6	* Ｃ,HC mode をクリア
	ori.w	#%00000010_00000000,d6	* Ｎをセット
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	c(a3),HC2(a3)		* 引く数を HC2に
	move.b	d4,d6			* 比較かつ結果を SZ にセット		
	sub.b	c(a3),d6		*
	bvs	V_CP_A			* オーバーフロー？
	bcs	C_CP_A1
	move.b	#1,PV(a3)		* PVをクリア
	rts

CP_D:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110110_11111111,d6	* Ｃ,HC mode をクリア
	ori.w	#%00000010_00000000,d6	* Ｎをセット
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	d(a3),HC2(a3)		* 引く数を HC2に
	move.b	d4,d6			* 比較かつ結果を SZ にセット		
	sub.b	d(a3),d6		*
	bvs	V_CP_A			* オーバーフロー？
	bcs	C_CP_A1
	move.b	#1,PV(a3)		* PVをクリア
	rts

CP_E:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110110_11111111,d6	* Ｃ,HC mode をクリア
	ori.w	#%00000010_00000000,d6	* Ｎをセット
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	e(a3),HC2(a3)		* 引く数を HC2に
	move.b	d4,d6			* 比較かつ結果を SZ にセット		
	sub.b	e(a3),d6		*
	bvs	V_CP_A			* オーバーフロー？
	bcs	C_CP_A1
	move.b	#1,PV(a3)		* PVをクリア
	rts

CP_H:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110110_11111111,d6	* Ｃ,HC mode をクリア
	ori.w	#%00000010_00000000,d6	* Ｎをセット
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	h(a3),HC2(a3)		* 引く数を HC2に
	move.b	d4,d6			* 比較かつ結果を SZ にセット		
	sub.b	h(a3),d6		*
	bvs	V_CP_A			* オーバーフロー？
	bcs	C_CP_A1
	move.b	#1,PV(a3)		* PVをクリア
	rts

CP_L:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110110_11111111,d6	* Ｃ,HC mode をクリア
	ori.w	#%00000010_00000000,d6	* Ｎをセット
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	l(a3),HC2(a3)		* 引く数を HC2に
	move.b	d4,d6			* 比較かつ結果を SZ にセット		
	sub.b	l(a3),d6		*
	bvs	V_CP_A			* オーバーフロー？
	bcs	C_CP_A1
	move.b	#1,PV(a3)		* PVをクリア
	rts

CP_lHLl:
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110110_11111111,d6	* Ｃ,HC mode をクリア
	ori.w	#%00000010_00000000,d6	* Ｎをセット
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	d0,HC2(a3)		* 引く数を HC2に
	move.b	d4,d6			* 比較かつ結果を SZ にセット		
	sub.b	d0,d6			*
	bvs	V_CP_A			* オーバーフロー？
	bcs	C_CP_A1
	move.b	#1,PV(a3)		* PVをクリア
	rts

CP_n:	andi.w	#%01110110_11111111,d6	* Ｃ,HC mode をクリア
	ori.w	#%00000010_00000000,d6	* Ｎをセット
	move.b	1(a4,d7.w),d0
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7			* PC がページ境界をまたいだか？
	beq	@f
	PC_page_inc
	andi.w	#$3fff,d7
	beq	@f
	move.b	(a4),d0
@@:
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	d0,HC2(a3)		* 引く数を HC2に
	move.b	d4,d6			* 比較かつ結果を SZ にセット		
	sub.b	d0,d6			*
	bvs	V_CP_A			* オーバーフロー？
	bcs	C_CP_A1
	move.b	#1,PV(a3)		* PVをクリア
	rts

*	------ ＩＮＣ ------
INC_A:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110101_11111111,d6	* Ｎ,HC modeをクリア
	clr.b	PV(a3)			* PVをセット	
	addq.b	#1,d4
	bVS	1f
	move.b	#1,PV(a3)		* PVをクリア
1:	move.b	d4,d6
	move.b	d4,d5
	move.b	#1,HC2(a3)
	rts

INC_B:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110101_11111111,d6	* Ｎ,HC modeをクリア
	clr.b	PV(a3)			* PVをセット	
	move.b	b(a3),d0
	addq.b	#1,d0
	bVS	1f
	move.b	#1,PV(a3)		* PVをクリア
1:	move.b	d0,d6
	move.b	d0,d5
	move.b	d0,b(a3)
	move.b	#1,HC2(a3)
	rts

INC_C:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110101_11111111,d6	* Ｎ,HC modeをクリア
	clr.b	PV(a3)		* PVをセット	
	move.b	c(a3),d0
	addq.b	#1,d0
	bVS	1f
	move.b	#1,PV(a3)		* PVをクリア
1:	move.b	d0,d6
	move.b	d0,d5
	move.b	d0,c(a3)
	move.b	#1,HC2(a3)
	rts

INC_D:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110101_11111111,d6	* Ｎ,HC modeをクリア
	clr.b	PV(a3)		* PVをセット	
	move.b	d(a3),d0
	addq.b	#1,d0
	bVS	1f
	move.b	#1,PV(a3)		* PVをクリア
1:	move.b	d0,d6
	move.b	d0,d5
	move.b	d0,d(a3)
	move.b	#1,HC2(a3)
	rts

INC_E:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110101_11111111,d6	* Ｎ,HC modeをクリア
	clr.b	PV(a3)		* PVをセット	
	move.b	e(a3),d0
	addq.b	#1,d0
	bVS	1f
	move.b	#1,PV(a3)		* PVをクリア
1:	move.b	d0,d6
	move.b	d0,d5
	move.b	d0,e(a3)
	move.b	#1,HC2(a3)
	rts

INC_H:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110101_11111111,d6	* Ｎ,HC modeをクリア
	clr.b	PV(a3)		* PVをセット	
	move.b	h(a3),d0
	addq.b	#1,d0
	bVS	1f
	move.b	#1,PV(a3)		* PVをクリア
1:	move.b	d0,d6
	move.b	d0,d5
	move.b	d0,h(a3)
	move.b	#1,HC2(a3)
	rts

INC_L:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110101_11111111,d6	* Ｎ,HC modeをクリア
	clr.b	PV(a3)			* PVをセット	
	move.b	l(a3),d0
	addq.b	#1,d0
	bVS	1f
	move.b	#1,PV(a3)		* PVをクリア
1:	move.b	d0,d6
	move.b	d0,d5
	move.b	d0,l(a3)
	move.b	#1,HC2(a3)
	rts

INC_lHLl:
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%01110101_11111111,d6	* Ｎ,HC modeをクリア
	clr.b	PV(a3)			* PVをセット	
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	addq.b	#1,d0
	bVS	1f
	move.b	#1,PV(a3)		* PVをクリア
1:	move.b	d0,d6
	move.b	d0,d5
	move.b	#1,HC2(a3)
	move.b	d0,d1
	move.w	hl(a3),d0
	jsr	ms_write_mem_8
	rts

INC_BC:	addq.w	#1,bc(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

INC_DE:	addq.w	#1,de(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

INC_HL:	addq.w	#1,hl(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

INC_SP:	addq.w	#1,sp_(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

*	------ ＤＥＣ ------
DEC_A:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	ori.w	#%00001010_00000000,d6	* Ｎ,HC modeをセット
	andi.w	#%01111111_11111111,d6	* SZ mode をクリア
	clr.b	PV(a3)			* PVをセット	
	move.b	d4,d5			* 引かれる数を HC1 に
	subq.b	#1,d4
	bVS	1f
	move.b	#1,PV(a3)		* PVをクリア
1:	move.b	d4,d6
	clr.b	HC2(a3)			*引く数を０に(HC modeが 1になっていることに注意)
	rts

DEC_B:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	ori.w	#%00001010_00000000,d6	* Ｎ,HC modeをセット
	andi.w	#%01111111_11111111,d6	* SZ mode をクリア
	clr.b	PV(a3)			* PVをセット	
	move.b	b(a3),d0
	move.b	d0,d5			* 引かれる数を HC1 に
	subq.b	#1,d0
	bVS	1f
	move.b	#1,PV(a3)		* PVをクリア
1:	move.b	d0,d6
	move.b	d0,b(a3)
	clr.b	HC2(a3)
	rts

DEC_C:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	ori.w	#%00001010_00000000,d6	* Ｎ,HC modeをセット
	andi.w	#%01111111_11111111,d6	* SZ mode をクリア
	clr.b	PV(a3)			* PVをセット	
	move.b	c(a3),d0
	move.b	d0,d5			* 引かれる数を HC1 に
	subq.b	#1,d0
	bVS	1f
	move.b	#1,PV(a3)		* PVをクリア
1:	move.b	d0,d6
	move.b	d0,c(a3)
	clr.b	HC2(a3)
	rts

DEC_D:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	ori.w	#%00001010_00000000,d6	* Ｎ,HC modeをセット
	andi.w	#%01111111_11111111,d6	* SZ mode をクリア
	clr.b	PV(a3)			* PVをセット	
	move.b	d(a3),d0
	move.b	d0,d5			* 引かれる数を HC1 に
	subq.b	#1,d0
	bVS	1f
	move.b	#1,PV(a3)		* PVをクリア
1:	move.b	d0,d6
	move.b	d0,d(a3)
	clr.b	HC2(a3)
	rts

DEC_E:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	ori.w	#%00001010_00000000,d6	* Ｎ,HC modeをセット
	andi.w	#%01111111_11111111,d6	* SZ mode をクリア
	clr.b	PV(a3)			* PVをセット	
	move.b	e(a3),d0
	move.b	d0,d5			* 引かれる数を HC1 に
	subq.b	#1,d0
	bVS	1f
	move.b	#1,PV(a3)		* PVをクリア
1:	move.b	d0,d6
	move.b	d0,e(a3)
	clr.b	HC2(a3)
	rts

DEC_H:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	ori.w	#%00001010_00000000,d6	* Ｎ,HC modeをセット
	andi.w	#%01111111_11111111,d6	* SZ mode をクリア
	clr.b	PV(a3)			* PVをセット	
	move.b	h(a3),d0
	move.b	d0,d5			* 引かれる数を HC1 に
	subq.b	#1,d0
	bVS	1f
	move.b	#1,PV(a3)		* PVをクリア
1:	move.b	d0,d6
	move.b	d0,h(a3)
	clr.b	HC2(a3)
	rts

DEC_L:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	ori.w	#%00001010_00000000,d6	* Ｎ,HC modeをセット
	andi.w	#%01111111_11111111,d6	* SZ mode をクリア
	clr.b	PV(a3)			* PVをセット	
	move.b	l(a3),d0
	move.b	d0,d5			* 引かれる数を HC1 に
	subq.b	#1,d0
	bVS	1f
	move.b	#1,PV(a3)		* PVをクリア
1:	move.b	d0,d6
	move.b	d0,l(a3)
	clr.b	HC2(a3)
	rts

DEC_lHLl:
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	ori.w	#%00001010_00000000,d6	* Ｎ,HC modeをセット
	andi.w	#%01111111_11111111,d6	* SZ mode をクリア
	clr.b	PV(a3)			* PVをセット	
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	move.b	d0,d5			* 引かれる数を HC1 に
	subq.b	#1,d0
	bVS	1f
	move.b	#1,PV(a3)		* PVをクリア
1:	move.b	d0,d6
	clr.b	HC2(a3)
	move.b	d0,d1
	move.w	hl(a3),d0
	jsr	ms_write_mem_8
	rts

DEC_BC:	subq.w	#1,bc(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

DEC_DE:	subq.w	#1,de(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

DEC_HL:	subq.w	#1,hl(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

DEC_SP:	subq.w	#1,sp_(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts


*	Ａレジスタの値が規定外の時の動きが正しいかどうかわからない
*	------ ＤＡＡ ------
DAA:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	btst.l	#9,d6			* N フラグを調べる
	bne	1f			* 減算の時

	move.w	d6,d0			* ハーフキャリーフラグを調べる
	andi.w	#%00001000_00000000,d0	* HC mode を調べる
	rol.w	#5,d0
	move.b	HC2(a3),d1		
	andi.w	#$000f,d5		* HC1 HC2 を４ビットのみ有効にする
	andi.w	#$000f,d1
	add.w	d0,d1
	cmp.w	d1,d5			* HC1-(HC2 + HC mode)
	bcs	@f			* HC が１の時
	move.b	d4,d0
	andi.b	#%0000_1111,d0
	cmpi.b	#$0a,d0
	bmi	2f			* １ケタめが０〜９の範囲に入っていた時
@@:	addq.b	#$06,d4
	bcs	@f			* ケタ上がりが起きた時(普通は起きない)

2:	btst.l	#8,d6			* Ｃを調べる
	bne	@f			* Ｃが１の時
	move.b	d4,d0
	andi.b	#%1111_0000,d0
	cmpi.b	#$a0,d0
	bcs	2f			* ２ケタ目が０〜９の範囲に入っていた時
@@:	addi.b	#$60,d4	
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	andi.w	#%01111111_11111111,d6	* SZ mode をクリア
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts

2:	andi.w	#%01111110_11111111,d6	* Ｃをクリア
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts

1:					* 減算の時
	btst.l	#8,d6			* Ｃを調べる
	bne	2f			* Ｃが１の時
	move.w	d6,d0			* ハーフキャリーフラグを調べる
	andi.w	#%00001000_00000000,d0	* HC mode を調べる
	rol.w	#5,d0
	move.b	HC2(a3),d1		
	andi.w	#$000f,d5		* HC1 HC2 を４ビットのみ有効にする
	andi.w	#$000f,d1
	add.w	d0,d1
	cmp.w	d1,d5			* HC1-(HC2 + HC mode)
	bcc	@f			* HC が０の時

	add.b	#$FA,d4
	bra	@f

2:	move.w	d6,d0			* ハーフキャリーフラグを調べる
	andi.w	#%00001000_00000000,d0	* HC mode を調べる
	rol.w	#5,d0
	move.b	HC2(a3),d1		
	andi.w	#$000f,d5		* HC1 HC2 を４ビットのみ有効にする
	andi.w	#$000f,d1
	add.w	d0,d1
	cmp.w	d1,d5			* HC1-(HC2 + HC mode)
	bcs	1f			* HC が１の時

	add.b	#$a0,d4
	bra	@f

1:	add.b	#$9a,d4

@@:	andi.w	#%01111111_11111111,d6	* SZ mode をクリア
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts

*1:					* 減算の時
*	btst.l	#8,d6			* Ｃを調べる
*	bne	@f			* Ｃが１の時
*	move.b	d4,d0
*	andi.b	#%1111_0000,d0
*	cmpi.b	#$a0,d0
*	bcs	2f			* ２ケタめが０〜９の範囲に入っていた時
*@@:
*	subi.b	#$60,d4
*	ori.w	#%00000001_00000000,d6	* Ｃをセット
*
*2:	move.w	d6,d0			* ハーフキャリーフラグを調べる
*	andi.w	#%00001000_00000000,d0	* HC mode を調べる
*	rol.w	#5,d0
*	move.b	HC2(a3),d1		
*	andi.w	#$000f,d5		* HC1 HC2 を４ビットのみ有効にする
*	andi.w	#$000f,d1
*	add.w	d0,d1
*	cmp.w	d1,d5			* HC1-(HC2 + HC mode)
*	bcs	@f			* HC が１の時
*	move.b	d4,d0
*	andi.b	#%0000_1111,d0
*	cmpi.b	#$0a,d0
*	bmi	2f			* １ケタ目が０〜９の範囲に入っていた時
*@@:
*	subq.b	#$06,d4	
*2:	andi.w	#%01111111_11111111,d6	* SZ mode をクリア
*	move.b	d4,PV(a3)		* PV をセット
*	move.b	d4,d6			* SZ をセット
*	rts
*
*
*	------ ＪＰ ------
JP:	move.b	2(a4,d7.w),d0		* nn の上位８ビットを読む 
	lsl.w	#8,d0
	move.b	1(a4,d7.w),d0		* nn の下位８ビットを読む 
	cmpi.w	#$3ffe,d7
	bcc	@f
	move.w	d0,d7
	PC_page_set
	rts
@@:	bne	9f			* ページ境界をまたいだ時
	PC_page_inc			* d7 = $3ffe の時
	move.b	(a4),d7			* nn の上位８ビットを読む
	lsl.w	#8,d7
	move.b	d0,d7
	PC_page_set
	rts
9:	PC_page_inc			* d7 = $3fff の時
	move.b	1(a4),d7
	lsl.w	#8,d7
	move.b	 (a4),d7
	PC_page_set
	rts

JP_lHLl:
	move.w	hl(a3),d7
	PC_page_set
	rts

JP_C:	btst.l	#8,d6		* Ｃｙフラグをテスト
	bne	JP		* Ｃｙが１ならジャンプ
	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc		* 命令がページ境界をまたいだ時
	rts

JP_NC:	btst.l	#8,d6		* Ｃｙフラグをテスト
	beq	JP		* Ｃｙが０ならジャンプ
	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc		* 命令がページ境界をまたいだ時
	rts

JP_Z:	btst.l	#15,d6		* SZ mode を調べる
	bne	JP
	move.b	d6,d6		* Ｚフラグをテスト
	beq	JP		* ０ならジャンプ
	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc		* 命令がページ境界をまたいだ時
	rts

JP_NZ:	btst.l	#15,d6		* SZ mode を調べる
	bne	1f
	tst.b	d6		* Ｚフラグをテスト
	bne	JP		* ０でないならジャンプ
1:	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc		* 命令がページ境界をまたいだ時
	rts

JP_PE:	move.b	PV(a3),d0
	clr.w	d1
	clr.w	d2
	lsr.b	#1,d0
	addx.w	d1,d2
	lsr.b	#1,d0
	addx.w	d1,d2
	lsr.b	#1,d0
	addx.w	d1,d2
	lsr.b	#1,d0
	addx.w	d1,d2
	lsr.b	#1,d0
	addx.w	d1,d2
	lsr.b	#1,d0
	addx.w	d1,d2
	lsr.b	#1,d0
	addx.w	d1,d2
	lsr.b	#1,d0
	addx.w	d1,d2
	andi.b	#1,d2	
	beq	JP
	addq.w	#3,d7		* 奇数だからジャンプしない
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc	* 命令がページ境界をまたいだ時
	rts

JP_PO:	move.b	PV(a3),d0
	clr.w	d1
	clr.w	d2
	lsr.b	#1,d0
	addx.w	d1,d2
	lsr.b	#1,d0
	addx.w	d1,d2
	lsr.b	#1,d0
	addx.w	d1,d2
	lsr.b	#1,d0
	addx.w	d1,d2
	lsr.b	#1,d0
	addx.w	d1,d2
	lsr.b	#1,d0
	addx.w	d1,d2
	lsr.b	#1,d0
	addx.w	d1,d2
	lsr.b	#1,d0
	addx.w	d1,d2
	andi.b	#1,d2	
	bne	JP		* 奇数だからジャンプ
	addq.w	#3,d7		* 偶数だからジャンプしない
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc		* 命令がページ境界をまたいだ時
	rts

JP_P:	btst.l	#15,d6		* SZ mode を調べる
	bne	1f
	tst.b	d6
	bpl	JP
1:	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc	* 命令がページ境界をまたいだ時
	rts

JP_M:	btst.l	#15,d6		* SZ mode を調べる
	bne	JP
	tst.b	d6
	bmi	JP
	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc	* 命令がページ境界をまたいだ時
	rts

*	------ ＪＲ ------
JR:	cmpi.w	#$3fff,d7
	beq	9f
	move.b	1(a4,d7.w),d1		* 相対移動量を読み込む
	ext.w	d1			* ワードに符号拡張
	move.l	d7,d0
	lsr.l	#2,d0			* d0 = pp00????_????????
	andi.w	#%11000000_00000000,d0	* d0 = pp000000_00000000
	or.w	d0,d7			* d7 = PC (R800)
	addq.w	#2,d7			* d7 = 次の命令の位置
	add.w	d1,d7			* 足し算
	PC_page_set
	rts
9:	PC_page_inc			* d7 = $3fff の時
	move.b	(a4),d1			* 相対移動量を読み込む
	ext.w	d1			* ワードに符号拡張
	lsr.l	#2,d7			* d0 = pp001111_11111111
	andi.w	#%11000000_00000001,d7	* d7 = pp000000_00000001 (次の命令の位置)
	add.w	d1,d7			* 足し算
	PC_page_set
	rts

JR_NZ:	btst.l	#15,d6		* SZ mode を調べる
	bne	1f
	tst.b	d6		* Ｚフラグをテスト
	bne	JR		* ０でないならジャンプ
1:	addq.w	#2,d7
	btst.l	#14,d7		* PC がページ境界をまたいだか？
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc		* 命令がページ境界をまたいだ時
	rts

JR_Z:	btst.l	#15,d6		* SZ mode を調べる
	bne	JR
	tst.b	d6		* Ｚフラグをテスト
	beq	JR		* ０ならジャンプ
	addq.w	#2,d7
	btst.l	#14,d7		* PC がページ境界をまたいだか？
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc		* 命令がページ境界をまたいだ時
	rts

JR_NC:	btst.l	#8,d6		* Ｃｙフラグをテスト
	beq	JR		* Ｃｙが０ならジャンプ
	addq.w	#2,d7
	btst.l	#14,d7		* PC がページ境界をまたいだか？
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc		* 命令がページ境界をまたいだ時
	rts

JR_C:	btst.l	#8,d6		* Ｃｙフラグをテスト
	bne	JR		* Ｃｙが１ならジャンプ
	addq.w	#2,d7
	btst.l	#14,d7		* PC がページ境界をまたいだか？
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc		* 命令がページ境界をまたいだ時
	rts

*	------ ＣＡＬＬ ------
CALL:	move.l	d7,d0
	move.w	d7,d1
	lsr.l	#2,d0			* d0 = pp00????_????????
	andi.w	#%11000000_00000000,d0	* d0 = pp000000_00000000
	or.w	d0,d1			* d1 = PC (R800)
	addq.w	#3,d1			* d1 = next Instruction
	subq.w	#2,sp_(a3)		* PUSH	
	move.w	sp_(a3),d0
	jsr	ms_write_mem_16

	move.b	2(a4,d7.w),d0		* nn の上位８ビットを読む 
	lsl.w	#8,d0
	move.b	1(a4,d7.w),d0		* nn の下位８ビットを読む 

	cmpi.w	#$3ffe,d7
	bcc	1f
	move.w	d0,d7
	PC_page_set
	rts
1:	bne	2f			* 命令がページ境界をまたいだ時
	PC_page_inc			* d7 = $3ffe の時
	move.b	(a4),d7			* nn の上位８ビットを読む
	lsl.w	#8,d7
	move.b	d0,d7
	PC_page_set
	rts
2:	PC_page_inc			* d7 = $3fff の時
	move.b	1(a4),d7
	lsl.w	#8,d7
	move.b	 (a4),d7
	PC_page_set
	rts

CALL_C:	btst.l	#8,d6		* Ｃｙフラグをテスト
	bne	CALL		* Ｃｙが１ならコール
	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc
	rts

CALL_NC: btst.l	#8,d6		* Ｃｙフラグをテスト
	beq	CALL		* Ｃｙが０ならコール
	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc
	rts

CALL_Z:	btst.l	#15,d6		* SZ mode を調べる
	bne	CALL
	tst.b	d6		* Ｚフラグをテスト
	beq	CALL		* ０ならコール
	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc
	rts

CALL_NZ:
	btst.l	#15,d6		* SZ mode を調べる
	bne	@f
	tst.b	d6		* Ｚフラグをテスト
	bne	CALL		* ０でないならコール
@@:
	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc
	rts

CALL_PE:
	move.b	PV(a3),d0
	clr.w	d1
	clr.w	d2
	lsr.b	#1,d0
	addx.w	d1,d2
	lsr.b	#1,d0
	addx.w	d1,d2
	lsr.b	#1,d0
	addx.w	d1,d2
	lsr.b	#1,d0
	addx.w	d1,d2
	lsr.b	#1,d0
	addx.w	d1,d2
	lsr.b	#1,d0
	addx.w	d1,d2
	lsr.b	#1,d0
	addx.w	d1,d2
	lsr.b	#1,d0
	addx.w	d1,d2
	andi.b	#1,d2	
	beq	CALL		* 偶数だからコール
	addq.w	#3,d7		* 奇数だからコールしない
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc
	rts

CALL_PO:
	move.b	PV(a3),d0
	clr.w	d1
	clr.w	d2
	lsr.b	#1,d0
	addx.w	d1,d2
	lsr.b	#1,d0
	addx.w	d1,d2
	lsr.b	#1,d0
	addx.w	d1,d2
	lsr.b	#1,d0
	addx.w	d1,d2
	lsr.b	#1,d0
	addx.w	d1,d2
	lsr.b	#1,d0
	addx.w	d1,d2
	lsr.b	#1,d0
	addx.w	d1,d2
	lsr.b	#1,d0
	addx.w	d1,d2
	andi.b	#1,d2	
	bne	CALL		* 奇数だからコール
	addq.w	#3,d7		* 偶数だからコールしない
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc
	rts

CALL_P:	btst.l	#15,d6		* SZ mode を調べる
	bne	@f
	tst.b	d6
	bpl	CALL
@@:	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc
	rts

CALL_M:	btst.l	#15,d6		* SZ mode を調べる
	bne	CALL
	tst.b	d6
	bmi	CALL
	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc
	rts

*	------ ＲＥＴ ------
RET:	move.w	sp_(a3),d0
	jsr	ms_read_mem_16
	addq.w	#2,sp_(a3)
	move.w	d0,d7
	PC_page_set
	rts

RET_C:	btst.l	#8,d6		* Ｃｙフラグをテスト
	bne	RET		* Ｃｙが１ならリターン
	addq.w	#1,d7		* PC += 1
	andi.w	#$3fff,d7	* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

RET_NC:	btst.l	#8,d6		* Ｃｙフラグをテスト
	beq	RET		* Ｃｙが０ならリターン
	addq.w	#1,d7		* PC += 1
	andi.w	#$3fff,d7	* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

RET_Z:	btst.l	#15,d6		* SZ mode を調べる
	bne	RET
	tst.b	d6		* Ｚフラグをテスト
	beq	RET		* ０ならリターン
	addq.w	#1,d7		* PC += 1
	andi.w	#$3fff,d7	* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

RET_NZ:	btst.l	#15,d6		* SZ mode を調べる
	bne	rts_common
	tst.b	d6		* Ｚフラグをテスト
	bne	RET		* ０でないならリターン
	addq.w	#1,d7		* PC += 1
	andi.w	#$3fff,d7	* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

RET_M:	btst.l	#15,d6		* SZ mode を調べる
	bne	RET
	tst.b	d6		* ＳＺフラグをテスト
	bmi	RET		* 負ならリターン
	addq.w	#1,d7		* PC += 1
	andi.w	#$3fff,d7	* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

RET_P:	btst.l	#15,d6		* SZ mode を調べる
	bne	rts_common
	tst.b	d6		* ＳＺフラグをテスト
	bpl	RET		* 正ならリターン
	addq.w	#1,d7		* PC += 1
	andi.w	#$3fff,d7	* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

RET_PE:	move.b	PV(a3),d0
	moveq.l	#8,d1		* ループカウンタ
loop_RET_PE_Even:
	lsr.b	#1,d0
	bcs	loop_RET_PO_Odd	* 奇数へ
	subq.w	#1,d1
	bne	loop_RET_PO_Even
	bra	RET		* 最終的にこっちに来た時は、偶数だからリターン
loop_RET_PE_Odd:
	lsr.b	#1,d0
	bcs	loop_RET_PO_Even	* 奇数へ
	subq.w	#1,d1
	bne	loop_RET_PO_Odd
	addq.w	#1,d7		* PC += 1
	andi.w	#$3fff,d7	* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts		* 最終的にこっちに来た時は、奇数だからリターンしない

RET_PO:	move.b	PV(a3),d0
	move.w	#8-1,d1		* ループカウンタ
loop_RET_PO_Even:
	lsr.b	#1,d0
	bcs	loop_RET_PO_Odd	* 奇数へ
	dbra	d1,loop_RET_PO_Even
	addq.w	#1,d7		* PC += 1
	andi.w	#$3fff,d7	* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts		* 最終的にこっちに来た時は、偶数だからリターンしない
loop_RET_PO_Odd:
	lsr.b	#1,d0
	bcs	loop_RET_PO_Even	* 奇数へ
	dbra	d1,loop_RET_PO_Odd
	bra	RET		* 最終的にこっちに来た時は、奇数だからリターン

*	------ ＤＪＮＺ ------
DJNZ:	subq.b	#1,b(a3)	* b = b-1
	bne	JR		* b != 0 ならブランチ
	addq.w	#2,d7
	btst.l	#14,d7		* PC がページ境界をまたいだか？
	beq	rts_common
	PC_page_inc
	andi.w	#$3fff,d7
	rts


*	------ ＰＵＳＨ  ＰＯＰ ------
PUSH_AF:
	addq.w	#1,d7
	andi.w	#$3fff,d7
	bne	9f
	PC_page_inc
9:	move.w	d6,-(sp)
	move.b	PV(a3),d0
	ori.w	#%00000100_00000000,d6	* P/V フラグをセット
	move.w	#8-1,d1
@@:	lsr.b	#1,d0
	bcc	not_1
	eori.w	#%00000100_00000000,d6	* P/V フラグを反転
not_1:	dbra	d1,@b

	andi.w	#%10101111_11111111,d6	* SZH フラグをリセット
	move.w	d6,d0			* ハーフキャリーフラグを調べる
	andi.w	#%00001000_00000000,d0	* HC mode を調べる
	rol.w	#5,d0
	move.b	HC2(a3),d1		
	andi.w	#$000f,d5		* HC1 HC2 を４ビットのみ有効にする
	andi.w	#$000f,d1
	add.w	d0,d1
	cmp.w	d1,d5			* HC1-(HC2 + HC mode)
	bcc	not_HC_1
	ori.w	#%00010000_00000000,d6	* H フラグをセット
not_HC_1:
	bclr.l	#15,d6			* SZ mode をテスト
	bne	@f
	tst.b	d6
	bmi	minus
	bne	next_pushAF
	ori.w	#%01000000_00000000,d6	* Z フラグをセット
	bra	next_pushAF

minus:	ori.w	#%10000000_00000000,d6	* S フラグをセット
	bra	next_pushAF

@@:	ori.w	#%11000000_00000000,d6

next_pushAF:
	move.b	d4,d1
	lsl.w	#8,d1			* A レジスタをロード
	move.w	d6,-(sp)
	move.b	(sp)+,d1		* フラグのロード (SPは+2されるので正常)
	andi.b	#%11010111,d1		* フラグと関係無い部分の削除
	move.b	f(a3),d0
	andi.b	#%00101000,d0		* フラグと関係無い部分のロード
	or.b	d0,d1
	subq.w	#2,sp_(a3)
	move.w	sp_(a3),d0
	jsr	ms_write_mem_16

	move.w	(sp)+,d6

	rts


POP_AF:	addq.w	#1,d7
	andi.w	#$3fff,d7
	bne	9f
	PC_page_inc
9:	move.w	sp_(a3),d0
	jsr	ms_read_mem_16
	addq.w	#2,sp_(a3)

	move.w	d0,-(sp)		* Aレジスタをセット
	move.b	(sp)+,d4
	move.b	d0,f(a3)		* フラグのロード
	clr.b	PV(a3)
	btst.l	#2,d0			* P/V フラグを調べる
	bne	@f
	move.b	#1,PV(a3)		* 奇数にする
@@:
	move.b	d0,d6
	lsl.w	#8,d6			* フラグのロード
	andi.w	#%00000011_00000000,d6	* N,Cのみ有効に。SZ, HC mode を０に
	clr.b	d5			* HC1
	clr.b	HC2(a3)

	btst.l	#4,d0			* HC フラグを調べる
	beq	@f
	move.b	#1,HC2(a3)
@@:	andi.b	#%11000000,d0
	beq	plus_popAF		* 全部立っていなければプラス
	bpl	rts_common			* S フラグが立っていなければゼロ
	cmpi.b	#%11000000,d0		* どっちも立ってる？
	beq	@f
	move.b	#-1,d6
	rts

@@:	ori.w	#%10000000_00000000,d6	* SZ mode をセット
	rts
plus_popAF:
	move.b	#1,d6
	rts

PUSH_BC:
	subq.w	#2,sp_(a3)
	move.w	sp_(a3),d0
	move.w	bc(a3),d1
	jsr	ms_write_mem_16
	addq.w	#1,d7
	andi.w	#$3fff,d7
	bne	rts_common
	PC_page_inc
	rts
POP_BC:
	move.w	sp_(a3),d0
	jsr	ms_read_mem_16
	addq.w	#2,sp_(a3)
	move.w	d0,bc(a3)
	addq.w	#1,d7
	andi.w	#$3fff,d7
	bne	rts_common
	PC_page_inc
	rts

PUSH_DE:
	subq.w	#2,sp_(a3)
	move.w	sp_(a3),d0
	move.w	de(a3),d1
	jsr	ms_write_mem_16
	addq.w	#1,d7
	andi.w	#$3fff,d7
	bne	rts_common
	PC_page_inc
	rts
POP_DE:
	move.w	sp_(a3),d0
	jsr	ms_read_mem_16
	addq.w	#2,sp_(a3)
	move.w	d0,de(a3)
	addq.w	#1,d7
	andi.w	#$3fff,d7
	bne	rts_common
	PC_page_inc
	rts

PUSH_HL:
	subq.w	#2,sp_(a3)
	move.w	sp_(a3),d0
	move.w	hl(a3),d1
	jsr	ms_write_mem_16
	addq.w	#1,d7
	andi.w	#$3fff,d7
	bne	rts_common
	PC_page_inc
	rts
POP_HL:
	move.w	sp_(a3),d0
	jsr	ms_read_mem_16
	addq.w	#2,sp_(a3)
	move.w	d0,hl(a3)
	addq.w	#1,d7
	andi.w	#$3fff,d7
	bne	rts_common
	PC_page_inc
	rts

*	------ ＥＸ ------
EX_lSPl_HL:
	move.w	sp_(a3),d0
	jsr	ms_read_mem_16
	move.w	hl(a3),d1
	move.w	d0,hl(a3)
	move.w	sp_(a3),d0
	jsr	ms_write_mem_16
	addq.w	#1,d7
	andi.w	#$3fff,d7
	bne	rts_common
	PC_page_inc
	rts

EXX:	move.l	bc(a3),d0		* d0 = bc, de
	move.w	hl(a3),d1

	move.l	bc_(a3),bc(a3)
	move.w	hl_(a3),hl(a3)

	move.l	d0,bc_(a3)
	move.w	d1,hl_(a3)

	addq.w	#1,d7
	andi.w	#$3fff,d7
	bne	rts_common
	PC_page_inc
	rts

EX_DE_HL:
	move.l	de(a3),d0
	swap	d0
	move.l	d0,de(a3)
	addq.w	#1,d7
	andi.w	#$3fff,d7
	bne	rts_common
	PC_page_inc
	rts

EX_AF_AFd:
	move.w	af_(a3),d0
	move.b	f(a3),f_(a3)
	move.b	d0,f(a3)
	move.b	d4,a_(a3)
	lsr.w	#8,d0
	move.b	d0,d4

	move.b	HC1_d(a3),d0		* フラグの入れ換え
	move.b	d5,HC1_d(a3)
	move.b	d0,d5

	move.b	HC2(a3),d0
	move.b	HC2_d(a3),HC2(a3)
	move.b	d0,HC2_d(a3)

	move.b	PV(a3),d0
	move.b	PV_d(a3),PV(a3)
	move.b	d0,PV_d(a3)

	move.w	d6,d0
	move.w	d6_d(a3),d6
	move.w	d0,d6_d(a3)

	addq.w	#1,d7
	andi.w	#$3fff,d7
	bne	rts_common
	PC_page_inc
	rts


CCF:	andi.w	#%11110101_11111111,d6	* HC mode と Nを０に
	bchg.l	#8,d6			* Cyを調べて反転
	beq	1f
	clr.b	d5			* HC を１に。HC には Cyの元の値が入る
	move.b	#1,HC2(a3)
	addq.w	#1,d7
	andi.w	#$3fff,d7
	bne	rts_common
	PC_page_inc
	rts	
1:	move.b	d5,HC2(a3)		* HC を０に。
	addq.w	#1,d7
	andi.w	#$3fff,d7
	bne	rts_common
	PC_page_inc
	rts

SCF:	andi.w	#%11110101_11111111,d6	* HC mode と Nを０に
	ori.w	#%00000001_00000000,d6	* Cy を１に
	move.b	d5,HC2(a3)		* HC を０に。
	addq.w	#1,d7
	andi.w	#$3fff,d7
	bne	rts_common
	PC_page_inc
	rts

CPL:	ori.w	#%00001010_00000000,d6	* N,HC mode を１に
	move.b	d5,HC2(a3)		* HC を１に。（HC mode が 1だから１になる）
	eori.b	#$ff,d4			* Aレジスタを反転
	addq.w	#1,d7
	andi.w	#$3fff,d7
	bne	rts_common
	PC_page_inc
	rts

DI:	move.b	#0,interrupt_enable
	addq.w	#1,d7
	andi.w	#$3fff,d7
	bne	rts_common
	PC_page_inc
	rts

EI:	move.b	#2,interrupt_enable	* EIは１命令おいて実行されるので、2をセットして、最低1命令無視されるようにする
	;move.w	#1,cpu_yield		* DI中に割り込みがあった場合に割り込みをかけられるよう、yieldをセットする → 負荷高いので削除
	addq.w	#1,d7
	andi.w	#$3fff,d7
	bne	1f
	PC_page_inc
1:	rts

RST_00H:
	move.l	d7,d1
	lsr.l	#2,d7			* d7 = pp00????_????????
	andi.w	#%11000000_00000000,d7	* d7 = pp000000_00000000
	or.w	d7,d1
	addq.w	#1,d1			* d1 = PC (R800) = next instruction
	subq.w	#2,sp_(a3)		* PUSH	
	move.w	sp_(a3),d0
	jsr	ms_write_mem_16
	move.w	#$0000,d7
	PC_page_set
	rts
RST_08H:
	move.l	d7,d1
	lsr.l	#2,d7			* d7 = pp00????_????????
	andi.w	#%11000000_00000000,d7	* d7 = pp000000_00000000
	or.w	d7,d1
	addq.w	#1,d1			* d1 = PC (R800) = next instruction
	subq.w	#2,sp_(a3)		* PUSH	
	move.w	sp_(a3),d0
	jsr	ms_write_mem_16
	move.w	#$0008,d7
	PC_page_set
	rts
RST_10H:
	move.l	d7,d1
	lsr.l	#2,d7			* d7 = pp00????_????????
	andi.w	#%11000000_00000000,d7	* d7 = pp000000_00000000
	or.w	d7,d1
	addq.w	#1,d1			* d1 = PC (R800) = next instruction
	subq.w	#2,sp_(a3)		* PUSH	
	move.w	sp_(a3),d0
	jsr	ms_write_mem_16
	move.w	#$0010,d7
	PC_page_set
	rts
RST_18H:
	move.l	d7,d1
	lsr.l	#2,d7			* d7 = pp00????_????????
	andi.w	#%11000000_00000000,d7	* d7 = pp000000_00000000
	or.w	d7,d1
	addq.w	#1,d1			* d1 = PC (R800) = next instruction
	subq.w	#2,sp_(a3)		* PUSH	
	move.w	sp_(a3),d0
	jsr	ms_write_mem_16
	move.w	#$0018,d7
	PC_page_set
	rts
RST_20H:
	move.l	d7,d1
	lsr.l	#2,d7			* d7 = pp00????_????????
	andi.w	#%11000000_00000000,d7	* d7 = pp000000_00000000
	or.w	d7,d1
	addq.w	#1,d1			* d1 = PC (R800) = next instruction
	subq.w	#2,sp_(a3)		* PUSH	
	move.w	sp_(a3),d0
	jsr	ms_write_mem_16
	move.w	#$0020,d7
	PC_page_set
	rts
RST_28H:
	move.l	d7,d1
	lsr.l	#2,d7			* d7 = pp00????_????????
	andi.w	#%11000000_00000000,d7	* d7 = pp000000_00000000
	or.w	d7,d1
	addq.w	#1,d1			* d1 = PC (R800) = next instruction
	subq.w	#2,sp_(a3)		* PUSH	
	move.w	sp_(a3),d0
	jsr	ms_write_mem_16
	move.w	#$0028,d7
	PC_page_set
	rts
RST_30H:
	move.l	d7,d1
	lsr.l	#2,d7			* d7 = pp00????_????????
	andi.w	#%11000000_00000000,d7	* d7 = pp000000_00000000
	or.w	d7,d1
	addq.w	#1,d1			* d1 = PC (R800) = next instruction
	subq.w	#2,sp_(a3)		* PUSH	
	move.w	sp_(a3),d0
	jsr	ms_write_mem_16
	move.w	#$0030,d7
	PC_page_set
	rts
RST_38H:
	move.l	d7,d1
	lsr.l	#2,d7			* d7 = pp00????_????????
	andi.w	#%11000000_00000000,d7	* d7 = pp000000_00000000
	or.w	d7,d1
	addq.w	#1,d1			* d1 = PC (R800) = next instruction
	subq.w	#2,sp_(a3)		* PUSH	
	move.w	sp_(a3),d0
	jsr	ms_write_mem_16
	move.w	#$0038,d7
	PC_page_set
	rts


*	------ ＲＬＣＡ ------
RLCA:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%11110100_11111111,d6	* Ｎ,Ｃ HC modeをクリア
	move.b	d5,HC2(a3)		* HC をクリア
	rol.b	#1,d4
	bcc	rts_common
	ori.w	#%00000001_00000000,d6	* キャリーフラグをセット
	rts

*	------ ＲＲＣＡ ------
RRCA:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	andi.w	#%11110100_11111111,d6	* Ｎ,Ｃ HC modeをクリア
	move.b	d5,HC2(a3)		* HC をクリア
	ror.b	#1,d4
	bcc	rts_common
	ori.w	#%00000001_00000000,d6	* キャリーフラグをセット
	rts

*	------ ＲＬＡ ------
RLA:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	btst.l	#8,d6			* ＣＹの状態をチェック
	beq	RLA_2			* CY が０の時
	andi.w	#%11110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	add.b	d4,d4
	bcc	@f
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
@@:
	ori.w	#%00000000_00000001,d4	* 最下位ビットをセット
	rts

RLA_2:	andi.w	#%11110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	add.b	d4,d4
	bcc	rts_common
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
	rts


*	------ ＲＲＡ ------
RRA:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc
9:	btst.l	#8,d6			* ＣＹの状態をチェック
	beq	RRA_2			* CY が０の時
	andi.w	#%11110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	lsr.b	#1,d4
	bcc	@f
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
@@:	ori.w	#%00000000_10000000,d4	* 最上位ビットをセット
	rts

RRA_2:	andi.w	#%11110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	lsr.b	#1,d4
	bcc	rts_common
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
	rts

*	------ ＨＡＬＴ ------
HALT:
	pea.l	halt_msg
	DOS	__PRINT
	lea.l	4(sp),sp
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc

9:	cmpi.b	#0,interrupt_enable
	beq	9b		* DIなら割り込まない(永遠に出られない？ NMIなら出られるようにすべき？)
	; あらためて割り込み要求端子の値(ms_cpu_int)を見て割り込み要求があるかどうかを見る
	cmpi.b	#0,ms_cpu_int
	beq	9b
	bsr	INT		* 割り込みがかかったので割り込み処理を実施
	rts

halt_msg:
	.dc.b	'HALT',0x0d,0x0a,0x00,0x00

	.even

*************************** ここまで

*
*	＄ＣＢライン命令
*
*	  c    b   
*	%1100_1011_cccc_crrr
*
*		ccccc ・ 00000	RLC
*			 00001	RRC
*			 00010	RL
*			 00011	RR
*			 00100	SLA
*			 00101	SRA
*			 00110	SLI		* undifined instruction
*			 00111	SRL
*
*			 01000
*			   |	BIT 0〜7
*			 01111
*
*			 10000
*			   |	RES 0〜7
*			 10111
*
*			 11000
*			   |	SET 0〜7
*			 11111
*
*		rrr ・・ 000 - b
*			 001 - c
*			 010 - d
*			 011 - e
*			 100 - h
*			 101 - l
*			 110 - (hl)
*			 111 - a
*
*
CB:	move.b	1(a4,d7.w),d0		* 第二オペコードを読み込む
	addq.w	#2,d7
	btst.l	#14,d7
	beq	@f			* PC がページ境界をまたいだか？
	PC_page_inc			* またいだ時
	andi.w	#$3fff,d7
	beq	@f
	move.b	(a4),d0			* 読み直し
@@:	bclr.l	#7,d0			* ００Ｈ〜７ＦＨの命令かどうか
	beq	case2			* そうなら case2へ
case1:
	bclr.l	#6,d0
	beq	RES			* ＲＥＳ命令

*	------ ＳＥＴ ------
SET:	move.b	d0,d1
	andi.w	#%00000000_00111000,d0		* BIT_n_? の n を d0にロード
	lsr.w	#3,d0

	andi.w	#%00000000_00000111,d1		* レジスタの値をロード
	addq.w	#2,d1
	bclr.l	#3,d1
	bne	SET_aorhl			* SET A, SET (HL)の時
	bset.b	d0,a(a3,d1.w)			* レジスタの nビット目をセット
	rts

SET_aorhl:
	tst.w	d1
	beq	set_lhll
	bset.l	d0,d4				* A レジスタの nビット目をセット
	rts
set_lhll
	move.w	d0,-(sp)
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	move.w	(sp)+,d1
	bset.l	d1,d0				* (HL)の nビット目をセット
	move.b	d0,d1
	move.w	hl(a3),d0
	jsr	ms_write_mem_8		
	rts

*	------ ＲＥＳ ------
RES:	move.b	d0,d1
	andi.w	#%00000000_00111000,d0		* BIT_n_? の n を d0にロード
	lsr.w	#3,d0

	andi.w	#%00000000_00000111,d1		* レジスタの値をロード
	addq.w	#2,d1
	bclr.l	#3,d1
	bne	RES_aorhl			* RES A, RES (HL)の時
	bclr.b	d0,a(a3,d1.w)			* レジスタの nビット目をクリア
	rts
RES_aorhl:
	tst.w	d1
	beq	RES_lhll
	bclr.l	d0,d4				* A レジスタの nビット目をクリア
	rts
RES_lhll
	move.w	d0,-(sp)
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	move.w	(sp)+,d1
	bclr.l	d1,d0				* (HL)の nビット目をセット
	move.b	d0,d1
	move.w	hl(a3),d0
	jsr	ms_write_mem_8		
	rts


case2:
	bclr.l	#6,d0
	beq	rot_sft			* ローテート、シフト関係の命令

*	------ ＢＩＴ ------
BIT:	move.w	d0,d1
	andi.w	#%00000000_00111000,d0	* BIT_n_? の n を d0にロード
	lsr.w	#3,d0

	andi.w	#%00000000_00000111,d1
	addq.w	#2,d1
	bclr.l	#3,d1
	bne	BIT_aorhl		* BIT A, BIT (HL)の時

	andi.w	#%01110101_00000000,d6	* N, HC modeを０に。 ＳＺを０に
	clr.b	d5			* HC を１に
	move.b	#1,HC2(a3)
	btst.b	d0,a(a3,d1.w)		* レジスタの nビット目をテスト
	beq	rts_common
	move.b	#1,d6
	rts

BIT_aorhl:
	tst.w	d1
	beq	BIT_lHLl
	andi.w	#%01110101_00000000,d6	* N, HC modeを０に。 ＳＺを０に
	clr.b	d5			* HC を１に
	move.b	#1,HC2(a3)
	btst.l	d0,d4			* レジスタの nビット目をテスト
	beq	rts_common
	move.b	#1,d6
	rts
BIT_lHLl:
	andi.w	#%01110101_00000000,d6	* N, HC modeを０に。 ＳＺを０に
	clr.b	d5			* HC を１に
	move.b	#1,HC2(a3)
	move.w	d0,-(sp)
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	move.w	(sp)+,d1
	btst.l	d1,d0			* (HL)の nビット目をテスト
	beq	rts_common
	move.b	#1,d6
	rts


*	------ ローテート,シフト ------
rot_sft:
	andi.w	#%0000_0000_0011_1111,d0	* 命令にジャンプ
	move.w	Rot_Sft_JPT(pc,d0.w*2),d0
	jmp	Rot_Sft_JPT(pc,d0.w)

Rot_Sft_JPT:
	.dc.w	RLC_B-Rot_Sft_JPT	* $00
	.dc.w	RLC_C-Rot_Sft_JPT
	.dc.w	RLC_D-Rot_Sft_JPT
	.dc.w	RLC_E-Rot_Sft_JPT
	.dc.w	RLC_H-Rot_Sft_JPT
	.dc.w	RLC_L-Rot_Sft_JPT
	.dc.w	RLC_lHLl-Rot_Sft_JPT
	.dc.w	RLC_A-Rot_Sft_JPT
	.dc.w	RRC_B-Rot_Sft_JPT	* $08
	.dc.w	RRC_C-Rot_Sft_JPT
	.dc.w	RRC_D-Rot_Sft_JPT
	.dc.w	RRC_E-Rot_Sft_JPT
	.dc.w	RRC_H-Rot_Sft_JPT
	.dc.w	RRC_L-Rot_Sft_JPT
	.dc.w	RRC_lHLl-Rot_Sft_JPT
	.dc.w	RRC_A-Rot_Sft_JPT	* $0f

	.dc.w	RL_B-Rot_Sft_JPT	* $10
	.dc.w	RL_C-Rot_Sft_JPT
	.dc.w	RL_D-Rot_Sft_JPT
	.dc.w	RL_E-Rot_Sft_JPT
	.dc.w	RL_H-Rot_Sft_JPT
	.dc.w	RL_L-Rot_Sft_JPT
	.dc.w	RL_lHLl-Rot_Sft_JPT
	.dc.w	RL_A-Rot_Sft_JPT
	.dc.w	RR_B-Rot_Sft_JPT	* $18
	.dc.w	RR_C-Rot_Sft_JPT
	.dc.w	RR_D-Rot_Sft_JPT
	.dc.w	RR_E-Rot_Sft_JPT
	.dc.w	RR_H-Rot_Sft_JPT
	.dc.w	RR_L-Rot_Sft_JPT
	.dc.w	RR_lHLl-Rot_Sft_JPT
	.dc.w	RR_A-Rot_Sft_JPT	* $1f

	.dc.w	SLA_B-Rot_Sft_JPT	* $20
	.dc.w	SLA_C-Rot_Sft_JPT
	.dc.w	SLA_D-Rot_Sft_JPT
	.dc.w	SLA_E-Rot_Sft_JPT
	.dc.w	SLA_H-Rot_Sft_JPT
	.dc.w	SLA_L-Rot_Sft_JPT
	.dc.w	SLA_lHLl-Rot_Sft_JPT
	.dc.w	SLA_A-Rot_Sft_JPT
	.dc.w	SRA_B-Rot_Sft_JPT	* $28
	.dc.w	SRA_C-Rot_Sft_JPT
	.dc.w	SRA_D-Rot_Sft_JPT
	.dc.w	SRA_E-Rot_Sft_JPT
	.dc.w	SRA_H-Rot_Sft_JPT
	.dc.w	SRA_L-Rot_Sft_JPT
	.dc.w	SRA_lHLl-Rot_Sft_JPT
	.dc.w	SRA_A-Rot_Sft_JPT	* $2f

	.dc.w	SLI_B-Rot_Sft_JPT	* $30	SLI 未定義命令(Shift Left ?????)
	.dc.w	SLI_C-Rot_Sft_JPT	*	ビット０に１が入る左シフト
	.dc.w	SLI_D-Rot_Sft_JPT
	.dc.w	SLI_E-Rot_Sft_JPT
	.dc.w	SLI_H-Rot_Sft_JPT
	.dc.w	SLI_L-Rot_Sft_JPT
	.dc.w	SLI_lHLl-Rot_Sft_JPT
	.dc.w	SLI_A-Rot_Sft_JPT
	.dc.w	SRL_B-Rot_Sft_JPT	* $38
	.dc.w	SRL_C-Rot_Sft_JPT
	.dc.w	SRL_D-Rot_Sft_JPT
	.dc.w	SRL_E-Rot_Sft_JPT
	.dc.w	SRL_H-Rot_Sft_JPT
	.dc.w	SRL_L-Rot_Sft_JPT
	.dc.w	SRL_lHLl-Rot_Sft_JPT
	.dc.w	SRL_A-Rot_Sft_JPT	* $3f

*	------ ＲＬＣ ------
RLC_A:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ HC modeをクリア
	move.b	d5,HC2(a3)		* HC をクリア
	rol.b	#1,d4
	bcc	@f
	ori.w	#%00000001_00000000,d6	* キャリーフラグをセット
@@:	move.b	d4,d6			* ＳＺをセット
	move.b	d4,PV(a3)		* ＰＶをセット
	rts

RLC_B:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ HC modeをクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	b(a3),d0
	rol.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* キャリーフラグをセット
@@:	move.b	d0,b(a3)
	move.b	d0,d6			* ＳＺをセット
	move.b	d0,PV(a3)		* ＰＶをセット
	rts

RLC_C:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ HC modeをクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	c(a3),d0
	rol.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* キャリーフラグをセット
@@:
	move.b	d0,c(a3)
	move.b	d0,d6			* ＳＺをセット
	move.b	d0,PV(a3)		* ＰＶをセット
	rts

RLC_D:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ HC modeをクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	d(a3),d0
	rol.b	#1,d0
	bcc	NC_RLC_D
	ori.w	#%00000001_00000000,d6	* キャリーフラグをセット
NC_RLC_D:
	move.b	d0,d(a3)
	move.b	d0,d6			* ＳＺをセット
	move.b	d0,PV(a3)		* ＰＶをセット
	rts

RLC_E:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ HC modeをクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	e(a3),d0
	rol.b	#1,d0
	bcc	NC_RLC_E
	ori.w	#%00000001_00000000,d6	* キャリーフラグをセット
NC_RLC_E:
	move.b	d0,e(a3)
	move.b	d0,d6			* ＳＺをセット
	move.b	d0,PV(a3)		* ＰＶをセット
	rts

RLC_H:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ HC modeをクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	h(a3),d0
	rol.b	#1,d0
	bcc	NC_RLC_H
	ori.w	#%00000001_00000000,d6	* キャリーフラグをセット
NC_RLC_H:
	move.b	d0,h(a3)
	move.b	d0,d6			* ＳＺをセット
	move.b	d0,PV(a3)		* ＰＶをセット
	rts

RLC_L:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ HC modeをクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	l(a3),d0
	rol.b	#1,d0
	bcc	NC_RLC_L
	ori.w	#%00000001_00000000,d6	* キャリーフラグをセット
NC_RLC_L:
	move.b	d0,l(a3)
	move.b	d0,d6			* ＳＺをセット
	move.b	d0,PV(a3)		* ＰＶをセット
	rts

RLC_lHLl:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ HC modeをクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	rol.b	#1,d0
	bcc	NC_RLC_hl
	ori.w	#%00000001_00000000,d6	* キャリーフラグをセット
NC_RLC_hl:
	move.b	d0,d6			* ＳＺをセット
	move.b	d0,PV(a3)		* ＰＶをセット

	move.b	d0,d1
	move.w	hl(a3),d0
	jsr	ms_write_mem_8
	rts


*	------ ＲＲＣ ------
RRC_A:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ HC modeをクリア
	move.b	d5,HC2(a3)		* HC をクリア
	ror.b	#1,d4
	bcc	@f
	ori.w	#%00000001_00000000,d6	* キャリーフラグをセット
@@:	move.b	d4,d6			* ＳＺをセット
	move.b	d4,PV(a3)		* ＰＶをセット
	rts

RRC_B:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ HC modeをクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	b(a3),d0
	ror.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* キャリーフラグをセット
@@:	move.b	d0,b(a3)
	move.b	d0,d6			* ＳＺをセット
	move.b	d0,PV(a3)		* ＰＶをセット
	rts

RRC_C:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ HC modeをクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	c(a3),d0
	ror.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* キャリーフラグをセット
@@:	move.b	d0,c(a3)
	move.b	d0,d6			* ＳＺをセット
	move.b	d0,PV(a3)		* ＰＶをセット
	rts

RRC_D:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ HC modeをクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	d(a3),d0
	ror.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* キャリーフラグをセット
@@:	move.b	d0,d(a3)
	move.b	d0,d6			* ＳＺをセット
	move.b	d0,PV(a3)		* ＰＶをセット
	rts

RRC_E:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ HC modeをクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	e(a3),d0
	ror.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* キャリーフラグをセット
@@:	move.b	d0,e(a3)
	move.b	d0,d6			* ＳＺをセット
	move.b	d0,PV(a3)		* ＰＶをセット
	rts

RRC_H:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ HC modeをクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	h(a3),d0
	ror.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* キャリーフラグをセット
@@:	move.b	d0,h(a3)
	move.b	d0,d6			* ＳＺをセット
	move.b	d0,PV(a3)		* ＰＶをセット
	rts

RRC_L:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ HC modeをクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	l(a3),d0
	ror.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* キャリーフラグをセット
@@:	move.b	d0,l(a3)
	move.b	d0,d6			* ＳＺをセット
	move.b	d0,PV(a3)		* ＰＶをセット
	rts

RRC_lHLl:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ HC modeをクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	ror.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* キャリーフラグをセット
@@:	move.b	d0,d6			* ＳＺをセット
	move.b	d0,PV(a3)		* ＰＶをセット

	move.b	d0,d1
	move.w	hl(a3),d0
	jsr	ms_write_mem_8
	rts


*	------ ＲＬ ------
RL_A:	btst.l	#8,d6			* ＣＹの状態をチェック
	beq	SLA_A			* CY が０の時 RLは SLAと同じ動作をする
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	lsl.b	#1,d4
	bcc	NC_RL_A
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
NC_RL_A:
	ori.w	#%00000000_00000001,d4	* 最下位ビットをセット
	move.b	d4,d6
	move.b	d4,PV(a3)
	rts

RL_B:	btst.l	#8,d6			* ＣＹの状態をチェック
	beq	SLA_B			* CY が０の時 RLは SLAと同じ動作をする
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	b(a3),d0
	lsl.b	#1,d0
	bcc	NC_RL_B
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
NC_RL_B:
	ori.w	#%00000000_00000001,d0	* 最下位ビットをセット
	move.b	d0,b(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

RL_C:	btst.l	#8,d6			* ＣＹの状態をチェック
	beq	SLA_C			* CY が０の時 RLは SLAと同じ動作をする
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	c(a3),d0
	lsl.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
@@:
	ori.w	#%00000000_00000001,d0	* 最下位ビットをセット
	move.b	d0,c(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

RL_D:	btst.l	#8,d6			* ＣＹの状態をチェック
	beq	SLA_D			* CY が０の時 RLは SLAと同じ動作をする
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	d(a3),d0
	lsl.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
@@:
	ori.w	#%00000000_00000001,d0	* 最下位ビットをセット
	move.b	d0,d(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

RL_E:	btst.l	#8,d6			* ＣＹの状態をチェック
	beq	SLA_E			* CY が０の時 RLは SLAと同じ動作をする
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	e(a3),d0
	lsl.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
@@:	ori.w	#%00000000_00000001,d0	* 最下位ビットをセット
	move.b	d0,e(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

RL_H:	btst.l	#8,d6			* ＣＹの状態をチェック
	beq	SLA_H			* CY が０の時 RLは SLAと同じ動作をする
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	h(a3),d0
	lsl.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
@@:	ori.w	#%00000000_00000001,d0	* 最下位ビットをセット
	move.b	d0,h(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

RL_L:	btst.l	#8,d6			* ＣＹの状態をチェック
	beq	SLA_L			* CY が０の時 RLは SLAと同じ動作をする
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	l(a3),d0
	lsl.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
@@:	ori.w	#%00000000_00000001,d0	* 最下位ビットをセット
	move.b	d0,l(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

RL_lHLl:
	btst.l	#8,d6			* ＣＹの状態をチェック
	beq	SLA_lHLl		* CY が０の時 RLは SLAと同じ動作をする
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	lsl.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
@@:	ori.w	#%00000000_00000001,d0	* 最下位ビットをセット
	move.b	d0,d6
	move.b	d0,PV(a3)

	move.b	d0,d1
	move.w	hl(a3),d0
	jsr	ms_write_mem_8
	rts

*	------ ＲＲ ------
RR_A:	btst.l	#8,d6			* ＣＹの状態をチェック
	beq	SRL_A			* CY が０の時 RRは SRLと同じ動作をする
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	lsr.b	#1,d4
	bcc	@f
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
@@:	ori.w	#%00000000_10000000,d4	* 最上位ビットをセット
	move.b	d4,d6
	move.b	d4,PV(a3)
	rts

RR_B:	btst.l	#8,d6			* ＣＹの状態をチェック
	beq	SRL_B			* CY が０の時 RRは SRLと同じ動作をする
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	b(a3),d0
	lsr.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
@@:	ori.w	#%00000000_10000000,d0	* 最上位ビットをセット
	move.b	d0,b(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

RR_C:	btst.l	#8,d6			* ＣＹの状態をチェック
	beq	SRL_C			* CY が０の時 RRは SRLと同じ動作をする
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	c(a3),d0
	lsr.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
@@:
	ori.w	#%00000000_10000000,d0	* 最上位ビットをセット
	move.b	d0,c(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

RR_D:	btst.l	#8,d6			* ＣＹの状態をチェック
	beq	SRL_D			* CY が０の時 RRは SRLと同じ動作をする
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	d(a3),d0
	lsr.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
@@:
	ori.w	#%00000000_10000000,d0	* 最上位ビットをセット
	move.b	d0,d(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

RR_E:	btst.l	#8,d6			* ＣＹの状態をチェック
	beq	SRL_E			* CY が０の時 RRは SRLと同じ動作をする
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	e(a3),d0
	lsr.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
@@:
	ori.w	#%00000000_10000000,d0	* 最上位ビットをセット
	move.b	d0,e(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

RR_H:	btst.l	#8,d6			* ＣＹの状態をチェック
	beq	SRL_H			* CY が０の時 RRは SRLと同じ動作をする
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	h(a3),d0
	lsr.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
@@:
	ori.w	#%00000000_10000000,d0	* 最上位ビットをセット
	move.b	d0,h(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

RR_L:	btst.l	#8,d6			* ＣＹの状態をチェック
	beq	SRL_L			* CY が０の時 RRは SRLと同じ動作をする
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	l(a3),d0
	lsr.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
@@:
	ori.w	#%00000000_10000000,d0	* 最上位ビットをセット
	move.b	d0,l(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

RR_lHLl:
	btst.l	#8,d6			* ＣＹの状態をチェック
	beq	SRL_lHLl		* CY が０の時 RRは SRLと同じ動作をする
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	lsr.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
@@:
	ori.w	#%00000000_10000000,d0	* 最上位ビットをセット
	move.b	d0,d6
	move.b	d0,PV(a3)
	move.b	d0,d1
	move.w	hl(a3),d0
	jsr	ms_write_mem_8
	rts


*	------ ＳＬＡ ------
SLA_A:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	add.b	d4,d4
	bcc	@f
	ori.w	#%00000001_00000000,d6	* CY をセット
@@:	move.b	d4,d6
	move.b	d4,PV(a3)
	rts

SLA_B:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	b(a3),d0
	add.b	d0,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* CY をセット
@@:	move.b	d0,b(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

SLA_C:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	c(a3),d0
	add.b	d0,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* CY をセット
@@:	move.b	d0,c(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

SLA_D:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	d(a3),d0
	add.b	d0,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* CY をセット
@@:	move.b	d0,d(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

SLA_E:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	e(a3),d0
	add.b	d0,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* CY をセット
@@:	move.b	d0,e(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

SLA_H:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	h(a3),d0
	add.b	d0,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* CY をセット
@@:	move.b	d0,h(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

SLA_L:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	l(a3),d0
	add.b	d0,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* CY をセット
@@:	move.b	d0,l(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

SLA_lHLl:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	add.b	d0,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
@@:	move.b	d0,d6
	move.b	d0,PV(a3)
	move.b	d0,d1
	move.w	hl(a3),d0
	jsr	ms_write_mem_8
	rts


*	------ ＳＲＡ ------
SRA_A:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	asr.b	#1,d4
	bcc	@f
	ori.w	#%00000001_00000000,d6	* CY をセット
@@:	move.b	d4,d6
	move.b	d4,PV(a3)
	rts

SRA_B:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	b(a3),d0
	asr.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* CY をセット
@@:	move.b	d0,b(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

SRA_C:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	c(a3),d0
	asr.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* CY をセット
@@:	move.b	d0,c(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

SRA_D:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	d(a3),d0
	asr.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* CY をセット
@@:	move.b	d0,d(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

SRA_E:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	e(a3),d0
	asr.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* CY をセット
@@:	move.b	d0,e(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

SRA_H:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	h(a3),d0
	asr.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* CY をセット
@@:	move.b	d0,h(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

SRA_L:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	l(a3),d0
	asr.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* CY をセット
@@:	move.b	d0,l(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

SRA_lHLl:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	asr.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
@@:	move.b	d0,d6
	move.b	d0,PV(a3)
	move.b	d0,d1
	move.w	hl(a3),d0
	jsr	ms_write_mem_8
	rts


*	------ ＳＲＬ ------
SRL_A:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	lsr.b	#1,d4
	bcc	@f
	ori.w	#%00000001_00000000,d6	* CY をセット
@@:	move.b	d4,d6
	move.b	d4,PV(a3)
	rts

SRL_B:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	b(a3),d0
	lsr.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* CY をセット
@@:	move.b	d0,b(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

SRL_C:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	c(a3),d0
	lsr.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* CY をセット
@@:	move.b	d0,c(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

SRL_D:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	d(a3),d0
	lsr.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* CY をセット
@@:	move.b	d0,d(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

SRL_E:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	e(a3),d0
	lsr.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* CY をセット
@@:	move.b	d0,e(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

SRL_H:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	h(a3),d0
	lsr.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* CY をセット
@@:	move.b	d0,h(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

SRL_L:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	l(a3),d0
	lsr.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* CY をセット
@@:	move.b	d0,l(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

SRL_lHLl:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	lsr.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
@@:	move.b	d0,d6
	move.b	d0,PV(a3)
	move.b	d0,d1
	move.w	hl(a3),d0
	jsr	ms_write_mem_8
	rts

*	------ ＳＬＩ ------
SLI_A:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	add.b	d4,d4
	bcc	@f
	ori.w	#%00000001_00000000,d6	* CY をセット
@@:	addq.b	#1,d4			* ビット１をセット
	move.b	d4,d6
	move.b	d4,PV(a3)
	rts

SLI_B:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	b(a3),d0
	add.b	d0,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* CY をセット
@@:	addq.b	#1,d0			* ビット１をセット
	move.b	d0,b(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

SLI_C:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	c(a3),d0
	add.b	d0,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* CY をセット
@@:	addq.b	#1,d0			* ビット１をセット
	move.b	d0,c(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

SLI_D:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	d(a3),d0
	add.b	d0,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* CY をセット
@@:	addq.b	#1,d0			* ビット１をセット
	move.b	d0,d(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

SLI_E:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	e(a3),d0
	add.b	d0,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* CY をセット
@@:	addq.b	#1,d0			* ビット１をセット
	move.b	d0,e(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

SLI_H:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	h(a3),d0
	add.b	d0,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* CY をセット
@@:	addq.b	#1,d0			* ビット１をセット
	move.b	d0,h(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

SLI_L:	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.b	l(a3),d0
	add.b	d0,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* CY をセット
@@:	addq.b	#1,d0			* ビット１をセット
	move.b	d0,l(a3)
	move.b	d0,d6
	move.b	d0,PV(a3)
	rts

SLI_lHLl:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	add.b	d0,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
@@:	addq.b	#1,d0			* ビット１をセット
	move.b	d0,d6
	move.b	d0,PV(a3)
	move.b	d0,d1
	move.w	hl(a3),d0
	jsr	ms_write_mem_8
	rts



*	------ ＲＬＤ,ＲＲＤ ------
RLD_lHLl:
	andi.w	#%01110101_11111111,d6	* Ｎ,HC modeをクリア
	move.b	d5,HC2(a3)		* HC をクリア

	move.w	hl(a3),d0		* d0.w = |00|00| (HL) |
	jsr	ms_read_mem_8
	andi.w	#%00000000_11111111,d0

	lsl.w	#4,d0			* d0.w = |00| (HL) |00|
	move.b	d4,d1
	andi.w 	#%00000000_00001111,d1
	or.b	d0,d1			* d1.w = |00| (HL) |Al|

	andi.b	#%11110000,d4
	lsr.w	#8,d0
	add.b	d0,d4			* d4.b = |Ah| (H|

	move.w	hl(a3),d0
	jsr	ms_write_mem_8

	move.b	d4,d6			* SZ をセット
	move.b	d4,PV(a3)
	rts

RRD_lHLl:
	andi.w	#%01110101_11111111,d6	* Ｎ,HC modeをクリア
	move.b	d5,HC2(a3)		* HC をクリア

	move.w	hl(a3),d0		* d0.w = |?????| (HL) |
	jsr	ms_read_mem_8

	move.b	d4,d1
	lsl.w	#8,d1			* d1.w = |  A  |000000|
	move.b	d0,d1			* d1.w = |  A  | (HL) |

	lsr.w	#4,d1			* d1.w = |00|  A   |(H|
	andi.w 	#%00000000_00001111,d0	* d0.w = |000000000|L)| 
	andi.b	#%11110000,d4		* d4.b =       | Ah|00|
	or.b	d0,d4			* d4.b =       | Ah|L)|

	move.w	hl(a3),d0
	jsr	ms_write_mem_8

	move.b	d4,d6			* SZ をセット
	move.b	d4,PV(a3)
	rts

********************************************************************
*
*	＄ＥＤライン命令
*
********************************************************************
ED:	clr.w	d0
	move.b	1(a4,d7.w),d0		* 第二オペコードを読み込む
	addq.w	#2,d7
	btst.l	#14,d7
	beq	@f			* PC がページ境界をまたいだか？
	PC_page_inc			* またいだ時
	andi.w	#$3fff,d7
	beq	@f
	move.b	(a4),d0			* 読み直し
@@:	subi.w	#$40,d0
	bcs	other				* ＄３ｆ以下の時は特殊命令へ
	movea.l	ED_JPT(pc,d0.w*4),a0
	jmp	(a0)

ED_JPT:	.dc.l	IN_B_c			* $40
	.dc.l	OUT_c_B
	.dc.l	SBC_HL_BC
	.dc.l	LD_lnnl_BC
	.dc.l	NEG
	.dc.l	RETN
	.dc.l	IM_0
	.dc.l	LD_I_A
	.dc.l	IN_C_c			* $48
	.dc.l	OUT_c_C
	.dc.l	ADC_HL_BC
	.dc.l	LD_BC_lnnl
	.dc.l	none_ED
	.dc.l	RETI
	.dc.l	none_ED
	.dc.l	LD_R_A			* $4f

	.dc.l	IN_D_c			* $50
	.dc.l	OUT_c_D
	.dc.l	SBC_HL_DE
	.dc.l	LD_lnnl_DE
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	IM_1
	.dc.l	LD_A_I
	.dc.l	IN_E_c			* $58
	.dc.l	OUT_c_E
	.dc.l	ADC_HL_DE
	.dc.l	LD_DE_lnnl
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	IM_2
	.dc.l	LD_A_R			* $5f

	.dc.l	IN_H_c			* $60
	.dc.l	OUT_c_H
	.dc.l	SBC_HL_HL
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	RRD_lHLl
	.dc.l	IN_L_c			* $68
	.dc.l	OUT_c_L
	.dc.l	ADC_HL_HL
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	RLD_lHLl		* $6f

	.dc.l	IN_F_c			* $70
	.dc.l	none_ED
	.dc.l	SBC_HL_SP
	.dc.l	LD_lnnl_SP
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	IN_A_c			* $78
	.dc.l	OUT_c_A
	.dc.l	ADC_HL_SP
	.dc.l	LD_SP_lnnl
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED			* $7f

	.dc.l	none_ED			* $80
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED			* $88
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED			* $8f

	.dc.l	none_ED			* $90
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED			* $98
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED			* $9f

	.dc.l	LDI			* $a0
	.dc.l	CPI
	.dc.l	INI
	.dc.l	OUTI
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	LDD			* $a8
	.dc.l	CPD
	.dc.l	IND
	.dc.l	OUTD
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED			* $af

	.dc.l	LDIR			* $b0
	.dc.l	CPIR
	.dc.l	INIR
	.dc.l	OTIR
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	LDDR			* $b8
	.dc.l	CPDR
	.dc.l	INDR
	.dc.l	OTDR
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED			* $bf

	.dc.l	none_ED			* $c0
	.dc.l	MULB_A_B
	.dc.l	none_ED
	.dc.l	MULW_HL_BC
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED			* $c8
	.dc.l	MULB_A_C
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED			* $cf

	.dc.l	none_ED			* $d0
	.dc.l	MULB_A_D
	.dc.l	none_ED
	.dc.l	MULW_HL_DE
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED			* $d8
	.dc.l	MULB_A_E
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED			* $df

	.dc.l	none_ED			* $e0
	.dc.l	MULB_A_H
	.dc.l	none_ED
	.dc.l	MULW_HL_HL
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED			* $e8
	.dc.l	MULB_A_L
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED			* $ef

	.dc.l	none_ED			* $f0
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	MULW_HL_SP
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED			* $f8
	.dc.l	MULB_A_A
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED			* $ff

none_ED:					* おかしな命令を実行しました
	move.w	d0,d1
	lsr.w	#4,d0
	lea.l	HEX,a0
	move.b	(a0,d0.w),number_ed+0
	andi.w	#$0f,d1
	move.b	(a0,d1.w),number_ed+1

	pea.l	errms_ed
	DOS	__PRINT
	lea.l	4(sp),sp
	move.b	#$ff,d0
	rts

errms_ed:
	.dc.b	'おかしな命令を実行しました。0xed,0x'
number_ed:
	.dc.b	'00'
	.dc.b	0x0d,0x0a,0x00

	.even

*
*	６８０ｘ０ネイティブルーチンの呼びだし
*
*
other:					* ＭＳ用に拡張した命令
*	AF レジスタをセット

	move.w	d6,-(sp)
	move.b	PV(a3),d2
	ori.w	#%00000100_00000000,d6	* P/V フラグをセット
	move.w	#8-1,d1
@@:	lsr.b	#1,d2
	bcc	1f
	eori.w	#%00000100_00000000,d6	* P/V フラグを反転
1:	dbra	d1,@b
	andi.w	#%10101111_11111111,d6	* SZH フラグをリセット
	move.w	d6,d2			* ハーフキャリーフラグを調べる
	andi.w	#%00001000_00000000,d2	* HC mode を調べる
	rol.w	#5,d2
	move.b	HC2(a3),d1		
	andi.w	#$000f,d5		* HC1 HC2 を４ビットのみ有効にする
	andi.w	#$000f,d1
	add.w	d2,d1
	cmp.w	d1,d5			* HC1-(HC2 + HC mode)
	bcc	1f
	ori.w	#%00010000_00000000,d6	* H フラグをセット
1:	bclr.l	#15,d6			* SZ mode をテスト
	bne	1f
	tst.b	d6
	bmi	2f
	bne	3f
	ori.w	#%01000000_00000000,d6	* Z フラグをセット
	bra	3f
2:	ori.w	#%10000000_00000000,d6	* S フラグをセット
	bra	3f
1:	ori.w	#%11000000_00000000,d6
3:	move.b	d4,a(a3)		* A レジスタをロード
	move.w	d6,d1
	lsr.w	#8,d1			* フラグのロード
	andi.b	#%11010111,d1		* フラグと関係無い部分の削除
	move.b	f(a3),d2
	andi.b	#%00101000,d2		* フラグと関係無い部分のロード
	or.b	d2,d1
	move.b	d1,f(a3)

	add.w	#$20,d0
	bpl	CALL68

JP68:	add.w	#$20,d0
	lsl.w	#8,d0
	move.b	0(a4,d7.w),d0		* d0 = ルーチン番号
	addq.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	@f
	PC_page_inc
@@:
	lsl.w	#2,d1			* d0 = d0 * 4
	movea.l	native_jpt_add,a1
	move.l	0(a1,d0.w),a1

	movem.l	d4-d6/a3-a4,-(sp)
	jsr	(a1)
	movem.l	(sp)+,d4-d6/a3-a4

	move.w	d0,d7			* d0.w に戻り先の番地が入っている
	PC_page_set
	bra	next_jp_call_68

CALL68:	add.w	#$20,d0
	move.b	d0,-(sp)
	move.b	(sp)+,d0
	move.b	0(a4,d7.w),d0		* d0 = ルーチン番号
	addq.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	@f
	PC_page_inc
@@:
	lsl.w	#2,d0			* d0 = d0 * 4
	lea.l	native_jpt_add,a1
	move.l	0(a1,d0.w),a1

	movem.l	d4-d6/a3-a4,-(sp)
	jsr	(a1)
	movem.l	(sp)+,d4-d6/a3-a4

*
*	フラグのセット
*
next_jp_call_68:
	move.b	a(a3),d4		* Aレジスタをセット
	move.b	f(a3),d0		* フラグのロード
	clr.b	PV(a3)
	btst.l	#2,d0			* P/V フラグを調べる
	bne	@f
	move.b	#1,PV(a3)		* 奇数にする

@@:	move.b	d0,d6
	lsl.w	#8,d6			* フラグのロード
	andi.w	#%00000011_00000000,d6	* N,Cのみ有効に。SZ, HC mode を０に
	clr.b	d5			* HC1
	clr.b	HC2(a3)

	btst.l	#4,d0			* HC フラグを調べる
	beq	@f
	move.b	#1,HC2(a3)
@@:	andi.b	#%11000000,d0
	beq	1f			* 全部立っていなければプラス
	bpl	rts_common			* S フラグが立っていなければゼロ
	cmpi.b	#%11000000,d0		* どっちも立ってる？
	beq	@f
	move.b	#-1,d6
	rts

@@:	ori.w	#%10000000_00000000,d6	* SZ mode をセット
	rts

1:	move.b	#1,d6
	rts
	

*	------ ＩＭ ------
IM_0:	move.b	#0,interrupt_mode
	rts

IM_1:	move.b	#1,interrupt_mode
	rts

IM_2:	move.b	#2,interrupt_mode
	rts

*	------ ＬＤ ＸＸ,(nn) ------
LD_BC_lnnl:
	move.b	1(a4,d7.w),d0		* nn の上位８ビットを読む 
	lsl.w	#8,d0
	move.b	0(a4,d7.w),d0		* nn の下位８ビットを読む 
	addq.w	#2,d7
	btst.l	#14,d7
	bne	1f
	jsr	ms_read_mem_16
	move.w	d0,bc(a3)
	rts
1:	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	bne	2f
	jsr	ms_read_mem_16		* d7 = 0 の時
	move.w	d0,bc(a3)
	rts
2:	move.b	d0,d2			* d7 = 1 の時
	move.b	(a4),d0			* nn の上位８ビットを読む
	lsl.w	#8,d0
	move.b	d2,d0
	jsr	ms_read_mem_16
	move.w	d0,bc(a3)
	rts

LD_DE_lnnl:
	move.b	1(a4,d7.w),d0		* nn の上位８ビットを読む 
	lsl.w	#8,d0
	move.b	0(a4,d7.w),d0		* nn の下位８ビットを読む 
	addq.w	#2,d7
	btst.l	#14,d7
	bne	1f
	jsr	ms_read_mem_16
	move.w	d0,de(a3)
	rts
1:	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	bne	2f
	jsr	ms_read_mem_16
	move.w	d0,de(a3)
	rts
2:	move.b	d0,d2			* d7 = 1 の時
	move.b	(a4),d0			* nn の上位８ビットを読む
	lsl.w	#8,d0
	move.b	d2,d0
	jsr	ms_read_mem_16
	move.w	d0,de(a3)
	rts

LD_SP_lnnl:
	move.b	1(a4,d7.w),d0		* nn の上位８ビットを読む 
	lsl.w	#8,d0
	move.b	0(a4,d7.w),d0		* nn の下位８ビットを読む 
	addq.w	#2,d7
	btst.l	#14,d7
	bne	1f
	jsr	ms_read_mem_16
	move.w	d0,sp_(a3)
	rts
1:	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	bne	2f
	jsr	ms_read_mem_16
	move.w	d0,sp_(a3)
	rts
2:	move.b	d0,d2			* d7 = 1 の時
	move.b	(a4),d0			* nn の上位８ビットを読む
	lsl.w	#8,d0
	move.b	d2,d0
	jsr	ms_read_mem_16
	move.w	d0,sp_(a3)
	rts

*	------ ＬＤ (nn),ＸＸ ------
LD_lnnl_BC:
	move.w	bc(a3),d1
	move.b	1(a4,d7.w),d0		* nn の上位８ビットを読む 
	lsl.w	#8,d0
	move.b	0(a4,d7.w),d0		* nn の下位８ビットを読む 
	addq.w	#2,d7
	btst.l	#14,d7
	bne	@f
	jsr	ms_write_mem_16
	rts
@@:	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	bne	@f
	jsr	ms_write_mem_16
	rts
@@:	move.b	d0,d2			* d7 = 1 の時
	move.b	(a4),d0			* nn の上位８ビットを読む
	lsl.w	#8,d0
	move.b	d2,d0
	jsr	ms_write_mem_16
	rts

LD_lnnl_DE:
	move.w	de(a3),d1
	move.b	1(a4,d7.w),d0		* nn の上位８ビットを読む 
	lsl.w	#8,d0
	move.b	0(a4,d7.w),d0		* nn の下位８ビットを読む 
	addq.w	#2,d7
	btst.l	#14,d7
	bne	@f
	jsr	ms_write_mem_16
	rts
@@:	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	bne	@f
	jsr	ms_write_mem_16
	rts
@@:	move.b	d0,d2			* d7 = 1 の時
	move.b	(a4),d0			* nn の上位８ビットを読む
	lsl.w	#8,d0
	move.b	d2,d0
	jsr	ms_write_mem_16
	rts

LD_lnnl_SP:
	move.w	sp_(a3),d1
	move.b	1(a4,d7.w),d0		* nn の上位８ビットを読む 
	lsl.w	#8,d0
	move.b	0(a4,d7.w),d0		* nn の下位８ビットを読む 
	addq.w	#2,d7
	btst.l	#14,d7
	bne	@f
	jsr	ms_write_mem_16
	rts
@@:	PC_page_inc			* 命令がページ境界をまたぐ時
	andi.w	#$3fff,d7
	bne	@f
	jsr	ms_write_mem_16		* d7 = 0 の時
	rts
@@:	move.b	d0,d2			* d7 = 1 の時
	move.b	(a4),d0			* nn の上位８ビットを読む
	lsl.w	#8,d0
	move.b	d2,d0
	jsr	ms_write_mem_16
	rts

***************************** フラグの動きが正しいかわからない *********************
*	------ ＡＤＣ ------
ADC_HL_BC:
	sub.w	d0,d0			* C,X ビットを０に
	move.b	#1,PV(a3)		* PV をクリア
	btst.l	#8,d6			* Cy を調べる
	beq	NC_adchlbc
	subq.w	#1,d0			* X ビットを１に
NC_adchlbc:
	move.w	hl(a3),d0
	move.w	bc(a3),d1
	addx.w	d1,d0

F_set_adchl:
	bcs	C_adchl
	bvc	1f
	clr.b	PV(a3)
1:	andi.w	#%01111100_11111111,d6	* Ｎ,Ｃ を０に
	bra	next_adchl

C_adchl:
	bvc	1f
	clr.b	PV(a3)
1:	andi.w	#%01111101_11111111,d6	* Ｎ を０に
	ori.w	#%00000001_00000000,d6	* Ｃ を１に

next_adchl:
	move.w	d0,hl(a3)
	tst.w	d0
	bmi	minus_adchl
	beq	zero_adchl
	move.b	#1,d6			* プラス
	rts
zero_adchl:
	clr.b	d6			* ゼロ
	rts
minus_adchl:
	move.b	#-1,d6			* マイナス
	rts

ADC_HL_DE:
	sub.w	d0,d0			* C,X ビットを０に
	move.b	#1,PV(a3)		* PV をクリア
	btst.l	#8,d6			* Cy を調べる
	beq	NC_adchlde
	subq.w	#1,d0			* X ビットを１に
NC_adchlde:
	move.w	hl(a3),d0
	move.w	de(a3),d1
	addx.w	d1,d0
	bra	F_set_adchl

ADC_HL_HL:
	sub.w	d0,d0			* C,X ビットを０に
	move.b	#1,PV(a3)		* PV をクリア
	btst.l	#8,d6			* Cy を調べる
	beq	NC_adchlhl
	subq.w	#1,d0			* X ビットを１に
NC_adchlhl:
	move.w	hl(a3),d0
	addx.w	d0,d0
	bra	F_set_adchl

ADC_HL_SP:
	sub.w	d0,d0			* C,X ビットを０に
	move.b	#1,PV(a3)		* PV をクリア
	btst.l	#8,d6			* Cy を調べる
	beq	NC_adchlsp
	subq.w	#1,d0			* X ビットを１に
NC_adchlsp:
	move.w	hl(a3),d0
	move.w	sp_(a3),d1
	addx.w	d1,d0
	bra	F_set_adchl

*	------ ＳＢＣ ------
SBC_HL_BC:
	sub.w	d0,d0			* C,X ビットを０に
	move.b	#1,PV(a3)		* PV をクリア
	btst.l	#8,d6			* Cy を調べる
	beq	@f			* Cyが０のとき
	subq.w	#1,d0			* X ビットを１に
@@:	move.w	hl(a3),d0
	move.w	bc(a3),d1
	subx.w	d1,d0

F_set_sbchl:
	bcs	C_sbchl
	bvc	@f
	clr.b	PV(a3)
@@:	andi.w	#%01111110_11111111,d6	* Ｃ を０に
	ori.w	#%00000010_00000000,d6	* Ｎ を１に
	bra	next_sbchl

C_sbchl:
	bvc	@f
	clr.b	PV(a3)
@@:	andi.w	#%01111111_11111111,d6	* SZ mode を０に
	ori.w	#%00000011_00000000,d6	* Ｎ,Ｃ を１に

next_sbchl:
	move.w	d0,hl(a3)
	bmi	minus_sbchl
	beq	zero_sbchl
	move.b	#1,d6			* プラス
	rts
zero_sbchl:
	clr.b	d6			* ゼロ
	rts
minus_sbchl:
	move.b	#-1,d6			* マイナス
	rts

SBC_HL_DE:
	sub.w	d0,d0			* C,X ビットを０に
	move.b	#1,PV(a3)		* PV をクリア
	btst.l	#8,d6			* Cy を調べる
	beq	@f
	subq.w	#1,d0			* X ビットを１に
@@:	move.w	hl(a3),d0
	move.w	de(a3),d1
	subx.w	d1,d0
	bra	F_set_sbchl

SBC_HL_HL:
	sub.w	d0,d0			* C,X ビットを０に
	move.b	#1,PV(a3)		* PV をクリア
	btst.l	#8,d6			* Cy を調べる
	beq	@f
	subq.w	#1,d0			* X ビットを１に
@@:	move.w	hl(a3),d0
	subx.w	d0,d0
	bra	F_set_sbchl

SBC_HL_SP:
	sub.w	d0,d0			* C,X ビットを０に
	move.b	#1,PV(a3)		* PV をクリア
	btst.l	#8,d6			* Cy を調べる
	beq	@f
	subq.w	#1,d0			* X ビットを１に
@@:	move.w	hl(a3),d0
	move.w	sp_(a3),d1
	subx.w	d1,d0
	bra	F_set_sbchl


*	------ ＬＤＩ ------
LDI:	andi.w	#%11110101_11111111,d6	* Ｎ,HC modeをクリア
	move.b	d5,HC2(a3)		* Ｈを０に
	move.b	#0,PV(a3)
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	move.b	d0,d1
	move.w	de(a3),d0
	jsr	ms_write_mem_8
	addq.w	#1,hl(a3)
	addq.w	#1,de(a3)
	subq.w	#1,bc(a3)
	bne	rts_common
	move.b	#1,PV(a3)
	rts

******** もっと高速化したい。 read mem, write mem の展開等 ***********
LDIR:	andi.w	#%11110101_11111111,d6	* Ｎ,HC modeをクリア
	move.b	d5,HC2(a3)		* Ｈを０に
	move.b	#1,PV(a3)
loop_LDIR:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	move.b	d0,d1
	move.w	de(a3),d0
	jsr	ms_write_mem_8

	addq.w	#1,hl(a3)
	addq.w	#1,de(a3)
	subq.w	#1,bc(a3)
	bne	loop_LDIR
	rts

LDD:	andi.w	#%11110101_11111111,d6	* Ｎ,HC modeをクリア
	move.b	d5,HC2(a3)		* Ｈを０に
	move.b	#0,PV(a3)
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	move.b	d0,d1
	move.w	de(a3),d0
	jsr	ms_write_mem_8
	subq.w	#1,hl(a3)
	subq.w	#1,de(a3)
	subq.w	#1,bc(a3)
	bne	rts_common
	move.b	#1,PV(a3)
	rts

******** もっと高速化したい。 read mem, write mem の展開等 ***********
LDDR:	andi.w	#%11110101_11111111,d6	* Ｎ,HC modeをクリア
	move.b	d5,HC2(a3)		* Ｈを０に
	move.b	#1,PV(a3)
loop_LDDR:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	move.b	d0,d1
	move.w	de(a3),d0
	jsr	ms_write_mem_8

	subq.w	#1,hl(a3)
	subq.w	#1,de(a3)
	subq.w	#1,bc(a3)
	bne	loop_LDDR
	rts


*	------ ＣＰＩ , ＣＰＤ ------
CPI:	andi.w	#%01110111_11111111,d6	* HC modeをクリア
	ori.w	#%00000010_00000000,d6	* Ｎ をセット
	clr.b	PV(a3)			* PV をセット		
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	d0,HC2(a3)		* 引く数を HC2に
	addq.w	#1,hl(a3)
	subq.w	#1,bc(a3)
	bne	@f
	move.b	#1,PV(a3)		* PV をクリア
@@:
	move.b	d4,d6
	sub.b	d0,d6			* 比較 かつ 結果を SZ にセット
	rts

CPIR:	andi.w	#%01110111_11111111,d6	* HC modeをクリア
	ori.w	#%00000010_00000000,d6	* Ｎ をセット
	clr.b	PV(a3)		* PV をセット		
loop_CPIR:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	addq.w	#1,hl(a3)
	subq.w	#1,bc(a3)
	beq	@f
	move.b	d4,d6
	sub.b	d0,d6			* 比較 かつ 結果を SZ にセット
	bne	loop_CPIR
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	d0,HC2(a3)		* 引く数を HC2に
	rts	
@@:
	move.b	#1,PV(a3)		* PV をクリア
	move.b	d4,d6
	sub.b	d0,d6			* 比較 かつ 結果を SZ にセット
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	d0,HC2(a3)		* 引く数を HC2に
	rts	

CPD:	andi.w	#%01110111_11111111,d6	* HC modeをクリア
	ori.w	#%00000010_00000000,d6	* Ｎ をセット
	clr.b	PV(a3)			* PV をセット		
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	d0,HC2(a3)		* 引く数を HC2に
	subq.w	#1,hl(a3)
	subq.w	#1,bc(a3)
	bne	@f
	move.b	#1,PV(a3)		* PV をクリア
@@:
	move.b	d4,d6
	sub.b	d0,d6			* 比較 かつ 結果を SZ にセット
	rts

CPDR:	andi.w	#%01110111_11111111,d6	* HC modeをクリア
	ori.w	#%00000010_00000000,d6	* Ｎ をセット
	clr.b	PV(a3)			* PV をセット		
loop_CPDR:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	subq.w	#1,hl(a3)
	subq.w	#1,bc(a3)
	beq	@f
	move.b	d4,d6
	sub.b	d0,d6			* 比較 かつ 結果を SZ にセット
	bne	loop_CPDR
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	d0,HC2(a3)		* 引く数を HC2に
	rts	
@@:	move.b	#1,PV(a3)		* PV をクリア
	move.b	d4,d6
	sub.b	d0,d6			* 比較 かつ 結果を SZ にセット
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	d0,HC2(a3)		* 引く数を HC2に
	rts	

*****************  フラグの動きが怪しい（たぶん大丈夫っぽいけど）***************
*	------ ＮＥＧ ------
NEG:	ori.w	#%00001011_00000000,d6	* Ｎ,Ｃ,HC modeをセット
	andi.w	#%01111111_11111111,d6	* SZ mode をクリア
	move.b	#1,PV(a3)		* PVをクリア
	neg.b	d4
	bvs	V_NEG
	bcs	C_NEG_1
	andi.w	#%11111110_11111111,d6	* Ｃをクリア
C_NEG_1:
	move.b	d4,d6			* SZ を設定
	move.b	d4,d5
	clr.b	HC2(a3)			* HC mode を１にしたから
	rts
V_NEG:
	bcs	C_NEG_2
	andi.w	#%11111110_11111111,d6	* Ｃをクリア
C_NEG_2:
	clr.b	PV(a3)			* PVをセット
	move.b	d4,d6			* SZ を設定
	move.b	d4,d5
	clr.b	HC2(a3)			* HC mode を１にしたから
	rts

*	------ 掛け算命令 ------
MULB_A_A:
	andi.w	#%01111110_00000000,d6	* Ｃ,SZ をクリア
	move.b	#1,PV(a3)		* PV をクリア
	clr.w	d0
	move.b	d4,d0			* d0 <- A
	mulu.w	d0,d0
	beq	@f
	move.b	#1,d6			* S フラグは常にクリアされるため
@@:	move.w	d0,hl(a3)		* このようにしないとダメ
	andi.w	#$ff00,d0
	beq	rts_common
	ori.w	#%00000001_00000000,d6
	rts

MULB_A_B:
	andi.w	#%01111110_00000000,d6	* Ｃ,SZ をクリア
	move.b	#1,PV(a3)		* PV をクリア
	clr.w	d0
	clr.w	d1
	move.b	d4,d0			* d0 <- A
	move.b	b(a3),d1		* d1 <- B
	mulu.w	d1,d0
	beq	@f
	move.b	#1,d6			* S フラグは常にクリアされるため
@@:
	move.w	d0,hl(a3)		* このようにしないとダメ
	andi.w	#$ff00,d0
	beq	rts_common
	ori.w	#%00000001_00000000,d6
	rts

MULB_A_C:
	andi.w	#%01111110_00000000,d6	* Ｃ,SZ をクリア
	move.b	#1,PV(a3)		* PV をクリア
	clr.w	d0
	clr.w	d1
	move.b	d4,d0			* d0 <- A
	move.b	c(a3),d1		* d1 <- B
	mulu.w	d1,d0
	beq	@f
	move.b	#1,d6			* S フラグは常にクリアされるため
@@:
	move.w	d0,hl(a3)		* このようにしないとダメ
	andi.w	#$ff00,d0
	beq	rts_common
	ori.w	#%00000001_00000000,d6
	rts

MULB_A_D:
	andi.w	#%01111110_00000000,d6	* Ｃ,SZ をクリア
	move.b	#1,PV(a3)		* PV をクリア
	clr.w	d0
	clr.w	d1
	move.b	d4,d0			* d0 <- A
	move.b	d(a3),d1		* d1 <- B
	mulu.w	d1,d0
	beq	@f
	move.b	#1,d6			* S フラグは常にクリアされるため
@@:
	move.w	d0,hl(a3)		* このようにしないとダメ
	andi.w	#$ff00,d0
	beq	rts_common
	ori.w	#%00000001_00000000,d6
	rts

MULB_A_E:
	andi.w	#%01111110_00000000,d6	* Ｃ,SZ をクリア
	move.b	#1,PV(a3)		* PV をクリア
	clr.w	d0
	clr.w	d1
	move.b	d4,d0			* d0 <- A
	move.b	e(a3),d1		* d1 <- B
	mulu.w	d1,d0
	beq	@f
	move.b	#1,d6			* S フラグは常にクリアされるため
@@:
	move.w	d0,hl(a3)		* このようにしないとダメ
	andi.w	#$ff00,d0
	beq	rts_common
	ori.w	#%00000001_00000000,d6
	rts

MULB_A_H:
	andi.w	#%01111110_00000000,d6	* Ｃ,SZ をクリア
	move.b	#1,PV(a3)		* PV をクリア
	clr.w	d0
	clr.w	d1
	move.b	d4,d0			* d0 <- A
	move.b	h(a3),d1		* d1 <- B
	mulu.w	d1,d0
	beq	@f
	move.b	#1,d6			* S フラグは常にクリアされるため
@@:
	move.w	d0,hl(a3)		* このようにしないとダメ
	andi.w	#$ff00,d0
	beq	rts_common
	ori.w	#%00000001_00000000,d6
	rts

MULB_A_L:
	andi.w	#%01111110_00000000,d6	* Ｃ,SZ をクリア
	move.b	#1,PV(a3)		* PV をクリア
	clr.w	d0
	clr.w	d1
	move.b	d4,d0			* d0 <- A
	move.b	l(a3),d1		* d1 <- B
	mulu.w	d1,d0
	beq	@f
	move.b	#1,d6			* S フラグは常にクリアされるため
@@:
	move.w	d0,hl(a3)		* このようにしないとダメ
	andi.w	#$ff00,d0
	beq	rts_common
	ori.w	#%00000001_00000000,d6
	rts

MULW_HL_BC:
	andi.w	#%01111110_00000000,d6	* Ｃ,SZ をクリア
	move.b	#1,PV(a3)		* PV をクリア
	move.w	hl(a3),d0		* d0 <- A
	mulu.w	bc(a3),d0
	beq	@f
	move.b	#1,d6			* S フラグは常にクリアされるため
@@:
	move.w	d0,hl(a3)		* このようにしないとダメ
	swap	d0
	move.w	d0,de(a3)		* 上位ワードを格納
	beq	rts_common			* 上位ワードが０の時はそのまま
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	rts

MULW_HL_DE:
	andi.w	#%01111110_00000000,d6	* Ｃ,SZ をクリア
	move.b	#1,PV(a3)		* PV をクリア
	move.w	hl(a3),d0		* d0 <- A
	mulu.w	de(a3),d0
	beq	@f
	move.b	#1,d6			* S フラグは常にクリアされるため
@@:
	move.w	d0,hl(a3)		* このようにしないとダメ
	swap	d0
	move.w	d0,de(a3)		* 上位ワードを格納
	beq	rts_common			* 上位ワードが０の時はそのまま
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	rts

MULW_HL_HL:
	andi.w	#%01111110_00000000,d6	* Ｃ,SZ をクリア
	move.b	#1,PV(a3)		* PV をクリア
	move.w	hl(a3),d0		* d0 <- A
	mulu.w	d0,d0
	beq	@f
	move.b	#1,d6			* S フラグは常にクリアされるため
@@:
	move.w	d0,hl(a3)		* このようにしないとダメ
	swap	d0
	move.w	d0,de(a3)		* 上位ワードを格納
	beq	rts_common			* 上位ワードが０の時はそのまま
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	rts

MULW_HL_SP:
	andi.w	#%01111110_00000000,d6	* Ｃ,SZ をクリア
	move.b	#1,PV(a3)		* PV をクリア
	move.w	hl(a3),d0		* d0 <- A
	mulu.w	sp_(a3),d0
	beq	@f
	move.b	#1,d6			* S フラグは常にクリアされるため
@@:
	move.w	d0,hl(a3)		* このようにしないとダメ
	swap	d0
	move.w	d0,de(a3)		* 上位ワードを格納
	beq	rts_common			* 上位ワードが０の時はそのまま
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	rts


*	------ ＬＤ Ｒ ------
*	RレジスタはM1サイクルごとにインクリメントされるレジスタ
*	LD R,A で代入も可能。インクリメントされるのは下位7bit(Z80)のため、
*	bit7は LR R,Aで代入した値がそのまま残る
*	ms.x では、M1サイクルを正確に数えていないので、emu_counterで代用
LD_A_R:	andi.w	#%01110101_11111111,d6	* HC mode, N をクリア
	move.b	emu_counter,d0
	andi.b	#%01111111,d0		* 下位7bitのみ
	move.b	r(a3),d4
	andi.b	#%10000000,d4		* bit7 を取り出す
	or.b	d0,d4
	move.b	d4,d6			* SZ をセット
	move.b	d5,HC2(a3)		* HC を０に (HC1であるd5とメモリ上のHC2を同じにする)

	move.b	#1,PV(a3)		* PV をクリア(1が奇数個ならPV=0)
	cmpi.b	#0,interrupt_enable	* IFF の状態を反映
	beq	rts_common		* DI 状態の時 P/V <- 0
	move.b	#0,PV(a3)		* PV をセット(1が偶数個ならPV=1)
	rts		* EI 状態の時 P/V <- 1

LD_R_A:	move.b	d4,r(a3)
	rts


*	------ ＬＤ Ｉ ------
LD_A_I:	andi.w	#%01110101_11111111,d6	* HC mode, N をクリア
	move.b	i(a3),d4
	move.b	d4,d6			* SZ をセット
	move.b	d5,HC2(a3)		* HC を０に (HC1であるd5とメモリ上のHC2を同じにする)

	move.b	#1,PV(a3)		* PV をクリア(1が奇数個ならPV=0)
	cmpi.b	#0,interrupt_enable	* IFF の状態を反映
	beq	rts_common		* DI 状態の時 P/V <- 0
	move.b	#0,PV(a3)		* PV をセット(1が偶数個ならPV=1)
	rts		* EI 状態の時 P/V <- 1

LD_I_A:	move.b	d4,i(a3)
	rts

*	ちゃんとやってない
*	------ ＲＥＴＮ ------
RETN:	move.w	sp_(a3),d0
	jsr	ms_read_mem_16
	addq.w	#2,sp_(a3)
	move.w	d0,d7
	PC_page_set
	rts

*	------ ＲＥＴＩ ------
RETI:	move.w	sp_(a3),d0
	jsr	ms_read_mem_16
	addq.w	#2,sp_(a3)
	move.w	d0,d7
	PC_page_set
	rts

*************************************************************************
*
*	＄ＤＤ,＄ＦＤライン命令
*		（Ｉｎｄｅｘ関係）
*
*************************************************************************
DD:	clr.w	d0
	move.b	1(a4,d7.w),d0
	addq.w	#2,d7
	btst.l	#14,d7
	beq	@f			* PC がページ境界をまたいだか？
	PC_page_inc			* またいだ時
	andi.w	#$3fff,d7
	beq	@f
	move.b	(a4),d0			* 読み直し
@@:	move.w	DD_FD_JPT(pc,d0.w*2),d2
	clr.l	d1
	jmp	DD_FD_JPT(pc,d2.w)

FD:	clr.w	d0
	move.b	1(a4,d7.w),d0
	addq.w	#2,d7
	btst.l	#14,d7
	beq	@f			* PC がページ境界をまたいだか？
	PC_page_inc			* またいだ時
	andi.w	#$3fff,d7
	beq	@f
	move.b	(a4),d0			* 読み直し
@@:	move.w	DD_FD_JPT(pc,d0.w*2),d2
	moveq.l	#2,d1
	jmp	DD_FD_JPT(pc,d2.w)

DD_2:	move.b	0(a4,d7.w),d0
	add.w	#1,d7
	andi.w	#$3fff,d7
	bne	@f
	PC_page_inc
@@:	move.w	DD_FD_JPT(pc,d0.w*2),d2
	clr.l	d1
	jmp	DD_FD_JPT(pc,d2.w)

FD_2:	move.b	0(a4,d7.w),d0
	add.w	#1,d7
	andi.w	#$3fff,d7
	bne	@f
	PC_page_inc
@@:	move.w	DD_FD_JPT(pc,d0.w*2),d2
	moveq.l	#2,d1
	jmp	DD_FD_JPT(pc,d2.w)


DD_FD_JPT:
	.dc.w	none_DD_FD-DD_FD_JPT		* $00
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	LD_B_n_2-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $08
	.dc.w	ADD_Idx_BC-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	LD_C_n_2-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $0f

	.dc.w	none_DD_FD-DD_FD_JPT		* $10
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	LD_D_n_2-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $18
	.dc.w	ADD_Idx_DE-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	LD_E_n_2-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $1f

	.dc.w	none_DD_FD-DD_FD_JPT		* $20
	.dc.w	LD_Idx_nn-DD_FD_JPT
	.dc.w	LD_lnnl_Idx-DD_FD_JPT
	.dc.w	INC_Idx-DD_FD_JPT
	.dc.w	INC_IdxH-DD_FD_JPT
	.dc.w	DEC_IdxH-DD_FD_JPT
	.dc.w	LD_IdxH_n-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $28
	.dc.w	ADD_Idx_Idx-DD_FD_JPT
	.dc.w	LD_Idx_lnnl-DD_FD_JPT
	.dc.w	DEC_Idx-DD_FD_JPT
	.dc.w	INC_IdxL-DD_FD_JPT
	.dc.w	DEC_IdxL-DD_FD_JPT
	.dc.w	LD_IdxL_n-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $2f

	.dc.w	none_DD_FD-DD_FD_JPT		* $30
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	INC_lIdx_dl-DD_FD_JPT
	.dc.w	DEC_lIdx_dl-DD_FD_JPT
	.dc.w	LD_lIdx_dl_n-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $38
	.dc.w	ADD_Idx_SP-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	LD_A_n_2-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $3f

	.dc.w	LD_B_B_2-DD_FD_JPT		* $40
	.dc.w	LD_B_C_2-DD_FD_JPT
	.dc.w	LD_B_D_2-DD_FD_JPT
	.dc.w	LD_B_E_2-DD_FD_JPT
	.dc.w	LD_B_IdxH-DD_FD_JPT
	.dc.w	LD_B_IdxL-DD_FD_JPT
	.dc.w	LD_B_lIdx_dl-DD_FD_JPT
	.dc.w	LD_B_A_2-DD_FD_JPT
	.dc.w	LD_C_B_2-DD_FD_JPT		* $48
	.dc.w	LD_C_C_2-DD_FD_JPT
	.dc.w	LD_C_D_2-DD_FD_JPT
	.dc.w	LD_C_E_2-DD_FD_JPT
	.dc.w	LD_C_IdxH-DD_FD_JPT
	.dc.w	LD_C_IdxL-DD_FD_JPT
	.dc.w	LD_C_lIdx_dl-DD_FD_JPT
	.dc.w	LD_C_A_2-DD_FD_JPT		* $4f

	.dc.w	LD_D_B_2-DD_FD_JPT		* $50
	.dc.w	LD_D_C_2-DD_FD_JPT
	.dc.w	LD_D_D_2-DD_FD_JPT
	.dc.w	LD_D_E_2-DD_FD_JPT
	.dc.w	LD_D_IdxH-DD_FD_JPT
	.dc.w	LD_D_IdxL-DD_FD_JPT
	.dc.w	LD_D_lIdx_dl-DD_FD_JPT
	.dc.w	LD_D_A_2-DD_FD_JPT
	.dc.w	LD_E_B_2-DD_FD_JPT		* $58
	.dc.w	LD_E_C_2-DD_FD_JPT
	.dc.w	LD_E_D_2-DD_FD_JPT
	.dc.w	LD_E_E_2-DD_FD_JPT
	.dc.w	LD_E_IdxH-DD_FD_JPT
	.dc.w	LD_E_IdxL-DD_FD_JPT
	.dc.w	LD_E_lIdx_dl-DD_FD_JPT
	.dc.w	LD_E_A_2-DD_FD_JPT		* $5f

	.dc.w	LD_IdxH_B-DD_FD_JPT		* $60
	.dc.w	LD_IdxH_C-DD_FD_JPT
	.dc.w	LD_IdxH_D-DD_FD_JPT
	.dc.w	LD_IdxH_E-DD_FD_JPT
	.dc.w	LD_IdxH_IdxH-DD_FD_JPT
	.dc.w	LD_IdxH_IdxL-DD_FD_JPT
	.dc.w	LD_H_lIdx_dl-DD_FD_JPT
	.dc.w	LD_IdxH_A-DD_FD_JPT
	.dc.w	LD_IdxL_B-DD_FD_JPT		* $68
	.dc.w	LD_IdxL_C-DD_FD_JPT
	.dc.w	LD_IdxL_D-DD_FD_JPT
	.dc.w	LD_IdxL_E-DD_FD_JPT
	.dc.w	LD_IdxL_IdxH-DD_FD_JPT
	.dc.w	LD_IdxL_IdxL-DD_FD_JPT
	.dc.w	LD_L_lIdx_dl-DD_FD_JPT
	.dc.w	LD_IdxL_A-DD_FD_JPT		* $6f

	.dc.w	LD_lIdx_dl_B-DD_FD_JPT	* $70
	.dc.w	LD_lIdx_dl_C-DD_FD_JPT
	.dc.w	LD_lIdx_dl_D-DD_FD_JPT
	.dc.w	LD_lIdx_dl_E-DD_FD_JPT
	.dc.w	LD_lIdx_dl_H-DD_FD_JPT
	.dc.w	LD_lIdx_dl_L-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	LD_lIdx_dl_A-DD_FD_JPT
	.dc.w	LD_A_B_2-DD_FD_JPT		* $78
	.dc.w	LD_A_C_2-DD_FD_JPT
	.dc.w	LD_A_D_2-DD_FD_JPT
	.dc.w	LD_A_E_2-DD_FD_JPT
	.dc.w	LD_A_IdxH-DD_FD_JPT
	.dc.w	LD_A_IdxL-DD_FD_JPT
	.dc.w	LD_A_lIdx_dl-DD_FD_JPT
	.dc.w	LD_A_A_2-DD_FD_JPT		* $7f

	.dc.w	none_DD_FD-DD_FD_JPT		* $80
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	ADD_A_IdxH-DD_FD_JPT
	.dc.w	ADD_A_IdxL-DD_FD_JPT
	.dc.w	ADD_A_lIdx_dl-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $88
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	ADC_A_IdxH-DD_FD_JPT
	.dc.w	ADC_A_IdxL-DD_FD_JPT
	.dc.w	ADC_A_lIdx_dl-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $8f

	.dc.w	none_DD_FD-DD_FD_JPT		* $90
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	SUB_IdxH-DD_FD_JPT
	.dc.w	SUB_IdxL-DD_FD_JPT
	.dc.w	SUB_lIdx_dl-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $98
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	SBC_A_IdxH-DD_FD_JPT
	.dc.w	SBC_A_IdxL-DD_FD_JPT
	.dc.w	SBC_A_lIdx_dl-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $9f

	.dc.w	none_DD_FD-DD_FD_JPT		* $a0
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	AND_IdxH-DD_FD_JPT
	.dc.w	AND_IdxL-DD_FD_JPT
	.dc.w	AND_lIdx_dl-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $a8
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	XOR_IdxH-DD_FD_JPT
	.dc.w	XOR_IdxL-DD_FD_JPT
	.dc.w	XOR_lIdx_dl-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $af

	.dc.w	none_DD_FD-DD_FD_JPT		* $b0
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	OR_IdxH-DD_FD_JPT
	.dc.w	OR_IdxL-DD_FD_JPT
	.dc.w	OR_lIdx_dl-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $b8
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	CP_IdxH-DD_FD_JPT
	.dc.w	CP_IdxL-DD_FD_JPT
	.dc.w	CP_lIdx_dl-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $bf

	.dc.w	none_DD_FD-DD_FD_JPT		* $c0
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $c8
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	DD_FD_CB-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $cf

	.dc.w	none_DD_FD-DD_FD_JPT		* $d0
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $d8
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	DD_2-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $df

	.dc.w	none_DD_FD-DD_FD_JPT		* $e0
	.dc.w	POP_Idx-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	EX_lSPl_Idx-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	PUSH_Idx-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $e8
	.dc.w	JP_lIdxl-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $ef

	.dc.w	none_DD_FD-DD_FD_JPT		* $f0
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $f8
	.dc.w	LD_SP_Idx-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	FD_2-DD_FD_JPT
	.dc.w	stop-DD_FD_JPT
	.dc.w	system_end-DD_FD_JPT		* $ff

none_DD_FD:					* おかしな命令を実行しました
	move.w	d0,d1
	lsr.w	#4,d0
	lea.l	HEX,a0
	move.b	(a0,d0.w),number_ddfd+0
	andi.w	#$0f,d1
	move.b	(a0,d1.w),number_ddfd+1

	pea.l	errms_ddfd
	DOS	__PRINT
	lea.l	4(sp),sp
	move.b	#$ff,d0
	rts

errms_ddfd:
	.dc.b	'おかしな命令を実行しました。0xdd or 0xfd,0x'
number_ddfd:
	.dc.b	'00'
	.dc.b	0x0d,0x0a,0x00

	.even

LD_A_A_2:
	rts
LD_A_B_2:
	move.b	b(a3),d4
	rts
LD_A_C_2:
	move.b	c(a3),d4
	rts
LD_A_D_2:
	move.b	d(a3),d4
	rts
LD_A_E_2:
	move.b	e(a3),d4
	rts
LD_A_IdxH:
	move.b	ix_h(a3,d1.w),d4
	rts
LD_A_IdxL:
	move.b	ix_l(a3,d1.w),d4
	rts
LD_A_n_2:
	move.b	0(a4,d7.w),d4
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

LD_B_A_2:
	move.b	d4,b(a3)
	rts
LD_B_B_2:
	rts
LD_B_C_2:
	move.b	c(a3),b(a3)
	rts
LD_B_D_2:
	move.b	d(a3),b(a3)
	rts
LD_B_E_2:
	move.b	e(a3),b(a3)
	rts
LD_B_IdxH:
	move.b	ix_h(a3,d1.w),b(a3)
	rts
LD_B_IdxL:
	move.b	ix_l(a3,d1.w),b(a3)
	rts
LD_B_n_2:
	move.b	0(a4,d7.w),b(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

LD_C_A_2:
	move.b	d4,c(a3)
	rts
LD_C_B_2:
	move.b	b(a3),c(a3)
	rts
LD_C_C_2:
	rts
LD_C_D_2:
	move.b	d(a3),c(a3)
	rts
LD_C_E_2:
	move.b	e(a3),c(a3)
	rts
LD_C_IdxH:
	move.b	ix_h(a3,d1.w),c(a3)
	rts
LD_C_IdxL:
	move.b	ix_l(a3,d1.w),c(a3)
	rts
LD_C_n_2:
	move.b	0(a4,d7.w),c(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

LD_D_A_2:
	move.b	d4,d(a3)
	rts
LD_D_B_2:
	move.b	b(a3),d(a3)
	rts
LD_D_C_2:
	move.b	c(a3),d(a3)
	rts
LD_D_D_2:
	rts
LD_D_E_2:
	move.b	e(a3),d(a3)
	rts
LD_D_IdxH:
	move.b	ix_h(a3,d1.w),d(a3)
	rts
LD_D_IdxL:
	move.b	ix_l(a3,d1.w),d(a3)
	rts
LD_D_n_2:
	move.b	0(a4,d7.w),d(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

LD_E_A_2:
	move.b	d4,e(a3)
	rts
LD_E_B_2:
	move.b	b(a3),e(a3)
	rts
LD_E_C_2:
	move.b	c(a3),e(a3)
	rts
LD_E_D_2:
	move.b	d(a3),e(a3)
	rts
LD_E_E_2:
	rts
LD_E_IdxH:
	move.b	ix_h(a3,d1.w),e(a3)
	rts
LD_E_IdxL:
	move.b	ix_l(a3,d1.w),e(a3)
	rts
LD_E_n_2:
	move.b	0(a4,d7.w),e(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7			* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

LD_IdxH_A:
	move.b	d4,ix_h(a3,d1.w)
	rts
LD_IdxL_A:
	move.b	d4,ix_l(a3,d1.w)
	rts
LD_IdxH_B:
	move.b	b(a3),ix_h(a3,d1.w)
	rts
LD_IdxL_B:
	move.b	b(a3),ix_l(a3,d1.w)
	rts
LD_IdxH_C:
	move.b	c(a3),ix_h(a3,d1.w)
	rts
LD_IdxL_C:
	move.b	c(a3),ix_l(a3,d1.w)
	rts
LD_IdxH_D:
	move.b	d(a3),ix_h(a3,d1.w)
	rts
LD_IdxL_D:
	move.b	d(a3),ix_l(a3,d1.w)
	rts
LD_IdxH_E:
	move.b	e(a3),ix_h(a3,d1.w)
	rts
LD_IdxL_E:
	move.b	e(a3),ix_l(a3,d1.w)
	rts
LD_IdxH_IdxH:
	rts
LD_IdxL_IdxH:
	move.b	ix_h(a3,d1.w),ix_l(a3,d1.w)
	rts
LD_IdxH_IdxL:
	move.b	ix_l(a3,d1.w),ix_h(a3,d1.w)
	rts
LD_IdxL_IdxL:
	rts
LD_IdxH_n:
	move.b	0(a4,d7.w),ix_h(a3,d1.w)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_IdxL_n:
	move.b	0(a4,d7.w),ix_l(a3,d1.w)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

ADD_A_IdxH:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	ix_h(a3,d1.w),d0
	move.b	d0,HC2(a3)		* 足す数を HC2に
	add.b	d0,d4
	bvs	V_ADD_A			* オーバーフロー？
	bcc	NC_ADD_A1
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6			* 結果を SZ にセット		
	move.b	d4,d5			* 結果を HC1にセット
	rts
ADD_A_IdxL:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	ix_l(a3,d1.w),d0
	move.b	d0,HC2(a3)		* 足す数を HC2に
	add.b	d0,d4
	bvs	V_ADD_A			* オーバーフロー？
	bcc	NC_ADD_A1
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6			* 結果を SZ にセット		
	move.b	d4,d5			* 結果を HC1にセット
	rts

ADC_A_IdxH:
	btst.l	#8,d6
	beq	ADD_A_IdxH		* Cy が０の時 ADD と同じ
	andi.w	#%01111100_00000000,d6	* ＮＣをクリア
	ori.w	#%00001000_00000000,d6	* HC モードをセット
	subq.b	#1,d6			* X ビットをセット
	move.b	ix_h(a3,d1.w),d0
	move.b	d0,HC2(a3)		* 足す数を HC2に
	addx.b	d0,d4
	bvs	V_ADC_A			* オーバーフロー？
	bcc	NC_ADC_A1
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6			* 結果を SZ にセット		
	move.b	d4,d5			* 結果を HC1にセット
	rts
ADC_A_IdxL:
	btst.l	#8,d6
	beq	ADD_A_IdxL		* Cy が０の時 ADD と同じ
	andi.w	#%01111100_00000000,d6	* ＮＣをクリア
	ori.w	#%00001000_00000000,d6	* HC モードをセット
	subq.b	#1,d6			* X ビットをセット
	move.b	ix_l(a3,d1.w),d0
	move.b	d0,HC2(a3)		* 足す数を HC2に
	addx.b	d0,d4
	bvs	V_ADC_A			* オーバーフロー？
	bcc	NC_ADC_A1
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6			* 結果を SZ にセット		
	move.b	d4,d5			* 結果を HC1にセット
	rts

SUB_IdxH:
	andi.w	#%01110110_11111111,d6	* Ｃ,HC mode をクリア
	ori.w	#%00000010_00000000,d6	* Ｎをセット
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	ix_h(a3,d1.w),HC2(a3)	* 引く数を HC2に
	sub.b	HC2(a3),d4
	bvs	V_SUB_A			* オーバーフロー？
	bcs	C_SUB_A1
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6
	rts
SUB_IdxL:
	andi.w	#%01110110_11111111,d6	* Ｃ,HC mode をクリア
	ori.w	#%00000010_00000000,d6	* Ｎをセット
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	ix_l(a3,d1.w),HC2(a3)	* 引く数を HC2に
	sub.b	HC2(a3),d4
	bvs	V_SUB_A			* オーバーフロー？
	bcs	C_SUB_A1
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6
	rts

SBC_A_IdxH:
	btst.l	#8,d6
	beq	SUB_IdxH		* Cy が０の時 SUB と同じ
	ori.w	#%00001011_00000000,d6	* Ｎ,Ｃ, HC mode をセット
	clr.w	d0			* X ビットをセット
	subq.w	#1,d0
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	ix_h(a3,d1.w),d0
	move.b	d0,HC2(a3)		* 引く数を HC2に
	subx.b	d0,d4
	bvs	V_SBC_A			* オーバーフロー？
	bcc	NC_SBC_A1
	move.b	#1,PV(a3)		* PVをクリア
	andi.w	#%01111111_11111111,d6	* SZ mode をクリア
	move.b	d4,d6			* 結果を SZ にセット
	rts
SBC_A_IdxL:
	btst.l	#8,d6
	beq	SUB_IdxL		* Cy が０の時 SUB と同じ
	ori.w	#%00001011_00000000,d6	* Ｎ,Ｃ, HC mode をセット
	clr.w	d0			* X ビットをセット
	subq.w	#1,d0
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	ix_l(a3,d1.w),d0
	move.b	d0,HC2(a3)		* 引く数を HC2に
	subx.b	d0,d4
	bvs	V_SBC_A			* オーバーフロー？
	bcc	NC_SBC_A1
	move.b	#1,PV(a3)		* PVをクリア
	andi.w	#%01111111_11111111,d6	* SZ mode をクリア
	move.b	d4,d6			* 結果を SZ にセット
	rts

AND_IdxH:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	clr.b	d5			* HC を 1に
	move.b	#1,HC2(a3)
	and.b	ix_h(a3,d1.w),d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	
AND_IdxL:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	clr.b	d5			* HC を 1に
	move.b	#1,HC2(a3)
	and.b	ix_l(a3,d1.w),d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

XOR_IdxH:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC を 0に。( HC1 = HC2 の時, HCは０)
	move.b	ix_h(a3,d1.w),d0	* eor <ea>,Dn という命令はないので。
	eor.b	d0,d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	
XOR_IdxL:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC を 0に。( HC1 = HC2 の時, HCは０)
	move.b	ix_l(a3,d1.w),d0	* eor <ea>,Dn という命令はないので。
	eor.b	d0,d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

OR_IdxH:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC を 0に。( HC1 = HC2 の時, HCは０)
	or.b	ix_h(a3,d1.w),d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	
OR_IdxL:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC を 0に。( HC1 = HC2 の時, HCは０)
	or.b	ix_l(a3,d1.w),d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

CP_IdxH:
	andi.w	#%01110110_11111111,d6	* Ｃ,HC mode をクリア
	ori.w	#%00000010_00000000,d6	* Ｎをセット
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	ix_h(a3,d1.w),HC2(a3)	* 引く数を HC2に
	move.b	d4,d6			* 比較かつ結果をSZにセット
	sub.b	ix_h(a3,d1.w),d6
	bvs	V_CP_A			* オーバーフロー？
	bcs	C_CP_A1
	move.b	#1,PV(a3)		* PVをクリア
	rts
CP_IdxL:
	andi.w	#%01110110_11111111,d6	* Ｃ,HC mode をクリア
	ori.w	#%00000010_00000000,d6	* Ｎをセット
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	ix_l(a3,d1.w),HC2(a3)	* 引く数を HC2に
	move.b	d4,d6			* 比較かつ結果をSZにセット
	sub.b	ix_h(a3,d1.w),d6
	bvs	V_CP_A			* オーバーフロー？
	bcs	C_CP_A1
	move.b	#1,PV(a3)		* PVをクリア
	rts

INC_IdxH:
	andi.w	#%01110101_11111111,d6	* Ｎ,HC modeをクリア
	clr.b	PV(a3)		* PVをセット	
	move.b	ix_h(a3,d1.w),d0
	addq.b	#1,d0
	bVS	@f
	move.b	#1,PV(a3)		* PVをクリア
@@:	move.b	d0,d6
	move.b	d0,d5
	move.b	d0,ix_h(a3,d1.w)
	move.b	#1,HC2(a3)
	rts
INC_IdxL:
	andi.w	#%01110101_11111111,d6	* Ｎ,HC modeをクリア
	clr.b	PV(a3)			* PVをセット	
	move.b	ix_l(a3,d1.w),d0
	addq.b	#1,d0
	bVS	@f
	move.b	#1,PV(a3)		* PVをクリア
@@:	move.b	d0,d6
	move.b	d0,d5
	move.b	d0,ix_l(a3,d1.w)
	move.b	#1,HC2(a3)
	rts

DEC_IdxH:
	ori.w	#%00001010_00000000,d6	* Ｎ,HC modeをセット
	andi.w	#%01111111_11111111,d6
	clr.b	PV(a3)			* PVをセット	
	move.b	ix_h(a3,d1.w),d0
	move.b	d0,d5			* 引かれる数を HC1 に
	subq.b	#1,d0
	bVS	@f
	move.b	#1,PV(a3)		* PVをクリア
@@:	move.b	d0,d6
	move.b	d0,ix_h(a3,d1.w)
	clr.b	HC2(a3)
	rts
DEC_IdxL:
	ori.w	#%00001010_00000000,d6	* Ｎ,HC modeをセット
	andi.w	#%01111111_11111111,d6
	clr.b	PV(a3)			* PVをセット	
	move.b	ix_l(a3,d1.w),d0
	move.b	d0,d5			* 引かれる数を HC1 に
	subq.b	#1,d0
	bVS	@f
	move.b	#1,PV(a3)		* PVをクリア
@@:	move.b	d0,d6
	move.b	d0,ix_l(a3,d1.w)
	clr.b	HC2(a3)
	rts



ADD_A_lIdx_dl:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	@f
	PC_page_inc
@@:
	jsr	ms_read_mem_8
	move.b	d0,HC2(a3)		* 足す数を HC2に
	add.b	d0,d4
	bvs	V_ADD_A			* オーバーフロー？
	bcc	NC_ADD_A1
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6
	move.b	d4,d5
	rts

ADC_A_lIdx_dl:
	btst.l	#8,d6
	beq	ADD_A_lIdx_dl		* Cy が０の時 ADD と同じ
	andi.w	#%01111100_00000000,d6	* Ｎ,Ｃ,HC mode をクリア
	ori.w	#%00001000_00000000,d6	* HC モードをセット
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	@f
	PC_page_inc
@@:
	jsr	ms_read_mem_8
	subq.b	#1,d6			* X ビットをセット
	move.b	d0,HC2(a3)		* 足す数を HC2に
	addx.b	d0,d4
	bvs	V_ADD_A			* オーバーフロー？
	bcc	NC_ADD_A1
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6			* 結果を SZ にセット		
	move.b	d4,d5			* 結果を HC1にセット
	rts

SUB_lIdx_dl:
	andi.w	#%01110110_11111111,d6	* Ｃ,HC mode をクリア
	ori.w	#%00000010_00000000,d6	* Ｎをセット
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	@f
	PC_page_inc
@@:
	jsr	ms_read_mem_8
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	d0,HC2(a3)		* 引く数を HC2に
	sub.b	d0,d4
	bvs	V_SUB_A			* オーバーフロー？
	bcs	C_SUB_A1
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6
	rts

SBC_A_lIdx_dl:
	btst.l	#8,d6
	beq	SUB_lIdx_dl		* Cy が０の時 SUB と同じ
	ori.w	#%00001011_00000000,d6	* Ｎ,Ｃ, HC mode をセット
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	@f
	PC_page_inc
@@:
	jsr	ms_read_mem_8
	clr.b	d6			* X ビットをセット
	subq.b	#1,d6
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	d0,HC2(a3)		* 引く数を HC2に
	subx.b	d0,d4
	bvs	V_SBC_A			* オーバーフロー？
	bcc	NC_SBC_A1
	move.b	#1,PV(a3)		* PVをクリア
	andi.w	#%01111111_11111111,d6
	move.b	d4,d6			* 結果を SZ にセット
	rts

AND_lIdx_dl:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	clr.b	d5			* HC を 1に
	move.b	#1,HC2(a3)
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	@f
	PC_page_inc
@@:
	jsr	ms_read_mem_8
	and.b	d0,d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

XOR_lIdx_dl:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC を 0に。( HC1 = HC2 の時, HCは０)
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	@f
	PC_page_inc
@@:
	jsr	ms_read_mem_8
	eor.b	d0,d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

OR_lIdx_dl:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC を 0に。( HC1 = HC2 の時, HCは０)
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	@f
	PC_page_inc
@@:
	jsr	ms_read_mem_8
	or.b	d0,d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

CP_lIdx_dl:
	andi.w	#%01110110_11111111,d6	* Ｃ,HC mode をクリア
	ori.w	#%00000010_00000000,d6	* Ｎをセット
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	@f
	PC_page_inc
@@:
	jsr	ms_read_mem_8
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	d0,HC2(a3)		* 引く数を HC2に
	move.b	d4,d6
	sub.b	d0,d6
	bvs	V_CP_A			* オーバーフロー？
	bcs	C_CP_A1
	move.b	#1,PV(a3)		* PVをクリア
	rts

INC_lIdx_dl:
	andi.w	#%01110101_11111111,d6	* Ｎ,HC modeをクリア
	clr.b	PV(a3)			* PVをセット	
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	@f
	PC_page_inc
@@:
	move.w	d0,-(sp)
	jsr	ms_read_mem_8
	addq.b	#1,d0
	bVS	@f			* オーバーフロー？
	move.b	#1,PV(a3)		* PVをクリア
@@:
	move.b	d0,d6
	move.b	d0,d5
	move.b	#1,HC2(a3)

	move.b	d0,d1
	move.w	(sp)+,d0
	jsr	ms_write_mem_8
	rts

DEC_lIdx_dl:
	ori.w	#%00001010_00000000,d6	* Ｎ,HC modeをセット
	andi.w	#%01111111_11111111,d6	* SZ mode をクリア
	clr.b	PV(a3)			* PVをセット	
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	@f
	PC_page_inc
@@:	move.w	d0,-(sp)
	jsr	ms_read_mem_8
	move.b	d0,d5			* 引かれる数を HC1 に
	subq.b	#1,d0
	bVS	@f			* オーバーフロー？
	move.b	#1,PV(a3)		* PVをクリア
@@:	move.b	d0,d6
	clr.b	HC2(a3)

	move.b	d0,d1
	move.w	(sp)+,d0
	jsr	ms_write_mem_8
	rts


ADD_Idx_BC:
	andi.w	#%11111100_11111111,d6	* ＣｙとＮをクリア
	move.w	bc(a3),d0
	add.w	d0,ix(a3,d1.w)
	bcc	rts_common
	ori.w	#%00000001_00000000,d6	* Ｃｙをセット
	rts

ADD_Idx_DE:
	andi.w	#%11111100_11111111,d6	* ＣｙとＮをクリア
	move.w	de(a3),d0
	add.w	d0,ix(a3,d1.w)
	bcc	rts_common
	ori.w	#%00000001_00000000,d6	* Ｃｙをセット
	rts

ADD_Idx_SP:
	andi.w	#%11111100_11111111,d6	* ＣｙとＮをクリア
	move.w	sp_(a3),d0
	add.w	d0,ix(a3,d1.w)
	bcc	rts_common
	ori.w	#%00000001_00000000,d6	* Ｃｙをセット
	rts

ADD_Idx_Idx:
	andi.w	#%11111100_11111111,d6	* ＣｙとＮをクリア
	move.w	ix(a3,d1.w),d0
	add.w	d0,ix(a3,d1.w)
	bcc	rts_common
	ori.w	#%00000001_00000000,d6	* Ｃｙをセット
	rts


*	------ ＬＤ Ｉｄｘ ------
LD_Idx_nn:
	move.b	0(a4,d7.w),ix_l(a3,d1.w)	* nn の下位８ビットを読む 
	move.b	1(a4,d7.w),ix_h(a3,d1.w)	* nn の上位８ビットを読む 
	addq.w	#2,d7
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	bne	@f
	PC_page_inc		* d7 = 0 の時
	rts
@@:	PC_page_inc		* d7 = 1 の時
	move.b	(a4),ix_h(a3,d1.w)	* nn の上位８ビットを読む
	rts

LD_Idx_lnnl:
	move.b	1(a4,d7.w),d0		* nn の上位８ビットを読む 
	lsl.w	#8,d0
	move.b	0(a4,d7.w),d0		* nn の下位８ビットを読む 
	addq.w	#2,d7
	btst.l	#14,d7
	bne	@f
	jsr	ms_read_mem_16
	move.w	d0,ix(a3,d1.w)
	rts
@@:	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	bne	@f
	PC_page_inc		* d7 = 0 の時
	jsr	ms_read_mem_16
	move.w	d0,ix(a3,d1.w)
	rts
@@:
	move.b	d0,d2			* d7 = 1 の時
	PC_page_inc
	move.b	(a4),d0			* nn の上位８ビットを読む
	lsl.w	#8,d0
	move.b	d2,d0
	jsr	ms_read_mem_16
	move.w	d0,ix(a3,d1.w)
	rts

LD_lnnl_Idx:
	move.w	ix(a3,d1.w),d1
	move.b	1(a4,d7.w),d0		* nn の上位８ビットを読む 
	lsl.w	#8,d0
	move.b	0(a4,d7.w),d0		* nn の下位８ビットを読む 
	addq.w	#2,d7
	btst.l	#14,d7
	bne	@f
	jsr	ms_write_mem_16
	rts
@@:	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	bne	@f
	PC_page_inc		* d7 = 0 の時
	jsr	ms_write_mem_16
	rts
@@:
	move.b	d0,d2			* d7 = 1 の時
	PC_page_inc
	move.b	(a4),d0			* nn の上位８ビットを読む
	lsl.w	#8,d0
	move.b	d2,d0
	jsr	ms_write_mem_16
	rts

LD_SP_Idx:
	move.w	ix(a3,d1.w),sp_(a3)
	rts


*	------ ＩＮＣ ------
INC_Idx:				* フラグは不変
	addq.w	#1,ix(a3,d1.w)
	rts
DEC_Idx:
	subq.w	#1,ix(a3,d1.w)
	rts

*	------ ＬＤ ？,（Ｉｄｘ＋ｄ） ------
LD_A_lIdx_dl:
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,d4
	rts

LD_B_lIdx_dl:
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,b(a3)
	rts

LD_C_lIdx_dl:
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,c(a3)
	rts

LD_D_lIdx_dl:
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,d(a3)
	rts

LD_E_lIdx_dl:
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,e(a3)
	rts

LD_H_lIdx_dl:
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,h(a3)
	rts

LD_L_lIdx_dl:
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,l(a3)
	rts


*	------ ＬＤ （Ｉｄｘ＋ｄ）,？ ------
LD_lIdx_dl_A:
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:
	move.b	d4,d1
	jsr	ms_write_mem_8
	rts

LD_lIdx_dl_B:
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:
	move.b	b(a3),d1
	jsr	ms_write_mem_8
	rts

LD_lIdx_dl_C:
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:
	move.b	c(a3),d1
	jsr	ms_write_mem_8
	rts

LD_lIdx_dl_D:
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:
	move.b	d(a3),d1
	jsr	ms_write_mem_8
	rts

LD_lIdx_dl_E:
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:
	move.b	e(a3),d1
	jsr	ms_write_mem_8
	rts

LD_lIdx_dl_H:
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:
	move.b	h(a3),d1
	jsr	ms_write_mem_8
	rts

LD_lIdx_dl_L:
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:
	move.b	l(a3),d1
	jsr	ms_write_mem_8
	rts

LD_lIdx_dl_n:
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	move.b	1(a4,d7.w),d1		* n を読む
	add.w	#2,d7
	btst.l	#14,d7
	bne	1f
	jsr	ms_write_mem_8
	rts
1:	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	bne	1f
	PC_page_inc		* d7 = 0 の時
	jsr	ms_write_mem_8
	rts
1:
	move.b	d0,d2			* d7 = 1 の時
	PC_page_inc
	move.b	(a4),d0			* nn の上位８ビットを読む
	lsl.w	#8,d0
	move.b	d2,d0
	jsr	ms_write_mem_8
	rts


*	------ ＰＵＳＨ Ｉｄｘ
PUSH_Idx:
	subq.w	#2,sp_(a3)
	move.w	sp_(a3),d0
	move.w	ix(a3,d1.w),d1
	jsr	ms_write_mem_16
	rts

POP_Idx:
	move.w	sp_(a3),d0
	jsr	ms_read_mem_16
	addq.w	#2,sp_(a3)
	move.w	d0,ix(a3,d1.w)
	rts


*	------ ＪＰ (Ｉｄｘ) ------
JP_lIdxl:
	move.w	ix(a3,d1.w),d7
	PC_page_set
	rts


*	------ ＥＸ ------
EX_lSPl_Idx:
	move.w	sp_(a3),d0
	jsr	ms_read_mem_16
	move.w	ix(a3,d1.w),d2
	move.w	d0,ix(a3,d1.w)
	move.w	d2,d1
	move.w	sp_(a3),d0
	jsr	ms_write_mem_16
	rts

*	------ Ｓｙｓｔｅｍ Ｅｎｄ ------
system_end:
	bra	emu_end

*	------ デバッガに制御を渡す ------
stop:
	rts



**********************************************************************
*
*	ＤＤ，ＦＤ ＣＢライン命令
*
**********************************************************************
DD_FD_CB:
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0			* d0 = Idx + d
	move.b	1(a4,d7.w),d2
	add.w	#2,d7
	btst.l	#14,d7
	beq	1f
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐとき
	bne	@f
	PC_page_inc			* d7 = 0 のとき
	bra	1f
@@:	PC_page_inc			* d7 = 1 のとき
	move.b	(a4),d2			* -1(a4,d7.w) = (a4)

1:	subq.b	#6,d2
	andi.w	#$00f8,d2
	lsr.w	#2,d2			* d2 = (第二オペランド - 6) / 8 * 2
	move.w	DD_FD_CB_JPT(pc,d2.w),d1
	jmp	DD_FD_CB_JPT(pc,d1.w)

DD_FD_CB_JPT:
	.dc.w	RLC_lIdx_dl-DD_FD_CB_JPT		* 06
	.dc.w	RRC_lIdx_dl-DD_FD_CB_JPT		* 0e
	.dc.w	RL_lIdx_dl-DD_FD_CB_JPT			* 16
	.dc.w	RR_lIdx_dl-DD_FD_CB_JPT			* 1e
	.dc.w	SLA_lIdx_dl-DD_FD_CB_JPT		* 26
	.dc.w	SRA_lIdx_dl-DD_FD_CB_JPT		* 2e
	.dc.w	SLI_lIdx_dl-DD_FD_CB_JPT		* 36
	.dc.w	SRL_lIdx_dl-DD_FD_CB_JPT		* 3e

	.dc.w	BIT_lIdx_dl-DD_FD_CB_JPT		* 46
	.dc.w	BIT_lIdx_dl-DD_FD_CB_JPT		* 4e
	.dc.w	BIT_lIdx_dl-DD_FD_CB_JPT		* 56
	.dc.w	BIT_lIdx_dl-DD_FD_CB_JPT		* 5e
	.dc.w	BIT_lIdx_dl-DD_FD_CB_JPT		* 66
	.dc.w	BIT_lIdx_dl-DD_FD_CB_JPT		* 6e
	.dc.w	BIT_lIdx_dl-DD_FD_CB_JPT		* 76
	.dc.w	BIT_lIdx_dl-DD_FD_CB_JPT		* 7e

	.dc.w	RES_lIdx_dl-DD_FD_CB_JPT		* 86
	.dc.w	RES_lIdx_dl-DD_FD_CB_JPT
	.dc.w	RES_lIdx_dl-DD_FD_CB_JPT
	.dc.w	RES_lIdx_dl-DD_FD_CB_JPT
	.dc.w	RES_lIdx_dl-DD_FD_CB_JPT
	.dc.w	RES_lIdx_dl-DD_FD_CB_JPT
	.dc.w	RES_lIdx_dl-DD_FD_CB_JPT
	.dc.w	RES_lIdx_dl-DD_FD_CB_JPT		* bf

	.dc.w	SET_lIdx_dl-DD_FD_CB_JPT		* c6
	.dc.w	SET_lIdx_dl-DD_FD_CB_JPT
	.dc.w	SET_lIdx_dl-DD_FD_CB_JPT
	.dc.w	SET_lIdx_dl-DD_FD_CB_JPT
	.dc.w	SET_lIdx_dl-DD_FD_CB_JPT
	.dc.w	SET_lIdx_dl-DD_FD_CB_JPT
	.dc.w	SET_lIdx_dl-DD_FD_CB_JPT
	.dc.w	SET_lIdx_dl-DD_FD_CB_JPT		* fe

SET_lIdx_dl:
	andi.w	#%00000000_00000111,d2		* BIT_n_? の n を d2にロード
	move.w	d0,-(sp)			* Idx + d をプッシュ
	jsr	ms_read_mem_8
	bset.l	d2,d0				* (Idx + d)の nビット目をセット
	move.b	d0,d1
	move.w	(sp)+,d0
	jsr	ms_write_mem_8		
	rts

RES_lIdx_dl:
	andi.w	#%00000000_00000111,d2		* BIT_n_? の n を d2にロード
	move.w	d0,-(sp)			* Idx + d をプッシュ
	jsr	ms_read_mem_8
	bclr.l	d2,d0				* (Idx + d)の nビット目をクリア
	move.b	d0,d1
	move.w	(sp)+,d0
	jsr	ms_write_mem_8		
	rts

BIT_lIdx_dl:
	andi.w	#%11110101_00000000,d6		* N, HC modeを０に。 ＳＺを０に
	clr.b	d5				* HC を１に
	move.b	#1,HC2(a3)
	andi.w	#%00000000_00000111,d2		* BIT_n_? の n を d2にロード
	jsr	ms_read_mem_8
	btst.l	d2,d0				* (Idx + d)の nビット目をテスト
	beq	rts_common
	move.b	#1,d6
	rts

RLC_lIdx_dl:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ HC modeをクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.w	d0,-(sp)		* Idx + d をプッシュ
	jsr	ms_read_mem_8
	rol.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* キャリーフラグをセット
@@:
	move.b	d0,d6			* ＳＺをセット
	move.b	d0,PV(a3)		* ＰＶをセット

	move.b	d0,d1
	move.w	(sp)+,d0
	jsr	ms_write_mem_8
	rts

RRC_lIdx_dl:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ HC modeをクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.w	d0,-(sp)		* Idx + d をプッシュ
	jsr	ms_read_mem_8
	ror.b	#1,d0
	bcc	1f
	ori.w	#%00000001_00000000,d6	* キャリーフラグをセット
1:
	move.b	d0,d6			* ＳＺをセット
	move.b	d0,PV(a3)		* ＰＶをセット

	move.b	d0,d1
	move.w	(sp)+,d0
	jsr	ms_write_mem_8
	rts

RL_lIdx_dl:
	btst.l	#8,d6			* ＣＹの状態をチェック
	beq	SLA_lIdx_dl		* CY が０の時 RLは SLAと同じ動作をする
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.w	d0,-(sp)		* Idx + d をプッシュ
	jsr	ms_read_mem_8
	add.b	d0,d0
	bcc	1f
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
1:	ori.w	#%00000000_00000001,d0	* 最下位ビットをセット
	move.b	d0,d6
	move.b	d0,PV(a3)

	move.b	d0,d1
	move.w	(sp)+,d0
	jsr	ms_write_mem_8
	rts


RR_lIdx_dl:
	btst.l	#8,d6			* ＣＹの状態をチェック
	beq	SRL_lIdx_dl		* CY が０の時 RRは SRLと同じ動作をする
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.w	d0,-(sp)		* Idx + d をプッシュ
	jsr	ms_read_mem_8
	lsr.b	#1,d0
	bcc	1f
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
1:	ori.w	#%00000000_10000000,d0	* 最上位ビットをセット
	move.b	d0,d6
	move.b	d0,PV(a3)
	move.b	d0,d1
	move.w	(sp)+,d0
	jsr	ms_write_mem_8
	rts

SLA_lIdx_dl:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.w	d0,-(sp)		* Idx + d をプッシュ
	jsr	ms_read_mem_8
	add.b	d0,d0
	bcc	1f
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
1:	move.b	d0,d6
	move.b	d0,PV(a3)
	move.b	d0,d1
	move.w	(sp)+,d0
	jsr	ms_write_mem_8
	rts

SRA_lIdx_dl:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.w	d0,-(sp)		* Idx + d をプッシュ
	jsr	ms_read_mem_8
	asr.b	#1,d0
	bcc	1f
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
1:	move.b	d0,d6
	move.b	d0,PV(a3)
	move.b	d0,d1
	move.w	(sp)+,d0
	jsr	ms_write_mem_8
	rts

SRL_lIdx_dl:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.w	d0,-(sp)		* Idx + d をプッシュ
	jsr	ms_read_mem_8
	lsr.b	#1,d0
	bcc	1f
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
1:	move.b	d0,d6
	move.b	d0,PV(a3)
	move.b	d0,d1
	move.w	(sp)+,d0
	jsr	ms_write_mem_8
	rts

SLI_lIdx_dl:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.w	d0,-(sp)		* Idx + d をプッシュ
	jsr	ms_read_mem_8
	add.b	d0,d0
	bcc	1f
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
1:	addq.b	#1,d0
	move.b	d0,d6
	move.b	d0,PV(a3)
	move.b	d0,d1
	move.w	(sp)+,d0
	jsr	ms_write_mem_8
	rts

*****************************************************
*
*		Ｉ/Ｏ関係のルーチン
*
*****************************************************

*	------ ＩＮ ------
IN_A_n:	move.b	1(a4,d7.w),d0		* n を読む
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7			* PC がページ境界をまたいだか？
	beq	@f
	PC_page_inc
	andi.w	#$3fff,d7
	beq	@f
	move.b	(a4),d0
@@:	bsr	input
	move.b	d0,d4
	rts

IN_A_c:	andi.w	#%01111101_11111111,d6	* N をクリア
	move.b	c(a3),d0
	bsr	input
	move.b	d0,d4
	move.b	d0,d6			* SZ をセット
	move.b	d0,PV(a3)		* PV をセット
	rts

IN_B_c:	andi.w	#%01111101_11111111,d6	* N をクリア
	move.b	c(a3),d0
	bsr	input
	move.b	d0,b(a3)
	move.b	d0,d6			* SZ をセット
	move.b	d0,PV(a3)		* PV をセット
	rts

IN_C_c:	andi.w	#%01111101_11111111,d6	* N をクリア
	move.b	c(a3),d0
	bsr	input
	move.b	d0,c(a3)
	move.b	d0,d6			* SZ をセット
	move.b	d0,PV(a3)		* PV をセット
	rts

IN_D_c:	andi.w	#%01111101_11111111,d6	* N をクリア
	move.b	c(a3),d0
	bsr	input
	move.b	d0,d(a3)
	move.b	d0,d6			* SZ をセット
	move.b	d0,PV(a3)		* PV をセット
	rts

IN_E_c:	andi.w	#%01111101_11111111,d6	* N をクリア
	move.b	c(a3),d0
	bsr	input
	move.b	d0,e(a3)
	move.b	d0,d6			* SZ をセット
	move.b	d0,PV(a3)		* PV をセット
	rts

IN_H_c:	andi.w	#%01111101_11111111,d6	* N をクリア
	move.b	c(a3),d0
	bsr	input
	move.b	d0,h(a3)
	move.b	d0,d6			* SZ をセット
	move.b	d0,PV(a3)		* PV をセット
	rts

IN_L_c:	andi.w	#%01111101_11111111,d6	* N をクリア
	move.b	c(a3),d0
	bsr	input
	move.b	d0,l(a3)
	move.b	d0,d6			* SZ をセット
	move.b	d0,PV(a3)		* PV をセット
	rts

IN_F_c:	andi.w	#%01111101_11111111,d6	* N をクリア
	move.b	c(a3),d0
	bsr	input
	move.b	d0,d6			* SZ をセット
	move.b	d0,PV(a3)		* PV をセット
	rts

*	------ ＩＮＩ ------
INI:	ori.w	#%00000010_00000000,d6	* Nをセット
	andi.w	#%01111111_11111111,d6
	move.b	c(a3),d0
	bsr	input
	move.b	d0,d1
	move.w	hl(a3),d0
	jsr	ms_write_mem_8
	addq.w	#1,hl(a3)
	subq.b	#1,b(a3)
	move.b	b(a3),d6		* Z を設定
	rts

*	------ ＩＮＤ ------
IND:	ori.w	#%00000010_00000000,d6	* Nをセット
	andi.w	#%01111111_11111111,d6
	move.b	c(a3),d0
	bsr	input
	move.b	d0,d1
	move.w	hl(a3),d0
	jsr	ms_write_mem_8
	subq.w	#1,hl(a3)
	subq.b	#1,b(a3)
	move.b	b(a3),d6		* Z を設定
	rts

*	------ ＩＮＩＲ ------
INIR:	ori.w	#%00000010_00000000,d6	* Nをセット
	andi.w	#%01111111_11111111,d6
@@:
	move.b	c(a3),d0
	bsr	input
	move.b	d0,d1
	move.w	hl(a3),d0
	jsr	ms_write_mem_8
	addq.w	#1,hl(a3)
	subq.b	#1,b(a3)
	bne	@b
	clr.b	d6			* Z をセット
	rts

*	------ ＩＮＤＲ ------
INDR:	ori.w	#%00000010_00000000,d6	* Nをセット
	andi.w	#%01111111_11111111,d6
@@:
	move.b	c(a3),d0
	bsr	input
	move.b	d0,d1
	move.w	hl(a3),d0
	jsr	ms_write_mem_8
	subq.w	#1,hl(a3)
	subq.b	#1,b(a3)
	bne	@b
	clr.b	d6			* Z をセット
	rts


	
*	------ ＯＵＴ ------
OUT_n_A:
	move.b	1(a4,d7.w),d0		* n を読む
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7			* PC がページ境界をまたいだか？
	beq	@f
	PC_page_inc
	andi.w	#$3fff,d7
	beq	@f
	move.b	(a4),d0
@@:	move.b	d4,d1
	bsr	output
	rts

OUT_c_A:
	move.b	c(a3),d0
	move.b	d4,d1
	bsr	output
	rts

OUT_c_B:
	move.b	c(a3),d0
	move.b	b(a3),d1
	bsr	output
	rts

OUT_c_C:
	move.b	c(a3),d0
	move.b	d0,d1
	bsr	output
	rts

OUT_c_D:
	move.b	c(a3),d0
	move.b	d(a3),d1
	bsr	output
	rts

OUT_c_E:
	move.b	c(a3),d0
	move.b	e(a3),d1
	bsr	output
	rts

OUT_c_H:
	move.b	c(a3),d0
	move.b	h(a3),d1
	bsr	output
	rts

OUT_c_L:
	move.b	c(a3),d0
	move.b	l(a3),d1
	bsr	output
	rts

*	------ ＯＵＴＩ ------
OUTI:	ori.w	#%00000010_00000000,d6	* Nをセット
	andi.w	#%01111111_11111111,d6
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	move.b	d0,d1			* 書き込む値
	move.b	c(a3),d0		* 書き込むポート
	bsr	output
	addq.w	#1,hl(a3)
	subq.b	#1,b(a3)
	move.b	b(a3),d6		* Z を設定
	rts

*	------ ＯＵＴＤ ------
OUTD:	ori.w	#%00000010_00000000,d6	* Nをセット
	andi.w	#%01111111_11111111,d6
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	move.b	d0,d1			* 書き込む値
	move.b	c(a3),d0		* 書き込むポート
	bsr	output
	subq.w	#1,hl(a3)
	subq.b	#1,b(a3)
	move.b	b(a3),d6		* Z を設定
	rts

*	------ ＯＴＩＲ ------
OTIR:	ori.w	#%00000010_00000000,d6	* Nをセット
	andi.w	#%01111111_11111111,d6
@@:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	move.b	d0,d1			* 書き込む値
	move.b	c(a3),d0		* 書き込むポート
	bsr	output
	addq.w	#1,hl(a3)
	subq.b	#1,b(a3)
	bne	@b
	clr.b	d6			* Z をセット
	rts

*	------ ＯＴＤＲ ------
OTDR:	ori.w	#%00000010_00000000,d6	* Nをセット
	andi.w	#%01111111_11111111,d6
@@:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	move.b	d0,d1			* 書き込む値
	move.b	c(a3),d0		* 書き込むポート
	bsr	output
	subq.w	#1,hl(a3)
	subq.b	#1,b(a3)
	bne	@b
	clr.b	d6			* Z をセット
	rts


*****************************************************************
*
*	ポートからの読み込み
*
*  (引数)
*	.d0.b	ポート番号
*  (帰り値)
*	.d0.b	読み込んだ値
*
*	d1,d2,d3 破壊可能性あり
*
*****************************************************************	
input:
	clr.w	d1
	move.b	d0,d1				* 上位バイトを０でクリア
	lea.l	ms_io_input_table,a0
	movea.l	(a0,d1.w*4),a0			* d0 の値を変えちゃだめ（68030用→68000用にする時注意）
	jmp	(a0)				* rts を省略するためジャンプにしてある

*****************************************************************
*
*	ポートへの書き込み
*
*  (引数)
*	.d0.b	ポート番号
*	.d1.b	書き込む値
*
*	d1 破壊
*
*****************************************************************	
output:
.if 1
	bsr	print_debug_out
.endif
	clr.w	d2
	move.b	d0,d2				* 上位バイトを０でクリア
	lea	ms_io_output_table,a0
	movea.l	(a0,d2.w*4),a0			* d0 の値を変えちゃだめ（68030用→68000用にする時注意）
	jmp	(a0)				* rts を省略するためジャンプにしてある


print_debug_out:
	cmp.w	#1,debug_log_level
	bge	@f				* ログレベルが１以上の時
	rts
@@:	movem.l	d0-d3/a0-a3,-(sp)
	lsr.w	#4,d0
	lea.l	HEX,a0
	move.b	(a0,d0.w),debug_out_number+0
	andi.w	#$0f,d1
	move.b	(a0,d1.w),debug_out_number+1
	move.w	d1,d0
	lsr.w	#4,d0
	lea.l	HEX,a0
	move.b	(a0,d0.w),debug_out_value+0
	andi.w	#$0f,d1
	move.b	(a0,d1.w),debug_out_value+1

	pea.l	debug_out_msg
	DOS	__PRINT
	lea.l	4(sp),sp
	movem.l	(sp)+,d0-d3/a0-a3
	rts

	.data


debug_out_msg:
	.dc.b	'I/Oポートに書き込みました。0x'
debug_out_number:
	.dc.b	'00'
	.dc.b	' 値:0x'
debug_out_value:
	.dc.b	'00'
	.dc.b	0x0d,0x0a,0x00




*************** ワークエリア ******************

	.data

PC_page:
	.dc.w	0	* 現在ＰＣが存在するページ

emu_loop_func:
	.dc.l	0	* エミュレータのループ関数のアドレス

base:			* a3 の指すアドレス
registers:
	.dc.b	0	* a
	.dc.b	0	* f
	.dc.b	0	* b
	.dc.b	0	* c
	.dc.b	0	* d
	.dc.b	0	* e
	.dc.b	0	* h
	.dc.b	0	* l

	.dc.b	0	* ix_h
	.dc.b	0	* ix_l
	.dc.b	0	* iy_h
	.dc.b	0	* iy_l

	.dc.b	0	* s
	.dc.b	0	* p

pair_registers:		* 裏レジスタの保存場所
	.dc.b	0	* a'
	.dc.b	0	* f'
	.dc.b	0	* b'
	.dc.b	0	* c'
	.dc.b	0	* d'
	.dc.b	0	* e'
	.dc.b	0	* h'
	.dc.b	0	* l'


r_:	.dc.b	0	* Ｒレジスタ
i_:	.dc.b	0	* Ｉレジスタ

			* HC1はレジスタ d5 にある
HC2_:			* ＨＣフラグは、HC1 ≧ HC2 + HC mode (d6のビット11)なら０ 
			* HC1 ＜ HC2 なら１とする。
	.dc.b	0	* ただし、HC1 HC2 は下位４ビットのみ有効。不等式は8ビットで演算

PV_:			* ＰＶフラグはＰＶの値のうち１であるビットが偶数個
	.dc.b	0	* なら１、奇数なら０とする。

*	ＡＦ’用のフラグ保存場所
HC1_d_:	.dc.b	0	* d5 
HC2_d_:	.dc.b	0
PV_d_:	.dc.b	0
	.even
d6_d_:	.dc.w	0	* d6 に対応する部分


; CPUのメインループを極力高速化するため、Z80の割り込みや、エミュレータの割り込み(キーボード処理など)を
; yieldフラグを見て分岐するようにしています。
; yieldフラグには cpu_yieldと、emu_yieldの2つがあり、どちらも0の場合は、CPUのメインループが
; 割り込まれずに実行されます。
; この2つのフラグは、以下のような動作をします。
;
; ● cpu_yield
; cpu_yieldに1以上をセットすると、1命令処理するごとにカウントダウンし、0になるタイミングで、
; 以下の動作をします:
;   * EI状態で、VDPからの割り込み要求があるなら、割り込みを発生させる
;   * DI状態なら無視する(割り込みは取りこぼされる)
;
; 通常はX68000側のVSYNC割り込みで1をセットし、即座にZ80側の割り込みがかかるようにしますが、
; タイミング調整が必要になった場合は、このフラグを使って調整可能です。
; 走査線割り込みをサポートする場合も、このフラグに1以上の値をセットして走査線割り込みのタイミングを
; 調整することが可能です。
; VSYNC割り込みでセットされたフラグのカウントダウンをしている最中に走査線割り込みによって cpu_yieldが
; 書き潰される可能性はあるかもしれませんが、もともと両者の割り込みはZ80から見ると共有割り込みなので、
; まあ問題ないかなと思っています。
;
; ● emu_yield
; emu_yieldに1以上をセットすると、1命令処理するごとにカウントダウンし、0になるタイミングで、
; 以下の動作をします:
;    * X68000側のキーボード入力の処理を行う
;
; 通常はX68000側のVSYNC割り込みで cpu_yieldより100くらい大きめの値をセットします。これにより、
; cpu_yieldの方が先に処理され、Z80の割り込み処理ルーチンが優先的に動くようになります。
; emu_yieldの頻度を調整したい場合は、VSYNC割り込み以外のタイマー割り込みを使ってセットするように
; しても良いです。
	.quad
cpu_emu_yield:			* cpu_yieldと emu_yieldの両方を同時にロングワードアクセスするときはこちらのラベルを使用する
cpu_yield:
	.dc.w	0
emu_yield:
	.dc.w	0

debug_log_level:
	.dc.w	0

*	割り込み許可状態を示すフラグ
*	0 ・・・ DI
*	1 ・・・ EI
*	2 ・・・ EIになった直後(1命令だけ割り込みを無視する)
interrupt_enable:
	.dc.b	0

interrupt_mode:
	.dc.b	0		* インタラプトモード 0, 1, 2


	.end
