*
*	Ｍｓｘ Ｓｉｍｕｌａｔｅｒ
*
*		[[[ Ｒ８００ Ｓｉｍｕｌａｔｅｒ ]]]		
*			ＭＣ６８０３０以降専用バージョン
*
*				1995.9.24		by Kuni.
*

*	TODO:
*	ＲＥＴＮとＲＥＴＩをちゃんとやってない

; TODO lists
;
; # WZレジスタの実装
; WZレジスタは、LD A,(nn) の nnの値など、内部的なメモリアクセスの際のアドレスを保持するためのレジスタです。
; Z80の表面的なスペック上は見えませんが、F5,F3レジスタなどにこの値が反映されるケースがあるため、内部的には
; WZレジスタの値も追従する必要があります。
;
; # iレジスタの正確な実装
; iレジスタは、Mode2割り込みで使用される割り込みベクタの上位8ビットとして使用されます。
; MSXでは Mode2割り込みは使わないため、正確に実装していません。
;
; # rレジスタの正確な実装
; rレジスタはリフレッシュカウンタとして使われるレジスタのため、正確に実装していません。
; ただ、稀に乱数のシードなどに使われるケースがあるので、定数だとまずいケースがあり、
; 適当に実装しています。
; 正確に実装するためには、後述のZ80のサイクルを正確にカウントする必要があります。
; 
; # サイクルカウントの正確な実装
; Z80のサイクルカウントは、命令ごとに異なるサイクル数が必要です。
; これを正確に実装するためには、命令ごとにサイクル数をカウントする必要があります。

*	 31     16 15 8 7  0
*	|         |    | A  |  d4	Ａレジスタ
*	| 1st| 2nd| result  |  d5	フラグ再計算情報
*	|      xxx|dirt|flag|  d6	フラグおよび関連情報
*	| PC page | PC(16k) |  d7
*	|     registers     |  a3	a3 = レジスターの格納されているアドレス
*	|    PC Base ADD    |  a4	a4 = PC
*
*	PC Base ADD + PC(16k) = 実アドレス
*
*	PC page は PC(R800) の上位２ビットの値が入っている
*	PC(16k) は PC(R800) の下位14ビットの値
*
*		PC(R800)  $8100  =   %10___000001_00000000 
*
*		=> d7 %00000000_00000010_00000001_00000000
*
*	registers:
*	a:	.dc.b	0	* Aレジスタは d4 を使うから使わない
*	f:	.dc.b	0	* Fレジスタは d5,d6 を使うから使わない
*	b:	.dc.b	0
*	c:	.dc.b	0
*	d:	.dc.b	0
*	e:	.dc.b	0
*	h:	.dc.b	0
*	l:	.dc.b	0
*
*	ix_h:	.dc.b	0
*	ix_l:	.dc.b	0
*	iy_h:	.dc.b	0
*	iy_l:	.dc.b	0
*
*	s:	.dc.b	0
*	p:	.dc.b	0
*

	.cpu 68030

	.include	iocscall.mac
	.include	doscall.mac

	.text
	.even

	.xref	page0		;暫定処理

	.xref	dumpsp_c

	.xref	ms_read_mem_8
	.xref	ms_read_mem_16
	.xref	ms_write_mem_8
	.xref	ms_write_mem_16

	.xref	ms_io_input_table
	.xref	ms_io_output_table

	.xref	native_jpt_add		* ６８ネイティブルーチンのジャンプテーブル

	; CPUコアに対する割り込み要求フラグ(実CPUのINT端子に相当する)
	; この1バイトの値が1になるとCPUに対する割り込み要求となる
	; このフラグ領域は本CPUコアは定義していないので、外部で定義する必要がある
	; MSXの場合はVDPのステータスレジスタ0のbit7の値が割り込み要求フラグになる
	.xref	ms_cpu_int

	.xref	HEX
	.xref	host_rate
	.xref	int_block_count

	.xref	ms_vdp_interrupt_tick	; TODO VDP依存を除去

	.xref	w_port_A8

	.xref	eval_flag_all
	.xref	eval_flag_SZ
	.xref	eval_flag_F5F3
	.xref	eval_flag_HC_C
	.xref	eval_flag_PV_N

	.xdef	f

	.xdef	ms_cpu_init
	.xdef	ms_cpu_emulate
	.xdef	ms_cpu_step
	.xdef	ms_cpu_step_break
	.xdef	ms_instructions_ptr
	.xdef	ms_cpu_registers_ptr

	;.xdef	cpu_main
	.xdef	cpu_emu_yield
	.xdef	cpu_yield
	.xdef	emu_yield
	.xdef	debug_log_level
	.xdef	_readMemFromC
	.xdef	int_skip_counter
	.xdef	int_exec_counter
	.xdef	interrupt_history_ptr
	.xdef	interrupt_history_wr
	.xdef	interrupt_history_rd

	.xdef	base

a	equ	0
f	equ	1	
b	equ	2	
c	equ	3	
d	equ	4
e	equ	5
h	equ	6
l	equ	7
ix_h	equ	8
ix_l	equ	9
iy_h	equ	10
iy_l	equ	11
s	equ	12
p	equ	13

bc	equ	2
de	equ	4
hl	equ	6
ix	equ	8
iy	equ	10
sp_	equ	12

a_	equ	14
f_	equ	15	
b_	equ	16	
c_	equ	17	
d_	equ	18
e_	equ	19
h_	equ	20
l_	equ	21

af_	equ	14
bc_	equ	16
de_	equ	18
hl_	equ	20

r	equ	r_-base
i	equ	i_-base

wz	equ	wz_-base
w	equ	w_-base
z	equ	z_-base


PC_page_inc	macro
		swap	d7
		addq.w	#1,d7
		andi.w	#3,d7
		lea	page0,a4
		movea.l	(a4,d7.w*4),a4
		swap	d7
		endm

PC_page_set	macro			* JP命令等で PCが変わった時の処理
		move.w	d7,d0
		clr.l	d7		* d7 の上位ワードを０にする。符号拡張ではだめ
		move.w	d0,d7
		andi.w	#%00111111_11111111,d0
		lsl.l	#2,d7
		move.w	d0,d7
		swap	d7
		lea	page0,a4
		movea.l	(a4,d7.w*4),a4
		swap	d7
		endm

*
*	int ms_cpu_init();
*
ms_cpu_init:
	link	a6,#0
	movem.l	d3-d7/a0-a5,-(sp)

	lea.l	registers,a3
	clr.w	d1
	jsr	w_port_A8		* スロットを０で初期化

	clr.w	d7			* pc = 0
	PC_page_set
	clr.w	sp_(a3)			* sp = 0
	move.b	#$00,interrupt_enable	* DI に
	clr.b	interrupt_mode		* IM を０に

	movem.l	(sp)+,d3-d7/a0-a5
	unlk	a6
	rts

	.data

emu_counter:
	.dc.l	0
emu_counter_latch:
	.dc.l	0
int_skip_counter:
	.dc.l	0
int_exec_counter:
	.dc.l	0
emu_yield_div:
	.dc.w	0

interrupt_history_ptr:
	.dc.l	interrupt_history
interrupt_history:
	; ロングワード*2 *32個のリングバッファ
	; struct interrupt_history_st {
	;    unsigned short int_tick;
	;    unsigned short process_type;
	;    unsigned long emu_counter;
	; }
	; int_tick はその時点の interrupt_tick の値
	; reason は割り込みが発生した時にどう処理したかを示す
	; 0x00: EI状態で、正常にZ80に割り込みがかかった
	; 0x01: EIだったが、emu_counterが int_block_count に達していなかったのでスキップ
	; 0x02: DI状態のため、Z80の割り込みがスキップされた
	; emu_counterには、割り込み時の emu_counter - emu_counter_latch の値を格納

	.ds.l	2*32
interrupt_history_wr:
	.dc.w	0
interrupt_history_rd:
	.dc.w	0

	.text
*
*	void ms_cpu_emulate(emu_loop_func);
*
ms_cpu_emulate:
	link	a6,#0
	movem.l	d3-d7/a0-a5,-(sp)
	
	move.l	8(a6),emu_loop_func	* 引数1のループ関数のポインタを保存しておく

	clr.l	emu_counter
	clr.l	emu_counter_latch
	clr.w	emu_yield_div
	clr.w	interrupt_history_wr
	clr.w	interrupt_history_rd
	lea.l	registers,a3
cpu_main:
	add.l	#1,emu_counter
	move.l	cpu_emu_yield,d0
	beq	cpu_main_next
	bsr	check_yield
cpu_main_next:
	clr.w	d0			* d0 の上位ビットを０にクリア
	move.b	0(a4,d7.w),d0		* 命令を読み込む
	lea.l	instructions,a0
	movea.l	(a0,d0.w*4),a0
	move.l	#cpu_main,-(sp)		* 戻り先をスタックに積む
	jmp	(a0)

rts_common:
	rts

; cpu_yieldか emu_yieldのどちらかが0でない場合の中断処理
check_yield:
	move.w	sr,d0
	move.w	d0,-(sp)
	or.w	#%00000111_00000000,d0	* 一時的に割り込み禁止
	move.w	d0,sr

	; cpu_yieldの処理
	cmpi.w	#0,cpu_yield
	beq	do_emu_yield
	subq.w	#1,cpu_yield
	bne	do_emu_yield
	; cpu_yieldが1→0になったので、割り込み判定を行う
	cmpi.b	#1,interrupt_enable
	bmi	skip_by_di	* DIなら割り込まない
	beq	1f
	; EI = 2だった場合
	move.b	#1,interrupt_enable
	move.w	#1,cpu_yield
	bra	do_emu_yield
1:	; あらためて割り込み要求端子の値(ms_cpu_int)を見て割り込み要求があるかどうかを見る
	cmpi.b	#0,ms_cpu_int
	beq	do_emu_yield
	; emu_counter の増加量が int_block_count に達していなかったら割り込みを一回スキップ(実験)
	move.l	emu_counter,d0
	sub.l	emu_counter_latch,d0
	cmp.l	int_block_count,d0
	bgt	1f
	; Skip処理
	addq.l	#1,int_skip_counter

	move.w	#1,d0
	bsr	add_interrupt_history

	cmp.w	#0,cpu_yield	* 絶対に0のはず
	beq	check_yield_rts
	; サブルーチンを1段飛ばすために、SPをインクリメント
	lea.l	4(sp),sp
	bra	emu_end		* 強制終了

1:
	addq.l	#1,int_exec_counter
	bsr	INT
	move.w	#0,d0
	bsr	add_interrupt_history
	move.l	emu_counter,emu_counter_latch	* この時点の値を覚えておく
	bra	check_yield_rts

skip_by_di:
	move.w	#2,d0
	bsr	add_interrupt_history
	bra	do_emu_yield

	; emu_yieldの処理
do_emu_yield:
	cmpi.w	#0,emu_yield
	bne	@f
	bra	check_yield_rts
@@:	subq.w	#1,emu_yield
	beq	@f
	bra	check_yield_rts

	; emu_yieldが0になったので、C側の処理を呼び出す
@@:	cmpi.w	#0,emu_yield_div		* さらに間引きを実施
	beq	@f				* 0なら実行
	subq.w	#1,emu_yield_div
	bra	check_yield_rts
@@:	move.w	host_rate,emu_yield_div		* 1 = 2回に一回実行, 2 = 3回に1回
	subq.w	#1,emu_yield_div
	movem.l	d1-d7/a0-a6,-(sp)
	movea.l	emu_loop_func,a0
	move.l	emu_counter,d0
	sub.l	emu_counter_latch,d0
	move.l	d0,-(sp)			* カウンタ差分を引数として渡す
	move.l	d7,-(sp)			* PCを引数として渡す
	jsr	(a0)
	lea.l	8(sp),sp
	movem.l	(sp)+,d1-d7/a0-a6
	move.l	d0,d0
	bne	@f
	bra	check_yield_rts
@@:	
	; 0以外が帰ってきたのでエミュレータを終了
	move.w	(sp)+,sr
	; サブルーチンを1段飛ばすために、SPをインクリメント
	lea.l	4(sp),sp
	bra	emu_end

check_yield_rts:
	move.w	(sp)+,sr
	rts

emu_end:
	movem.l	(sp)+,d3-d7/a0-a5
	unlk	a6
	moveq.l #-1,d0
	rts
dumpsp:
	movem.l	d0-d7/a0-a6,-(sp)
	move.l	d6,-(sp)
	move.l	d4,-(sp)
	move.l	d7,-(sp)
	move.l	a4,-(sp)
	move.l	a0,-(sp)
	move.w	sp_(a3),-(sp)
	move.w	#0,-(sp)
	move.l	a3,-(sp)
	jsr	dumpsp_c
	lea	28(sp),sp
	movem.l	(sp)+,d0-d7/a0-a6
	rts

*
*	void step(ms_cpu_state* context, int count);
*
ms_cpu_step_break:
	.dc.l	0

ms_cpu_step:
	link	a6,#0
	movem.l	d3-d7/a0-a5,-(sp)
	
	move.l	8(a6),a5	* 引数1のcpu contextへのポインタを取得
	move.l  12(a6),d0	* 引数2のステップ数を取得

	move.l	d0,-(sp)

;	 31     16 15 8 7  0
;	|         |    | A  |  d4	Ａレジスタ
;	|         |    |HC1 |  d5	フラグ
;	|         |flag| SZ |  d6	フラグ
;	| PC page | PC(16k) |  d7
;	|     registers     |  a3	a3 = レジスターの格納されているアドレス
;	|    PC Base ADD    |  a4	a4 = PC
;
; struct ms_cpu_state {
;	void* pc_base_addr;
; 	uint16_t pc, sp, ix, iy;
; 	uint8_t a, b, c, d, e, h, l;
; 	uint8_t a_, b_, c_, d_, e_, h_, l_, f_;
; 	uint8_t i, r;
;
; 	uint8_t f;
;
;	uint16_t wz;					// 30,31
;
; 	uint8_t iff_delay;
; 	uint8_t interrupt_mode;  // 0: IM0, 1: IM1, 2: IM2
;
; 	uint8_t halted;	// 0: normal, 1: halted
; };

	clr.l	d4
	clr.l	d5
	clr.l	d6
	clr.l	d7
	lea.l	registers,a3
	;movea.l	(a5),a4			* PC Base ADD
	move.w	4(a5),d7		* PC(64k)
	PC_page_set			* 64kのPCをページ番号と16kのPCに分解
	move.w	6(a5),sp_(a3)		* SP
	move.w	8(a5),ix_h(a3)		* IX
	move.w	10(a5),iy_h(a3)		* IY
	move.b	12(a5),d4		* A register
	move.b	d4,a(a3)		* f5,f3の値などはメモリ上に保持。その他フラグは各種レジスタに保持
	move.b	13(a5),b(a3)		* B
	move.b	14(a5),c(a3)		* C
	move.b	15(a5),d(a3)		* D
	move.b	16(a5),e(a3)		* E
	move.b	17(a5),h(a3)		* H
	move.b	18(a5),l(a3)		* L
	move.b	19(a5),a_(a3)
	move.b	20(a5),b_(a3)
	move.b	21(a5),c_(a3)
	move.b	22(a5),d_(a3)
	move.b	23(a5),e_(a3)
	move.b	24(a5),h_(a3)
	move.b	25(a5),l_(a3)
	move.b	26(a5),f_(a3)

	move.b	27(a5),i(a3)
	move.b	28(a5),r(a3)

	; フラグのセット
	clr.l	d6			* ダーティフラグなどを一通りクリア
	clr.l	d5			* フラグ再計算情報をクリア(しなくてもいいが条件を揃えるため)
	move.b	29(a5),d6		* F

	; WZレジスタのセット
	move.w	30(a5),wz(a3)

	;
	;	d0個の命令を実行
	clr.l	ms_cpu_step_break
@@:
	move.l	(sp)+,d0
@@:	move.l	d0,-(sp)
	clr.w	d0			* d0 の上位ビットを０にクリア
	move.b	0(a4,d7.w),d0		* 命令を読み込む
	lea.l	instructions,a0
	movea.l	(a0,d0.w*4),a0
	move.l	#1f,-(sp)		* 戻り先をスタックに積む
ms_cpu_step_jmp:
	jmp	(a0)
1:					* rtsでここに戻ってくる
	;bsr	dumpsp

	move.l	(sp)+,d0
	tst.l	ms_cpu_step_break
	bne	@f
	subq.l	#1,d0
	bne	@b

@@:	
	;	実行後の結果を書き戻す
	;move.l	a4,(a5)			* PC Base ADD
	move.l	d7,d0
	lsr.l	#2,d0
	and.w	#$c000,d0
	and.w	#$3fff,d7
	or.w	d0,d7
	move.w	d7,4(a5)		* PC(64k)
	move.w	sp_(a3),6(a5)		* SP
	move.w	ix_h(a3),8(a5)		* IX
	move.w	iy_h(a3),10(a5)		* IY	
	move.b	d4,12(a5)		* A
	move.b	b(a3),13(a5)		* B
	move.b	c(a3),14(a5)		* C
	move.b	d(a3),15(a5)		* D
	move.b	e(a3),16(a5)		* E
	move.b	h(a3),17(a5)		* H
	move.b	l(a3),18(a5)		* L
	move.b	a_(a3),19(a5)
	move.b	b_(a3),20(a5)
	move.b	c_(a3),21(a5)
	move.b	d_(a3),22(a5)
	move.b	e_(a3),23(a5)
	move.b	h_(a3),24(a5)
	move.b	l_(a3),25(a5)
	move.b	f_(a3),26(a5)

	move.b	i(a3),27(a5)
	move.b	r(a3),28(a5)

	; フラグの書き戻し処理
	bsr	eval_flag_all
	move.b	d6,29(a5)

	; WZレジスタの書き戻し処理
	move.w	wz(a3),30(a5)

	movem.l	(sp)+,d3-d7/a0-a5
	unlk	a6
	moveq.l #0,d0
	rts

*
* 割り込みヒストリに情報を追記します
*	入力: d0.w		割り込みに対する対応の結果: 0: EI状態で割り込みがかかった, 1: EIだったがスキップ, 2: DI状態で割り込みがスキップ
* 	破壊: a0, d0, d1
*
add_interrupt_history:
	lea	interrupt_history,a0
	move.w	interrupt_history_wr,d1
	move.w	ms_vdp_interrupt_tick,(a0,d1.w*8)
	move.w	d0,2(a0,d1.w*8)
	move.l	emu_counter,d0
	sub.l	emu_counter_latch,d0
	move.l	d0,4(a0,d1.w*8)
	addq.w	#1,d1				* wrを一つ進める
	andi.w	#$1f,d1
	move.w	interrupt_history_rd,d0
	cmp.w	d0,d1
	bne	history_not_full
	; 履歴が一杯になったので、読み出し開始位置をずらず
	addq.w	#1,d0				※ rdを一つ進める
	andi.w	#$1f,d0
history_not_full:
	move.w	d1,interrupt_history_wr
	move.w	d0,interrupt_history_rd

	rts

	.data
	.quad

ms_instructions_ptr:
	.dc.l	instructions

instructions:
	.dc.l	nop				* $00
	.dc.l	LD_BC_nn
	.dc.l	LD_lBCl_A
	.dc.l	INC_BC
	.dc.l	INC_B
	.dc.l	DEC_B
	.dc.l	LD_B_n
	.dc.l	RLCA
	.dc.l	EX_AF_AFd			* $08
	.dc.l	ADD_HL_BC
	.dc.l	LD_A_lBCl
	.dc.l	DEC_BC
	.dc.l	INC_C
	.dc.l	DEC_C
	.dc.l	LD_C_n
	.dc.l	RRCA				* $0f

	.dc.l	DJNZ				* $10
	.dc.l	LD_DE_nn
	.dc.l	LD_lDEl_A
	.dc.l	INC_DE
	.dc.l	INC_D
	.dc.l	DEC_D
	.dc.l	LD_D_n
	.dc.l	RLA
	.dc.l	JR				* $18
	.dc.l	ADD_HL_DE
	.dc.l	LD_A_lDEl
	.dc.l	DEC_DE
	.dc.l	INC_E
	.dc.l	DEC_E
	.dc.l	LD_E_n
	.dc.l	RRA				* $1f

	.dc.l	JR_NZ				* $20
	.dc.l	LD_HL_nn
	.dc.l	LD_lnnl_HL
	.dc.l	INC_HL
	.dc.l	INC_H
	.dc.l	DEC_H
	.dc.l	LD_H_n
	.dc.l	DAA
	.dc.l	JR_Z				* $28
	.dc.l	ADD_HL_HL
	.dc.l	LD_HL_lnnl
	.dc.l	DEC_HL
	.dc.l	INC_L
	.dc.l	DEC_L
	.dc.l	LD_L_n
	.dc.l	CPL				* $2f

	.dc.l	JR_NC				* $30
	.dc.l	LD_SP_nn
	.dc.l	LD_lnnl_A
	.dc.l	INC_SP
	.dc.l	INC_lHLl
	.dc.l	DEC_lHLl
	.dc.l	LD_lHLl_n
	.dc.l	SCF
	.dc.l	JR_C				* $38
	.dc.l	ADD_HL_SP
	.dc.l	LD_A_lnnl
	.dc.l	DEC_SP
	.dc.l	INC_A
	.dc.l	DEC_A
	.dc.l	LD_A_n
	.dc.l	CCF				* $3f

	.dc.l	LD_B_B				* 0
	.dc.l	LD_B_C
	.dc.l	LD_B_D
	.dc.l	LD_B_E
	.dc.l	LD_B_H
	.dc.l	LD_B_L
	.dc.l	LD_B_lHLl
	.dc.l	LD_B_A
	.dc.l	LD_C_B				* $08
	.dc.l	LD_C_C
	.dc.l	LD_C_D
	.dc.l	LD_C_E
	.dc.l	LD_C_H
	.dc.l	LD_C_L
	.dc.l	LD_C_lHLl
	.dc.l	LD_C_A				* $0f

	.dc.l	LD_D_B				* $50
	.dc.l	LD_D_C
	.dc.l	LD_D_D
	.dc.l	LD_D_E
	.dc.l	LD_D_H
	.dc.l	LD_D_L
	.dc.l	LD_D_lHLl
	.dc.l	LD_D_A
	.dc.l	LD_E_B				* $58
	.dc.l	LD_E_C
	.dc.l	LD_E_D
	.dc.l	LD_E_E
	.dc.l	LD_E_H
	.dc.l	LD_E_L
	.dc.l	LD_E_lHLl
	.dc.l	LD_E_A				* $5f

	.dc.l	LD_H_B				* $60
	.dc.l	LD_H_C
	.dc.l	LD_H_D
	.dc.l	LD_H_E
	.dc.l	LD_H_H
	.dc.l	LD_H_L
	.dc.l	LD_H_lHLl
	.dc.l	LD_H_A
	.dc.l	LD_L_B				* $68
	.dc.l	LD_L_C
	.dc.l	LD_L_D
	.dc.l	LD_L_E
	.dc.l	LD_L_H
	.dc.l	LD_L_L
	.dc.l	LD_L_lHLl
	.dc.l	LD_L_A				* $6f

	.dc.l	LD_lHLl_B			* $70
	.dc.l	LD_lHLl_C
	.dc.l	LD_lHLl_D
	.dc.l	LD_lHLl_E
	.dc.l	LD_lHLl_H
	.dc.l	LD_lHLl_L
	.dc.l	HALT
	.dc.l	LD_lHLl_A
	.dc.l	LD_A_B				* $78
	.dc.l	LD_A_C
	.dc.l	LD_A_D
	.dc.l	LD_A_E
	.dc.l	LD_A_H
	.dc.l	LD_A_L
	.dc.l	LD_A_lHLl
	.dc.l	LD_A_A				* $7f

	.dc.l	ADD_A_B				* $80
	.dc.l	ADD_A_C
	.dc.l	ADD_A_D
	.dc.l	ADD_A_E
	.dc.l	ADD_A_H
	.dc.l	ADD_A_L
	.dc.l	ADD_A_lHLl
	.dc.l	ADD_A_A
	.dc.l	ADC_A_B				* $88
	.dc.l	ADC_A_C
	.dc.l	ADC_A_D
	.dc.l	ADC_A_E
	.dc.l	ADC_A_H
	.dc.l	ADC_A_L
	.dc.l	ADC_A_lHLl
	.dc.l	ADC_A_A				* $8f

	.dc.l	SUB_B				* $90
	.dc.l	SUB_C
	.dc.l	SUB_D
	.dc.l	SUB_E
	.dc.l	SUB_H
	.dc.l	SUB_L
	.dc.l	SUB_lHLl
	.dc.l	SUB_A
	.dc.l	SBC_A_B				* $98
	.dc.l	SBC_A_C
	.dc.l	SBC_A_D
	.dc.l	SBC_A_E
	.dc.l	SBC_A_H
	.dc.l	SBC_A_L
	.dc.l	SBC_A_lHLl
	.dc.l	SBC_A_A				* $9f

	.dc.l	AND_B				* $A0
	.dc.l	AND_C
	.dc.l	AND_D
	.dc.l	AND_E
	.dc.l	AND_H
	.dc.l	AND_L
	.dc.l	AND_lHLl
	.dc.l	AND_A
	.dc.l	XOR_B				* $A8
	.dc.l	XOR_C
	.dc.l	XOR_D
	.dc.l	XOR_E
	.dc.l	XOR_H
	.dc.l	XOR_L
	.dc.l	XOR_lHLl
	.dc.l	XOR_A				* $Af

	.dc.l	OR_B				* $B0
	.dc.l	OR_C
	.dc.l	OR_D
	.dc.l	OR_E
	.dc.l	OR_H
	.dc.l	OR_L
	.dc.l	OR_lHLl
	.dc.l	OR_A
	.dc.l	CP_B				* $B8
	.dc.l	CP_C
	.dc.l	CP_D
	.dc.l	CP_E
	.dc.l	CP_H
	.dc.l	CP_L
	.dc.l	CP_lHLl
	.dc.l	CP_A				* $Bf

	.dc.l	RET_NZ				* $C0
	.dc.l	POP_BC
	.dc.l	JP_NZ
	.dc.l	JP
	.dc.l	CALL_NZ
	.dc.l	PUSH_BC
	.dc.l	ADD_A_n
	.dc.l	RST_00H
	.dc.l	RET_Z				* $C8
	.dc.l	RET
	.dc.l	JP_Z
	.dc.l	CB				* $CB ライン命令
	.dc.l	CALL_Z
	.dc.l	CALL
	.dc.l	ADC_A_n
	.dc.l	RST_08H				* $Cf

	.dc.l	RET_NC				* $D0
	.dc.l	POP_DE
	.dc.l	JP_NC
	.dc.l	OUT_n_A
	.dc.l	CALL_NC
	.dc.l	PUSH_DE
	.dc.l	SUB_n
	.dc.l	RST_10H
	.dc.l	RET_C				* $D8
	.dc.l	EXX
	.dc.l	JP_C
	.dc.l	IN_A_n
	.dc.l	CALL_C
	.dc.l	DD				* $DD ライン命令
	.dc.l	SBC_A_n
	.dc.l	RST_18H				* $Df

	.dc.l	RET_PO				* $E0
	.dc.l	POP_HL
	.dc.l	JP_PO
	.dc.l	EX_lSPl_HL
	.dc.l	CALL_PO
	.dc.l	PUSH_HL
	.dc.l	AND_n
	.dc.l	RST_20H
	.dc.l	RET_PE				* $E8
	.dc.l	JP_lHLl
	.dc.l	JP_PE
	.dc.l	EX_DE_HL
	.dc.l	CALL_PE
	.dc.l	ED				* $ED ライン命令
	.dc.l	XOR_n
	.dc.l	RST_28H				* $Ef

	.dc.l	RET_P				* $F0
	.dc.l	POP_AF
	.dc.l	JP_P
	.dc.l	DI
	.dc.l	CALL_P
	.dc.l	PUSH_AF
	.dc.l	OR_n
	.dc.l	RST_30H
	.dc.l	RET_M				* $F8
	.dc.l	LD_SP_HL
	.dc.l	JP_M
	.dc.l	EI
	.dc.l	CALL_M
	.dc.l	FD				* $FD ライン命令
	.dc.l	CP_n
	.dc.l	RST_38H				* $ff

	.text

*	------ 割り込み処理 ------
INT:	move.b	#0,interrupt_enable	* DI に
	cmpi.b	#1,interrupt_mode	* 割り込みがかかった時の処理
	bhi	mode2
					* モード０割り込みは実現できない
mode1:	move.l	d7,d1
	swap	d7		* d7 = 00000000_000000pp
	ror.w	#2,d7		* d7 = pp000000_00000000
	or.w	d7,d1		* d1 = PC (R800)
	subq.w	#2,sp_(a3)	* PUSH	
	move.w	sp_(a3),d0
	jsr	ms_write_mem_16

	move.w	#$0038,d7
	PC_page_set
	rts

mode2:	move.l	d7,d1
	swap	d7		* d7 = 00000000_000000pp
	ror.w	#2,d7		* d7 = pp000000_00000000
	or.w	d7,d1		* d1 = PC (R800)
	subq.w	#2,sp_(a3)	* PUSH	
	move.w	sp_(a3),d0
	jsr	ms_write_mem_16

	move.b	i(a3),d0
	lsl.w	#8,d0

	jsr	ms_read_mem_16
	move.w	d0,d7
	PC_page_set
	rts


nop:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

*
*	-------- ＬＤ --------
*
*	------ ＬＤ Ａ,？ ------
LD_A_A:
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_A_B:
	move.b	b(a3),d4
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_A_C:
	move.b	c(a3),d4
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_A_D:
	move.b	d(a3),d4
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_A_E:
	move.b	e(a3),d4
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_A_H:
	move.b	h(a3),d4
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_A_L:
	move.b	l(a3),d4
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_A_lHLl:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,d4
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_A_lBCl:
	move.w	bc(a3),d0
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,d4
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_A_lDEl:
	move.w	de(a3),d0
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,d4
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_A_lnnl:
	move.b	2(a4,d7.w),d0		* nn の上位８ビットを読む 
	lsl.w	#8,d0
	move.b	1(a4,d7.w),d0		* nn の下位８ビットを読む 
	addq.w	#3,d7			* PC += 3
	btst.l	#14,d7			* PC がページ境界をまたいだか？
	bne	1f
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,d4
	rts
1:	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	bne	2f
	jsr	ms_read_mem_8		* d7 = 0 の時
	move.b	d0,d4
	rts
2:	cmpi.w	#2,d7			* d7 = 2 の時
	beq	3f
	move.b	d0,d2			* d7 = 1 の時
	move.b	(a4),d0			* nn の上位８ビットを読む
	lsl.w	#8,d0
	move.b	d2,d0
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,d4
	rts
3:	move.b	1(a4),d0		* nn の上位８ビットを読む 
	lsl.w	#8,d0
	move.b	 (a4),d0		* nn の下位８ビットを読む 
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,d4
	rts

LD_A_n:	move.b	1(a4,d7.w),d4
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7			* PC がページ境界をまたいだか？
	beq	rts_common
	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	beq	rts_common
	move.b	(a4),d4			* d7 = 1 の時
	rts

*	------ ＬＤ Ｂ,？ ------
LD_B_A:	move.b	d4,b(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_B_B:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_B_C:	move.b	c(a3),b(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_B_D:	move.b	d(a3),b(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_B_E:	move.b	e(a3),b(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_B_H:	move.b	h(a3),b(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_B_L:	move.b	l(a3),b(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_B_lHLl:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,b(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_B_n:	move.b	1(a4,d7.w),b(a3)
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7			* PC がページ境界をまたいだか？
	beq	rts_common
	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	beq	rts_common			* d7 = 0 の時
	move.b	(a4),b(a3)		* d7 = 1 の時
	rts

*	------ ＬＤ Ｃ,？ ------
LD_C_A:	move.b	d4,c(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_C_B:	move.b	b(a3),c(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_C_C:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_C_D:	move.b	d(a3),c(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_C_E:	move.b	e(a3),c(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_C_H:	move.b	h(a3),c(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_C_L:	move.b	l(a3),c(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_C_lHLl:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,c(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_C_n:	move.b	1(a4,d7.w),c(a3)
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7			* PC がページ境界をまたいだか？
	beq	rts_common
	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	beq	rts_common		* d7 = 0 の時
	move.b	(a4),c(a3)		* d7 = 1 の時
	rts

*	------ ＬＤ Ｄ,？ ------
LD_D_A:	move.b	d4,d(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_D_B:	move.b	b(a3),d(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_D_C:	move.b	c(a3),d(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_D_D:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_D_E:	move.b	e(a3),d(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_D_H:	move.b	h(a3),d(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_D_L:	move.b	l(a3),d(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_D_lHLl:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,d(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_D_n:	move.b	1(a4,d7.w),d(a3)
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7			* PC がページ境界をまたいだか？
	beq	rts_common
	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	beq	rts_common			* d7 = 0 の時
	move.b	(a4),d(a3)		* d7 = 1 の時
	rts

*	------ ＬＤ Ｅ,？ ------
LD_E_A:	move.b	d4,e(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_E_B:	move.b	b(a3),e(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_E_C:	move.b	c(a3),e(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_E_D:	move.b	d(a3),e(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_E_E:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_E_H:	move.b	h(a3),e(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_E_L:	move.b	l(a3),e(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_E_lHLl:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,e(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_E_n:	move.b	1(a4,d7.w),e(a3)
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7			* PC がページ境界をまたいだか？
	beq	rts_common
	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	beq	rts_common			* d7 = 0 の時
	move.b	(a4),e(a3)		* d7 = 1 の時
	rts

*	------ ＬＤ Ｈ,？ ------
LD_H_A:	move.b	d4,h(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_H_B:	move.b	b(a3),h(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_H_C:	move.b	c(a3),h(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_H_D:	move.b	d(a3),h(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_H_E:	move.b	e(a3),h(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_H_H:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_H_L:	move.b	l(a3),h(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_H_lHLl:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,h(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_H_n:	move.b	1(a4,d7.w),h(a3)
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7			* PC がページ境界をまたいだか？
	beq	rts_common
	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	beq	rts_common			* d7 = 0 の時
	move.b	(a4),h(a3)		* d7 = 1 の時
	rts

*	------ ＬＤ Ｌ,？ ------
LD_L_A:	move.b	d4,l(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_L_B:	move.b	b(a3),l(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_L_C:	move.b	c(a3),l(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_L_D:	move.b	d(a3),l(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_L_E:	move.b	e(a3),l(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_L_H:	move.b	h(a3),l(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_L_L:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_L_lHLl:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,l(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_L_n:	move.b	1(a4,d7.w),l(a3)
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7			* PC がページ境界をまたいだか？
	beq	rts_common
	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	beq	rts_common			* d7 = 0 の時
	move.b	(a4),l(a3)		* d7 = 1 の時
	rts


*	------ ＬＤ （ＨＬ）,？
LD_lHLl_A:
	move.w	hl(a3),d0
	move.b	d4,d1
	jsr	ms_write_mem_8
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_lHLl_B:
	move.w	hl(a3),d0
	move.b	b(a3),d1
	jsr	ms_write_mem_8
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_lHLl_C:
	move.w	hl(a3),d0
	move.b	c(a3),d1
	jsr	ms_write_mem_8
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_lHLl_D:
	move.w	hl(a3),d0
	move.b	d(a3),d1
	jsr	ms_write_mem_8
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_lHLl_E:
	move.w	hl(a3),d0
	move.b	e(a3),d1
	jsr	ms_write_mem_8
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_lHLl_H:
	move.w	hl(a3),d0
	move.b	h(a3),d1
	jsr	ms_write_mem_8
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_lHLl_L:
	move.w	hl(a3),d0
	move.b	l(a3),d1
	jsr	ms_write_mem_8
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_lHLl_n:
	move.w	hl(a3),d0
	move.b	1(a4,d7.w),d1
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7			* PC がページ境界をまたいだか？
	bne	1f
	jsr	ms_write_mem_8
	rts
1:	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	beq	2f
	move.b	(a4),d1			* d7 = 1 の時
2:	jsr	ms_write_mem_8
	rts
LD_lBCl_A:
	move.w	bc(a3),d0
	move.b	d4,d1
	jsr	ms_write_mem_8
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_lDEl_A:
	move.w	de(a3),d0
	move.b	d4,d1
	jsr	ms_write_mem_8
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_lnnl_A:
	move.b	d4,d1
	move.b	2(a4,d7.w),d0		* nn の上位８ビットを読む 
	lsl.w	#8,d0
	move.b	1(a4,d7.w),d0		* nn の下位８ビットを読む 
	addq.w	#3,d7
	btst.l	#14,d7
	bne	1f
	jsr	ms_write_mem_8
	rts
1:	PC_page_inc			* 命令がページ境界をまたぐ時
	andi.w	#$3fff,d7
	bne	2f
	jsr	ms_write_mem_8		* d7 = 0 の時
	rts
2:	cmpi.w	#2,d7			
	beq	3f
	move.b	d0,d2			* d7 = 1 の時
	move.b	(a4),d0			* nn の上位８ビットを読む
	lsl.w	#8,d0
	move.b	d2,d0
	jsr	ms_write_mem_8
	rts
3:	move.b	1(a4),d0		* d7 = 2 の時
	lsl.w	#8,d0
	move.b	 (a4),d0 
	jsr	ms_write_mem_8
	rts


*	------ ＬＤ ＸＸ,nn ------
LD_BC_nn:
	move.b	1(a4,d7.w),c(a3)	* nn の下位８ビットを読む 
	move.b	2(a4,d7.w),b(a3)	* nn の上位８ビットを読む 
	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	beq	rts_common			* d7 = 0 の時
	cmpi.w	#2,d1
	beq	1f
	move.b	 (a4),b(a3)		* d7 = 1 の時
	rts
1:	move.b	 (a4),c(a3)		* d7 = 2 の時 
	move.b	1(a4),b(a3)
	rts
LD_DE_nn:
	move.b	1(a4,d7.w),e(a3)	* nn の下位８ビットを読む 
	move.b	2(a4,d7.w),d(a3)	* nn の上位８ビットを読む 
	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	beq	rts_common			* d7 = 0 の時
	cmpi.w	#2,d1
	beq	1f
	move.b	 (a4),d(a3)		* d7 = 1 の時
	rts
1:	move.b	 (a4),e(a3)		* d7 = 2 の時 
	move.b	1(a4),d(a3)
	rts
LD_HL_nn:
	move.b	1(a4,d7.w),l(a3)	* nn の下位８ビットを読む 
	move.b	2(a4,d7.w),h(a3)	* nn の上位８ビットを読む 
	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	beq	rts_common			* d7 = 0 の時
	cmpi.w	#2,d1
	beq	1f
	move.b	 (a4),h(a3)		* d7 = 1 の時
	rts
1:	move.b	 (a4),l(a3)		* d7 = 2 の時 
	move.b	1(a4),h(a3)
	rts
LD_SP_nn:
	move.b	1(a4,d7.w),p(a3)	* nn の下位８ビットを読む 
	move.b	2(a4,d7.w),s(a3)	* nn の上位８ビットを読む 
	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	beq	rts_common			* d7 = 0 の時
	cmpi.w	#2,d1
	beq	1f
	move.b	 (a4),s(a3)		* d7 = 1 の時
	rts
1:	move.b	 (a4),p(a3)		* d7 = 2 の時 
	move.b	1(a4),s(a3)
	rts
LD_SP_HL:
	move.w	hl(a3),sp_(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts


*	------ ＬＤ ＨＬ,(nn) ------
LD_HL_lnnl:
	move.b	2(a4,d7.w),d0		* nn の上位８ビットを読む 
	lsl.w	#8,d0
	move.b	1(a4,d7.w),d0		* nn の下位８ビットを読む 
	addq.w	#3,d7
	btst.l	#14,d7
	bne	1f
	jsr	ms_read_mem_16
	move.w	d0,hl(a3)
	rts
1:	PC_page_inc			* 命令がページ境界をまたぐ時
	andi.w	#$3fff,d7
	bne	2f
	jsr	ms_read_mem_16		* d7 = 0 の時
	move.w	d0,hl(a3)
	rts
2:	cmpi.w	#2,d7
	beq	3f
	move.b	d0,d2			* d7 = 1 の時
	move.b	(a4),d0			* nn の上位８ビットを読む
	lsl.w	#8,d0
	move.b	d2,d0
	jsr	ms_read_mem_16
	move.w	d0,hl(a3)
	rts
3:	move.b	1(a3),d0		* d7 = 2 の時
	lsl.w	#8,d0
	move.b	 (a3),d0
	jsr	ms_read_mem_16
	move.w	d0,hl(a3)
	rts

*	------ ＬＤ (nn),ＨＬ ------
LD_lnnl_HL:
	move.w	hl(a3),d1
	move.b	2(a4,d7.w),d0		* nn の上位８ビットを読む 
	lsl.w	#8,d0
	move.b	1(a4,d7.w),d0		* nn の下位８ビットを読む 
	addq.w	#3,d7
	btst.l	#14,d7
	bne	1f
	jsr	ms_write_mem_16
	rts
1:	PC_page_inc			* 命令がページ境界をまたぐ時
	andi.w	#$3fff,d7
	bne	2f
	jsr	ms_write_mem_16		* d7 = 0 の時
	rts
2:	cmpi.w	#2,d7
	beq	3f
	move.b	d0,d2			* d7 = 1 の時
	move.b	(a4),d0			* nn の上位８ビットを読む
	lsl.w	#8,d0
	move.b	d2,d0
	jsr	ms_write_mem_16
	rts
3:	move.b	1(a3),d0		* d7 = 2 の時
	lsl.w	#8,d0
	move.b	 (a3),d0
	jsr	ms_write_mem_16
	rts


*******************************************************************
* Cから読み出すサブルーチン
*******************************************************************
_readMemFromC:
	link	a6,#0
	movem.l	d1-d7/a0-a5,-(sp)
	
	move.l	8(a6),d0	* 引数1のアドレスを取得

	lea.l	registers,a3
	jsr	ms_read_mem_8	* メモリから 8ビットのデータを読み込む

	and.l	#$ff,d0		* 上位24ビットをクリア

	movem.l	(sp)+,d1-d7/a0-a5
	unlk	a6
	rts


*------ ＡＤＤ ------
ADD_A_X macro	target
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:	; b18 : 加算なので0
	; b17 : 算術演算なので0
	; b16 : 事前キャリーなしなので0
	; b1  : 加算なのでN=0
	andi.l	#%000_11111101_11111101,d6
	ori.l	#%000_11111101_00000000,d6	* S,Z,F5,H,F3,PV,Cのダーティビットを立てる
	move.b	target,d0
	move.b	d4,d5			* 第1項
	lsl.w	#8,d5
	move.b	d0,d5			* 足す数を 第2項に
	swap	d5
	add.b	d0,d4			* 演算実行
	move.b	d4,d5			* 結果を保存
	endm

ADD_A_A:
	ADD_A_X	d4
	rts

ADD_A_B:
	ADD_A_X b(a3)
	rts

ADD_A_C:
	ADD_A_X c(a3)
	rts

ADD_A_D:
	ADD_A_X d(a3)
	rts

ADD_A_E:
	ADD_A_X e(a3)
	rts

ADD_A_H:
	ADD_A_X h(a3)
	rts

ADD_A_L:
	ADD_A_X l(a3)
	rts

ADD_A_lHLl:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	ADD_A_X d0
	rts

ADD_A_n:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	1(a4,d7.w),d0
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7			* PC がページ境界をまたいだか？
	beq	1f
	PC_page_inc
	andi.w	#$3fff,d7
	beq	1f			* d7 = 0 の時
	move.b	(a4),d0			* d7 = 1 の時
1:	; b18 : 加算なので0
	; b17 : 算術演算なので0
	; b16 : キャリーなしなので0
	; b1  : 加算なのでN=0
	andi.l	#%000_11111101_11111101,d6
	ori.l	#%000_11111101_00000000,d6	* S,Z,F5,H,F3,PV,Cのダーティビットを立てる
	move.b	d4,d5			* 第1項
	lsl.w	#8,d5
	move.b	d0,d5			* 足す数を 第2項に
	swap	d5
	add.b	d0,d4			* 演算実行
	move.b	d4,d5			* 結果を保存
	rts

; ADD HL,XX の挙動は以下の通り
; * S : 変化しない
; * Z : 変化しない
; * F5: 上位8bitの加算の結果のbit5
; * H : 上位8bitの加算の実行によるハーフキャリー
; * F3: 上位8bitの加算の結果のbit5
; * PV: 変化しない
; * N : 0
; * C : 上位8bitの加算の実行によるキャリー
ADD_HL_XX macro	target
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:	bsr	eval_flag_all
	; b18 : 加算なので0
	; b17 : 算術演算なので0
	; b16 : キャリーなしなので0
	; b1  : 加算なのでN=0
	andi.l	#%000_00000000_11000100,d6	* S,Z,PVのみ保存
	ori.l	#%000_00111001_00000000,d6	* F5,H,F3,Cのダーティビットを立てる
	move.w	hl(a3),d0
	move.w	target,d1
	add.b	d1,d0			* 下位８ビットを加算
	bcc	@f			* キャリーが発生していない場合はスキップ
	ori.l	#%001_00000000_00000000,d6	* 再計算用キャリーをセット
@@:	move.b	d0,l(a3)		* 下位８ビットを保存
	lsr.w	#8,d0
	lsr.w	#8,d1
	move.b	d0,d5			* 第1項
	lsl.w	#8,d5
	move.b	d1,d5			* 足す数を 第2項に
	swap	d5
	and.b	#%11101111,ccr		* Xフラグをクリア
	btst	#16,d6
	beq	1f
	or.b	#%00010000,ccr		* Xフラグをセット
1:	addx.b	d1,d0			* 演算実行
	move.b	d0,d5			* 結果を保存
	move.b	d0,h(a3)		* 上位８ビットを保存
	endm

ADD_HL_BC:
	ADD_HL_XX bc(a3)
	rts

ADD_HL_DE:
	ADD_HL_XX de(a3)
	rts

ADD_HL_HL:
	ADD_HL_XX hl(a3)
	rts

ADD_HL_SP:
	ADD_HL_XX sp_(a3)
	rts


*	------ ＡＤＣ ------
ADC_A_X macro	target, fallback
	bsr	eval_flag_HC_C		* HC,C フラグを再評価
	btst.l	#0,d6
	beq	fallback		* Cy が０の時 ADD と同じ
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:	; b18 : 加算なので0
	; b17 : 算術演算なので0
	; b16 : 事前キャリーありなので1
	; b1  : 加算なのでN=0
	andi.l	#%000_11111101_11111101,d6
	ori.l	#%001_11111101_00000000,d6	* S,Z,F5,H,F3,PV,Cのダーティビットを立てる
	move.b	target,d0
	move.b	d4,d5			* 第1項
	lsl.w	#8,d5
	move.b	d0,d5			* 足す数を 第2項に
	swap	d5
	or.b	#%00010000,ccr		* Xフラグをセット
	addx.b	d0,d4			* 演算実行
	move.b	d4,d5			* 結果を保存
	endm

ADC_A_A:
	ADC_A_X	d4, ADD_A_A
	rts

ADC_A_B:
	ADC_A_X	b(a3), ADD_A_B
	rts

ADC_A_C:
	ADC_A_X	c(a3), ADD_A_C
	rts

ADC_A_D:
	ADC_A_X	d(a3), ADD_A_D
	rts

ADC_A_E:
	ADC_A_X	e(a3), ADD_A_E
	rts

ADC_A_H:
	ADC_A_X	h(a3), ADD_A_H
	rts

ADC_A_L:
	ADC_A_X	l(a3), ADD_A_L
	rts

ADC_A_lHLl:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	ADC_A_X	d0, ADD_A_lHLl
	rts

ADC_A_n:
	bsr	eval_flag_HC_C		* HC,C フラグを再評価
	btst.l	#0,d6
	beq	ADD_A_n			* Cy が０の時 ADD と同じ
	move.b	1(a4,d7.w),d0
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7			* PC がページ境界をまたいだか？
	beq	1f
	PC_page_inc
	andi.w	#$3fff,d7
	beq	1f
	move.b	(a4),d0
1:	; b18 : 加算なので0
	; b17 : 算術演算なので0
	; b16 : 事前キャリーありなので1
	; b1  : 加算なのでN=0
	andi.l	#%000_11111101_11111101,d6
	ori.l	#%001_11111101_00000000,d6	* S,Z,F5,H,F3,PV,Cのダーティビットを立てる
	move.b	d4,d5			* 第1項
	lsl.w	#8,d5
	move.b	d0,d5			* 足す数を 第2項に
	swap	d5
	or.b	#%00010000,ccr		* Xフラグをセット
	addx.b	d0,d4			* 演算実行
	move.b	d4,d5			* 結果を保存
	rts

*	------ ＳＵＢ ------
SUB_A_X macro	target
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:	; b18 : 減算なので1
	; b17 : 算術演算なので0
	; b16 : 事前キャリーなしなので0
	; b1  : 減算なのでN=1
	andi.l	#%000_11111101_11111101,d6
	ori.l	#%100_11111101_00000010,d6	* S,Z,F5,H,F3,PV,Cのダーティビットを立てる
	move.b	target,d0
	move.b	d4,d5			* 第1項
	lsl.w	#8,d5
	move.b	d0,d5			* 引く数を 第2項に
	swap	d5
	sub.b	d0,d4			* 演算実行
	move.b	d4,d5			* 結果を保存
	endm

SUB_A:	SUB_A_X	d4
	rts

SUB_B:	SUB_A_X	b(a3)
	rts

SUB_C:	SUB_A_X	c(a3)
	rts

SUB_D:	SUB_A_X	d(a3)
	rts

SUB_E:	SUB_A_X	e(a3)
	rts

SUB_H:	SUB_A_X	h(a3)
	rts

SUB_L:	SUB_A_X	l(a3)
	rts

SUB_lHLl:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	SUB_A_X	d0
	rts

SUB_n:
	move.b	1(a4,d7.w),d0
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7			* PC がページ境界をまたいだか？
	beq	1f
	PC_page_inc
	andi.w	#$3fff,d7
	beq	1f
	move.b	(a4),d0			* d7 = 1 の時
1:	; b18 : 減算なので1
	; b17 : 算術演算なので0
	; b16 : 事前キャリーありなので1
	; b1  : 減算なのでN=1
	andi.l	#%000_11111101_11111101,d6	* 加算なのでN=0
	ori.l	#%101_11111101_00000010,d6	* S,Z,F5,H,F3,PV,Cのダーティビットを立てる
	move.b	d4,d5			* 第1項
	lsl.w	#8,d5
	move.b	d0,d5			* 引く数を 第2項に
	swap	d5
	sub.b	d0,d4			* 演算実行
	move.b	d4,d5			* 結果を保存
	rts

*	------ ＳＢＣ ------
SBC_A_X macro	target, fallback
	bsr	eval_flag_HC_C		* HC,C フラグを再評価
	btst.l	#0,d6
	beq	fallback		* Cy が０の時 SUB と同じ
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:	; b18 : 減算なので1
	; b17 : 算術演算なので0
	; b16 : 事前キャリーありなので1
	; b1  : 減算なのでN=1
	andi.l	#%000_11111101_11111101,d6
	ori.l	#%101_11111101_00000010,d6	* S,Z,F5,H,F3,PV,Cのダーティビットを立てる。
	move.b	target,d0
	move.b	d4,d5			* 第1項
	lsl.w	#8,d5
	move.b	d0,d5			* 引く数を 第2項に
	swap	d5
	or.b	#%00010000,ccr		* Xフラグをセット
	subx.b	d0,d4			* 演算実行
	move.b	d4,d5			* 結果を保存
	endm

SBC_A_A:
	SBC_A_X	d4, SUB_A
	rts

SBC_A_B:
	SBC_A_X	b(a3), SUB_B
	rts

SBC_A_C:
	SBC_A_X	c(a3), SUB_C
	rts

SBC_A_D:
	SBC_A_X	d(a3), SUB_D
	rts

SBC_A_E:
	SBC_A_X	e(a3), SUB_E
	rts

SBC_A_H:
	SBC_A_X	h(a3), SUB_H
	rts

SBC_A_L:
	SBC_A_X	l(a3), SUB_L
	rts

SBC_A_lHLl:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	SBC_A_X	d0, SUB_lHLl
	rts

SBC_A_n:
	bsr	eval_flag_HC_C		* HC,C フラグを再評価
	btst.l	#0,d6
	beq	SUB_n			* Cy が０の時 SUB と同じ
	move.b	1(a4,d7.w),d0
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7
	beq	1f
	PC_page_inc
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	beq	1f
	move.b	(a4),d0			* d7 = 1 の時
1:	; b18 : 減算なので1
	; b17 : 算術演算なので0
	; b16 : 事前キャリーありなので1
	; b1  : 減算なのでN=1
	andi.l	#%000_11111101_11111101,d6
	ori.l	#%101_11111101_00000010,d6	* S,Z,F5,H,F3,PV,Cのダーティビットを立てる
	move.b	d4,d5			* 第1項
	lsl.w	#8,d5
	move.b	d0,d5			* 引く数を 第2項に
	swap	d5
	or.b	#%00010000,ccr		* Xフラグをセット
	subx.b	d0,d4			* 演算実行
	move.b	d4,d5			* 結果を保存
	rts


*	------ ＡＮＤ ------
AND_X	macro	target
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:	; b18 : Don't care
	; b17 : 論理演算なので1
	; b16 : Don't care
	; b4  : AND演算時はH=1固定
	; b1  : 論理演算時はN=0
	; b0  : AND演算時はC=0固定
	andi.l	#%000_11101100_11101100,d6
	ori.l	#%010_11101100_00010000,d6	* S,Z,F5,F3,PV,Cのダーティビットを立てる
	move.b	target,d0
	move.b	d4,d5			* 第1項
	lsl.w	#8,d5
	move.b	d0,d5			* 演算対象を 第2項に
	swap	d5
	and.b	d0,d4			* 演算実行
	move.b	d4,d5			* 結果を保存
	endm

AND_A:	AND_X	d4
	rts

AND_B:	AND_X	b(a3)
	rts

AND_C:	AND_X	c(a3)
	rts

AND_D:	AND_X	d(a3)
	rts

AND_E:	AND_X	e(a3)
	rts

AND_H:	AND_X	h(a3)
	rts

AND_L:	AND_X	l(a3)
	rts

AND_lHLl:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	AND_X	d0
	rts

AND_n:	move.b	1(a4,d7.w),d0
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7			* PC がページ境界をまたいだか？
	beq	1f
	PC_page_inc
	andi.w	#$3fff,d7
	beq	1f
	move.b	(a4),d0
1:	; b18 : Don't care
	; b17 : 論理演算なので1
	; b16 : Don't care
	; b4  : AND演算時はH=1固定
	; b1  : 論理演算時はN=0
	; b0  : AND演算時はC=0固定
	andi.l	#%000_11101100_11101100,d6
	ori.l	#%010_11101100_00010000,d6	* S,Z,F5,F3,PV,Cのダーティビットを立てる
	move.b	d4,d5			* 第1項
	lsl.w	#8,d5
	move.b	d0,d5			* 演算対象を 第2項に
	swap	d5
	and.b	d0,d4			* 演算実行
	move.b	d4,d5			* 結果を保存
	rts

*	------ ＸＯＲ ------
_OR_X	macro	opname, target
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:	; b18 : Don't care
	; b17 : 論理演算なので1
	; b16 : Don't care
	; b4  : OR/XOR演算時はH=0固定
	; b1  : 論理演算時はN=0
	; b0  : AND演算時はC=0固定
	andi.l	#%000_11101100_11101100,d6
	ori.l	#%010_11101100_00000000,d6	* S,Z,F5,F3,PV,Cのダーティビットを立てる
	move.b	target,d0
	move.b	d4,d5			* 第1項
	lsl.w	#8,d5
	move.b	d0,d5			* 演算対象を 第2項に
	swap	d5
	opname.b	d0,d4			* 演算実行
	move.b	d4,d5			* 結果を保存
	endm

_OR_n	macro	opname
	move.b	1(a4,d7.w),d0
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7		* PC がページ境界をまたいだか？
	beq	1f
	PC_page_inc
	andi.w	#$3fff,d7
	beq	1f
	move.b	(a4),d0
1:	; b18 : Don't care
	; b17 : 論理演算なので1
	; b16 : Don't care
	; b4  : OR/XOR演算時はH=0固定
	; b1  : 論理演算時はN=0
	; b0  : AND演算時はC=0固定
	andi.l	#%000_11101100_11101100,d6
	ori.l	#%010_11101100_00000000,d6	* S,Z,F5,F3,PV,Cのダーティビットを立てる
	move.b	d4,d5			* 第1項
	lsl.w	#8,d5
	move.b	d0,d5			* 演算対象を 第2項に
	swap	d5
	opname.b	d0,d4			* 演算実行
	endm

XOR_A:	_OR_X	eor, d4
	rts	

XOR_B:	_OR_X	eor, b(a3)
	rts

XOR_C:	_OR_X	eor, c(a3)
	rts

XOR_D:	_OR_X	eor, d(a3)
	rts

XOR_E:	_OR_X	eor, e(a3)
	rts

XOR_H:	_OR_X	eor, h(a3)
	rts

XOR_L:	_OR_X	eor, l(a3)
	rts

XOR_lHLl:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	_OR_X	eor, d0
	rts

XOR_n:	_OR_n	eor
	rts

*	------ ＯＲ ------
OR_A:	_OR_X	or, d4
	rts

OR_B:	_OR_X	or, b(a3)
	rts

OR_C:	_OR_X	or, c(a3)
	rts

OR_D:	_OR_X	or, d(a3)
	rts

OR_E:	_OR_X	or, e(a3)
	rts

OR_H:	_OR_X	or, h(a3)
	rts

OR_L:	_OR_X	or, l(a3)
	rts

OR_lHLl:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	_OR_X	or, d0
	rts

OR_n:	_OR_n	or
	rts

*	------ ＣＰ ------
CP_A_X	macro	target
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:	; b18 : 減算なので1
	; b17 : 算術演算なので0
	; b16 : 事前キャリーなしなので0
	; b1  : 減算なのでN=1
	andi.l	#%000_11111101_11111101,d6
	ori.l	#%100_11111101_00000010,d6	* S,Z,F5,H,F3,PV,Cのダーティビットを立てる
	move.b	target,d0
	move.b	d4,d5			* 第1項
	lsl.w	#8,d5
	move.b	d0,d5			* 引く数を 第2項に
	swap	d5
	move.b	d4,d5			* Aレジスタをd5にコピー
	sub.b	d0,d5			* 比較(減算)演算の結果をd5のみに反映(Aレジスタ(d4)は破壊されない)
	endm

CP_A:	CP_A_X	d4
	rts

CP_B:	CP_A_X	b(a3)
	rts

CP_C:	CP_A_X	c(a3)
	rts

CP_D:	CP_A_X	d(a3)
	rts

CP_E:	CP_A_X	e(a3)
	rts

CP_H:	CP_A_X	h(a3)
	rts

CP_L:	CP_A_X	l(a3)
	rts

CP_lHLl:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	CP_A_X	d0
	rts

CP_n:	move.b	1(a4,d7.w),d0
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7			* PC がページ境界をまたいだか？
	beq	1f
	PC_page_inc
	andi.w	#$3fff,d7
	beq	1f
	move.b	(a4),d0
1:	; b18 : 減算なので1
	; b17 : 算術演算なので0
	; b16 : 事前キャリーなしなので0
	; b1  : 減算なのでN=1
	andi.l	#%000_11111101_11111101,d6
	ori.l	#%100_11111101_00000010,d6	* S,Z,F5,H,F3,PV,Cのダーティビットを立てる
	move.b	d4,d5			* 第1項
	lsl.w	#8,d5
	move.b	d0,d5			* 引く数を 第2項に
	swap	d5
	move.b	d4,d5			* Aレジスタをd5にコピー
	sub.b	d0,d5			* 比較(減算)演算の結果をd5のみに反映(Aレジスタ(d4)は破壊されない)
	rts

*	------ ＩＮＣ ------
INC_X	macro	target
	bsr	eval_flag_HC_C		* incでCフラグは変化しないので、この時点のHC,C フラグを再評価
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:	; b18 : 加算なので0
	; b17 : 算術演算なので0
	; b16 : 事前キャリーなしなので0
	; b1  : 加算なのでN=0
	andi.l	#%000_11111100_11111101,d6	* Cのダーティビットをクリア(再評価したのでクリアされているはず)
	ori.l	#%000_11111100_00000000,d6	* S,Z,F5,H,F3,PVのダーティビットを立てる
	move.b	target,d0
	move.b	d0,d5			* 第1項がターゲットの値
	lsl.w	#8,d5
	move.b	#1,d5			* 足す数=1を 第2項に
	swap	d5
	addq.b	#1,d0			* 演算実行
	move.b	d0,d5			* 結果を保存
	move.b	d0,target		* 結果を反映
	endm

INC_A:	INC_X	d4
	rts

INC_B:	INC_X	b(a3)
	rts

INC_C:	INC_X	c(a3)
	rts

INC_D:	INC_X	d(a3)
	rts

INC_E:	INC_X	e(a3)
	rts

INC_H:	INC_X	h(a3)
	rts

INC_L:	INC_X	l(a3)
	rts

INC_lHLl:
	move.w	hl(a3),d0		* d0にHLの値をロード
	jsr	ms_read_mem_8
	INC_X	d0			* D0 には (HL)の値が入っている
	move.b	d0,d1			* インクリメントした結果が d0に入っているので d1 に退避
	move.w	hl(a3),d0		* d0 には HL の値が入っている
	jsr	ms_write_mem_8		* (HL) に結果を書き込む
	rts

INC_XX	macro	target
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:	addq.w	#1,target
	endm

INC_BC:	INC_XX	bc(a3)
	rts

INC_DE:	INC_XX	de(a3)
	rts

INC_HL:	INC_XX	hl(a3)
	rts

INC_SP:	INC_XX	sp_(a3)
	rts

*	------ ＤＥＣ ------
DEC_X	macro	target
	bsr	eval_flag_HC_C		* incでCフラグは変化しないので、この時点のHC,C フラグを再評価
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:	; b18 : 減算なので1
	; b17 : 算術演算なので0
	; b16 : 事前キャリーなしなので0
	; b1  : 減算なのでN=1
	andi.l	#%000_11111100_11111101,d6	* Cのダーティビットをクリア(再評価したのでクリアされているはず)
	ori.l	#%100_11111100_00000010,d6	* S,Z,F5,H,F3,PVのダーティビットを立てる
	move.b	target,d0
	move.b	d0,d5			* 第1項がターゲットの値
	lsl.w	#8,d5
	move.b	#1,d5			* 引く数=1を 第2項に
	swap	d5
	subq.b	#1,d0			* 演算実行
	move.b	d0,d5			* 結果を保存
	move.b	d0,target		* 結果を反映
	endm

DEC_A:	DEC_X	d4
	rts

DEC_B:	DEC_X	b(a3)
	rts

DEC_C:	DEC_X	c(a3)
	rts

DEC_D:	DEC_X	d(a3)
	rts

DEC_E:	DEC_X	e(a3)
	rts

DEC_H:	DEC_X	h(a3)
	rts

DEC_L:	DEC_X	l(a3)
	rts

DEC_lHLl:
	move.w	hl(a3),d0		* d0にHLの値をロード
	jsr	ms_read_mem_8
	DEC_X	d0			* d0 には (HL)の値が入っている
	move.b	d0,d1			* デクリメントした結果が d0に入っているので d1 に退避
	move.w	hl(a3),d0		* d0 には HL の値が入っている
	jsr	ms_write_mem_8		* (HL) に結果を書き込む
	rts

DEC_XX	macro	target
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:	subq.w	#1,target
	endm

DEC_BC:	DEC_XX	bc(a3)
	rts

DEC_DE:	DEC_XX	de(a3)
	rts

DEC_HL:	DEC_XX	hl(a3)
	rts

DEC_SP:	DEC_XX	sp_(a3)
	rts


*	DAAの仕様は http://z80-heaven.wikidot.com/instructions-set:daa を参照
*	これによると以下の動きをするらしい：
*	* 直前の演算が加算の時(N=0の時):
*	  1. 下位4ビットに9より大きな値(0xa-f)が入っているか、Hフラグが1の時、0x06を加算する
*	  2. 上位4ビットに9より大きな値(0xa-f)が入っているか、Cフラグが1の時、0x60を加算する
*	* 直前の演算が減算の時(N=1の時):
*	  1. 下位4ビットに9より大きな値(0xa-f)が入っているか、Hフラグが1の時、0x06を減算する
*	  2. 上位4ビットに9より大きな値(0xa-f)が入っているか、Cフラグが1の時、0x60を減算する
*
*	● フラグ変化:
*	* S : 結果のAレジスタが、正なら0、負なら1
*	* Z : 結果のAレジスタが、0なら1、それ以外なら0
*	* F5: 結果のAレジスタの、bit5
*	* H : (ちょっと複雑なので後述)
*	* F3: 結果のAレジスタの、bit3
*	* PV: 結果のAレジスタの、パリティが偶数なら1、奇数なら0)
*	* N : 変化しない
*	* C : 2の操作(0x60の加算or減算)が発生したら1、それ以外なら0
*
*	● Hフラグ変化:
*	DAA後のHフラグは、直前の演算が加算の時(N=0の時)と、減算の時(N=1の時)で異なる。
*	* 加算の時:
*	  補正前に下位4ビットに9より大きな値(0xa-f)が入っていた場合に H フラグがセットされる
*	  →これはBCDの補正処理(+6)によって、下位4ビットが一周する(キャリーが発生する)ことを意味する
*	* 減算の時:
*	  補正前に下位4ビットに6より小さい値(0x0-5)が入っていた場合かつ、Hフラグが立っていた時に H フラグがセットされる
*	  →これはBCDの補正処理(-6)によって、下位4ビットが一周する(キャリーが発生する)ことを意味する
*
*	なので、全体をまとめると、以下のように実装すればいいことになる
*	1. 補正係数を correct = 0とする
*	2. 下位4ビットに9より大きな値(0xa-f)が入っているか、Hフラグが1の時、correct に 0x06 を加算する
*	3. 上位4ビットに9より大きな値(0xa-f)が入っているか、Cフラグが1の時、correct に 0x60 を加算する
*	4. Nフラグを見て、Aレジスタにcorrectを加算 or 減算する(N=0なら加算、N=1なら減算)
*       5. S,Z,F5,H,F3 は、Aレジスタとcorrectの ADD または SUB の結果と同じになる
*       6. PVは演算結果のパリティになる
*       7. Cは上位4ビットの補正があった場合に1、それ以外は0になる
*
*	------ ＤＡＡ ------
DAA:	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:	bsr	eval_flag_HC_C		* HC,C フラグを再評価
	clr.b	d0			* 補正係数を 0 に初期化
	move.b	d4,d1
	andi.b	#$0f,d1			* 下位4ビットを取り出す
	cmpi.b	#$0a,d1			* 下位4ビットが10以上か？
	ble	1f			* 10未満の時
	add.b	#$06,d0			* 下位4ビットが10以上の時、補正係数に 0x06 を加算
1:	move.b	d4,d1
	andi.b	#$f0,d1			* 上位4ビットを取り出す
	cmpi.b	#$a0,d1			* 上位4ビットが10以上か？
	ble	1f			* 10未満の時
	add.b	#$60,d0			* 上位4ビットが10以上の時、補正係数に 0x60 を加算
1:	move.b	d4,d5			* Aレジスタの値を第1項に
	lsl.w	#8,d5
	move.b	d0,d5			* 補正係数を第2項に
	swap	d5
	btst.l	#1,d6			* N フラグを調べる
	bne	1f
	; b18 : 加算なので0
	; b17 : 算術演算なので0
	; b16 : 事前キャリーなしなので0
	; b1  : 加算なのでN=0(もともと0なのでそのままにしておけばOK)
	andi.l	#%000_11111000_11111010,d6	* PV,Cはこの場で計算するので、0初期化しダーティビットもクリア
	ori.l	#%000_11111000_00000000,d6	* S,Z,F5,H,F3のダーティビットを立てる
	add.b	d0,d4				* 補正係数を加算
	bra	2f
1:	; b18 : 減算なので1
	; b17 : 算術演算なので0
	; b16 : 事前キャリーなしなので0
	; b1  : 減算なのでN=1(もともと1なのでそのままにしておけばOK)
	andi.l	#%000_11111000_11111010,d6	* PV,Cはこの場で計算するので、0初期化しダーティビットもクリア
	ori.l	#%100_11111000_00000000,d6	* S,Z,F5,H,F3,PVのダーティビットを立てる
	sub.b	d0,d4			* 補正係数を減算
2:	move.b	d4,d5			* 結果を保存
	; 上位4ビットの補正があった場合はキャリーをセットする
	andi.b	#$f0,d0
	beq	1f
	ori.b	#%00000001,d6		* C フラグをセット
1:	; パリティをこの場で計算
	move.b	d4,d0
	move.b  d0,d1
	lsr.b	#4,d1
	eor.b	d1,d0
	move.b	d0,d1
	lsr.b	#2,d1
	eor.b	d1,d0
	move.b	d0,d1
	lsr.b	#1,d1
	eor.b	d1,d0
	btst	#0,d0
	bne	@f		; パリティーが奇数ならPVフラグは0なので何もしない(感覚と逆なので注意)
	ori.b	#%00000100,d6	; パリティーが偶数ならPVフラグをセット
@@:	rts


*	------ ＪＰ ------
JP:	move.b	2(a4,d7.w),d0		* nn の上位８ビットを読む 
	lsl.w	#8,d0
	move.b	1(a4,d7.w),d0		* nn の下位８ビットを読む 
	cmpi.w	#$3ffe,d7
	bcc	@f
	move.w	d0,d7
	PC_page_set
	rts
@@:	bne	9f			* ページ境界をまたいだ時
	PC_page_inc			* d7 = $3ffe の時
	move.b	(a4),d7			* nn の上位８ビットを読む
	lsl.w	#8,d7
	move.b	d0,d7
	PC_page_set
	rts
9:	PC_page_inc			* d7 = $3fff の時
	move.b	1(a4),d7
	lsl.w	#8,d7
	move.b	 (a4),d7
	PC_page_set
	rts

JP_lHLl:
	move.w	hl(a3),d7
	PC_page_set
	rts

JP_C:	bsr	eval_flag_HC_C	* HC,C フラグを再評価
	btst.l	#0,d6		* Cフラグをテスト
	bne	JP		* Cが１ならジャンプ
	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc		* 命令がページ境界をまたいだ時
	rts

JP_NC:	bsr	eval_flag_HC_C	* HC,C フラグを再評価
	btst.l	#0,d6		* Cフラグをテスト
	beq	JP		* Cが０ならジャンプ
	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc		* 命令がページ境界をまたいだ時
	rts

JP_Z:	bsr	eval_flag_SZ	* SZ フラグを再評価
	btst.l	#6,d6		* Zフラグをテスト
	bne	JP		* Zが1ならジャンプ
	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc		* 命令がページ境界をまたいだ時
	rts

JP_NZ:	bsr	eval_flag_SZ	* SZ フラグを再評価
	btst.l	#6,d6		* Zフラグをテスト
	beq	JP		* Zが0ならジャンプ
	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc		* 命令がページ境界をまたいだ時
	rts

JP_PE:	bsr	eval_flag_PV_N	* PV フラグを再評価
	btst.l	#2,d6		* PVフラグをテスト
	bne	JP		* PVが偶数(=1)ならジャンプ
	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc		* 命令がページ境界をまたいだ時
	rts

JP_PO:	bsr	eval_flag_PV_N	* PV フラグを再評価
	btst.l	#2,d6		* PVフラグをテスト
	beq	JP		* PVが奇数(=0)ならジャンプ
	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc		* 命令がページ境界をまたいだ時
	rts

JP_P:	bsr	eval_flag_SZ	* SZ フラグを再評価
	btst.l	#7,d6		* Sフラグをテスト
	beq	JP		* Sが0ならジャンプ
	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc		* 命令がページ境界をまたいだ時
	rts

JP_M:	bsr	eval_flag_SZ	* SZ フラグを再評価
	btst.l	#7,d6		* Sフラグをテスト
	bne	JP		* Sが1ならジャンプ
	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc		* 命令がページ境界をまたいだ時
	rts

*	------ ＪＲ ------
JR:	cmpi.w	#$3fff,d7
	beq	9f
	move.b	1(a4,d7.w),d1		* 相対移動量を読み込む
	ext.w	d1			* ワードに符号拡張
	move.l	d7,d0
	lsr.l	#2,d0			* d0 = pp00????_????????
	andi.w	#%11000000_00000000,d0	* d0 = pp000000_00000000
	or.w	d0,d7			* d7 = PC (R800)
	addq.w	#2,d7			* d7 = 次の命令の位置
	add.w	d1,d7			* 足し算
	PC_page_set
	rts
9:	PC_page_inc			* d7 = $3fff の時
	move.b	(a4),d1			* 相対移動量を読み込む
	ext.w	d1			* ワードに符号拡張
	lsr.l	#2,d7			* d0 = pp001111_11111111
	andi.w	#%11000000_00000001,d7	* d7 = pp000000_00000001 (次の命令の位置)
	add.w	d1,d7			* 足し算
	PC_page_set
	rts

JR_NZ:	bsr	eval_flag_SZ	* SZ フラグを再評価
	btst.l	#6,d6		* Zフラグをテスト
	beq	JR		* Zが0ならジャンプ
	addq.w	#2,d7
	btst.l	#14,d7		* PC がページ境界をまたいだか？
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc		* 命令がページ境界をまたいだ時
	rts

JR_Z:	bsr	eval_flag_SZ	* SZ フラグを再評価
	btst.l	#6,d6		* Zフラグをテスト
	bne	JR		* Zが1ならジャンプ
	addq.w	#2,d7
	btst.l	#14,d7		* PC がページ境界をまたいだか？
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc		* 命令がページ境界をまたいだ時
	rts

JR_NC:	bsr	eval_flag_HC_C	* HC,C フラグを再評価
	btst.l	#0,d6		* Cフラグをテスト
	beq	JR		* Cが０ならジャンプ
	addq.w	#2,d7
	btst.l	#14,d7		* PC がページ境界をまたいだか？
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc		* 命令がページ境界をまたいだ時
	rts

JR_C:	bsr	eval_flag_HC_C	* HC,C フラグを再評価
	btst.l	#0,d6		* Cフラグをテスト
	bne	JR		* Cが１ならジャンプ
	addq.w	#2,d7
	btst.l	#14,d7		* PC がページ境界をまたいだか？
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc		* 命令がページ境界をまたいだ時
	rts

*	------ ＣＡＬＬ ------
CALL:	move.l	d7,d0
	move.w	d7,d1
	lsr.l	#2,d0			* d0 = pp00????_????????
	andi.w	#%11000000_00000000,d0	* d0 = pp000000_00000000
	or.w	d0,d1			* d1 = PC (R800)
	addq.w	#3,d1			* d1 = next Instruction
	subq.w	#2,sp_(a3)		* PUSH	
	move.w	sp_(a3),d0
	jsr	ms_write_mem_16

	move.b	2(a4,d7.w),d0		* nn の上位８ビットを読む 
	lsl.w	#8,d0
	move.b	1(a4,d7.w),d0		* nn の下位８ビットを読む 

	cmpi.w	#$3ffe,d7
	bcc	1f
	move.w	d0,d7
	PC_page_set
	rts
1:	bne	2f			* 命令がページ境界をまたいだ時
	PC_page_inc			* d7 = $3ffe の時
	move.b	(a4),d7			* nn の上位８ビットを読む
	lsl.w	#8,d7
	move.b	d0,d7
	PC_page_set
	rts
2:	PC_page_inc			* d7 = $3fff の時
	move.b	1(a4),d7
	lsl.w	#8,d7
	move.b	 (a4),d7
	PC_page_set
	rts

CALL_C:	bsr	eval_flag_HC_C	* HC,C フラグを再評価
	btst.l	#0,d6		* Cフラグをテスト
	bne	CALL		* Cが１ならコール
	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc
	rts

CALL_NC:
	bsr	eval_flag_HC_C	* HC,C フラグを再評価
	btst.l	#0,d6		* Cフラグをテスト
	beq	CALL		* Cが０ならコール
	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc
	rts

CALL_Z:	bsr	eval_flag_SZ	* SZ フラグを再評価
	btst.l	#6,d6		* Zフラグをテスト
	bne	CALL		* Zが1ならコール
	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc
	rts

CALL_NZ:
	bsr	eval_flag_SZ	* SZ フラグを再評価
	btst.l	#6,d6		* Zフラグをテスト
	beq	CALL		* Zが0ならコール
	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc
	rts

CALL_PE:
	bsr	eval_flag_PV_N	* PV フラグを再評価
	btst.l	#2,d6		* PVフラグをテスト
	bne	CALL		* PVが偶数(=1)ならコール
	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc
	rts

CALL_PO:
	bsr	eval_flag_PV_N	* PV フラグを再評価
	btst.l	#2,d6		* PVフラグをテスト
	beq	CALL		* PVが奇数(=0)ならコール
	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc
	rts

CALL_P:	bsr	eval_flag_SZ	* SZ フラグを再評価
	btst.l	#7,d6		* Sフラグをテスト
	beq	CALL		* Sが0ならコール
	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc
	rts

CALL_M:	bsr	eval_flag_SZ	* SZ フラグを再評価
	btst.l	#7,d6		* Sフラグをテスト
	bne	CALL		* Sが1ならコール
	addq.w	#3,d7
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7
	PC_page_inc
	rts

*	------ ＲＥＴ ------
RET:	move.w	sp_(a3),d0
	jsr	ms_read_mem_16
	addq.w	#2,sp_(a3)
	move.w	d0,d7
	PC_page_set
	rts

RET_C:	bsr	eval_flag_HC_C	* HC,C フラグを再評価
	btst.l	#8,d6		* Ｃｙフラグをテスト
	bne	RET		* Ｃｙが１ならリターン
	addq.w	#1,d7		* PC += 1
	andi.w	#$3fff,d7	* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
	
RET_NC:	bsr	eval_flag_HC_C	* HC,C フラグを再評価
	btst.l	#8,d6		* Ｃｙフラグをテスト
	beq	RET		* Ｃｙが０ならリターン
	addq.w	#1,d7		* PC += 1
	andi.w	#$3fff,d7	* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

RET_Z:	bsr	eval_flag_SZ	* SZ フラグを再評価
	btst.l	#6,d6		* Zフラグをテスト
	bne	RET		* Zが1ならリターン
	addq.w	#1,d7		* PC += 1
	andi.w	#$3fff,d7	* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

RET_NZ:	bsr	eval_flag_SZ	* SZ フラグを再評価
	btst.l	#6,d6		* Zフラグをテスト
	beq	RET		* Zが0ならリターン
	addq.w	#1,d7		* PC += 1
	andi.w	#$3fff,d7	* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

RET_M:	bsr	eval_flag_SZ	* SZ フラグを再評価
	btst.l	#7,d6		* Sフラグをテスト
	bne	RET		* Sが1ならリターン
	addq.w	#1,d7		* PC += 1
	andi.w	#$3fff,d7	* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

RET_P:	bsr	eval_flag_SZ	* SZ フラグを再評価
	btst.l	#7,d6		* Sフラグをテスト
	beq	RET		* Sが0ならリターン
	addq.w	#1,d7		* PC += 1
	andi.w	#$3fff,d7	* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

RET_PE:	bsr	eval_flag_PV_N	* PV フラグを再評価
	btst.l	#2,d6		* PVフラグをテスト
	bne	RET		* PVが偶数(=1)ならリターン
	addq.w	#1,d7		* PC += 1
	andi.w	#$3fff,d7	* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

RET_PO:	bsr	eval_flag_PV_N	* PV フラグを再評価
	btst.l	#2,d6		* PVフラグをテスト
	beq	RET		* PVが奇数(=0)ならリターン
	addq.w	#1,d7		* PC += 1
	andi.w	#$3fff,d7	* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

*	------ ＤＪＮＺ ------
DJNZ:	subq.b	#1,b(a3)	* b = b-1
	bne	JR		* b != 0 ならブランチ
	addq.w	#2,d7
	btst.l	#14,d7		* PC がページ境界をまたいだか？
	beq	rts_common
	PC_page_inc
	andi.w	#$3fff,d7
	rts


*	------ ＰＵＳＨ  ＰＯＰ ------
PUSH_XX	macro	target
	addq.w	#1,d7
	andi.w	#$3fff,d7
	bne	1f
	PC_page_inc
1:	subq.w	#2,sp_(a3)		; スタックを2バイト減らす
	move.w	sp_(a3),d0
	move.w	target,d1
	jsr	ms_write_mem_16		; スタックに書き込む
	endm

POP_XX	macro	target
	addq.w	#1,d7
	andi.w	#$3fff,d7
	bne	1f
	PC_page_inc
1:	move.w	sp_(a3),d0		; スタックから読み込む
	jsr	ms_read_mem_16
	addq.w	#2,sp_(a3)		; スタックを2バイト増やす
	move.w	d0,target		; Aレジスタのロード
	endm

PUSH_AF:
	bsr	eval_flag_all
	move.b	d4,d1
	lsl.w	#8,d1
	move.b	d6,d1
	PUSH_XX	d1
	rts
POP_AF:
	POP_XX	d0
	move.w	d0,d4			; Aレジスタのロード
	lsr.w	#8,d4			; 位置合わせ
	move.b	d0,d6			; フラグのロード
	andi.l	#%000_00000000_11111111,d6	; フラグのダーティビットをクリア
	rts

PUSH_BC:
	PUSH_XX	bc(a3)
	rts
POP_BC:
	POP_XX	bc(a3)
	rts

PUSH_DE:
	PUSH_XX	de(a3)
	rts
POP_DE:
	POP_XX	de(a3)
	rts

PUSH_HL:
	PUSH_XX	hl(a3)
	rts
POP_HL:
	POP_XX	hl(a3)
	rts

*	------ ＥＸ ------
EX_lSPl_HL:
	move.w	sp_(a3),d0
	jsr	ms_read_mem_16
	move.w	hl(a3),d1
	move.w	d0,hl(a3)
	move.w	sp_(a3),d0
	jsr	ms_write_mem_16
	addq.w	#1,d7
	andi.w	#$3fff,d7
	bne	rts_common
	PC_page_inc
	rts

EXX:	move.l	bc(a3),d0		* d0 = bc, de
	move.w	hl(a3),d1

	move.l	bc_(a3),bc(a3)
	move.w	hl_(a3),hl(a3)

	move.l	d0,bc_(a3)
	move.w	d1,hl_(a3)

	addq.w	#1,d7
	andi.w	#$3fff,d7
	bne	rts_common
	PC_page_inc
	rts

EX_DE_HL:
	move.l	de(a3),d0
	swap	d0
	move.l	d0,de(a3)
	addq.w	#1,d7
	andi.w	#$3fff,d7
	bne	rts_common
	PC_page_inc
	rts

EX_AF_AFd:
	bsr	eval_flag_all
	move.b	d4,d1
	lsl.w	#8,d1
	move.b	d6,d1
	move.b	a_(a3),d4
	move.b	f_(a3),d6
	andi.l	#%000_00000000_11111111,d6	; フラグのダーティビットをクリア
	move.w	d1,af_(a3)

	addq.w	#1,d7
	andi.w	#$3fff,d7
	bne	rts_common
	PC_page_inc
	rts


; CCFの挙動は以下の通り
; * S : 変化しない
; * Z : 変化しない
; * F5: A レジスタの bit5
; * H : 元のCフラグの値
; * F3: A レジスタの bit3
; * PV: 変化しない
; * N : 0
; * C : Cの反転
CCF:	bsr	eval_flag_all		* 全てのフラグを再評価
	move.b	d6,d0			* 元のCフラグの値を保存
	lsl.b	#4,d0			* C→HCの位置に移動
	move.b	d4,d1			* Aレジスタの値を取得
	andi.b	#%00101000,d1		* AレジスタからF5,F3を取得
	or.b	d1,d0			* F5,F3を混ぜる
	and.l	#%000_00000000_11000101,d6	* S,Z,PV,Cのみを保存し、あとはクリア
	bchg	#0,d6			* Cフラグを反転
	or.b	d0,d6			* F5,H,F3を反映
	;
	addq.w	#1,d7
	andi.w	#$3fff,d7
	bne	rts_common
	PC_page_inc
	rts	

; SCFの挙動は以下の通り
; * S : 変化しない
; * Z : 変化しない
; * F5: A レジスタの bit5
; * H : 0
; * F3: A レジスタの bit3
; * PV: 変化しない
; * N : 0
; * C : 1
SCF:	bsr	eval_flag_all		* 全てのフラグを再評価
	move.b	d4,d0			* Aレジスタの値を取得
	andi.b	#%00101000,d0		* AレジスタからF5,F3を取得
	and.l	#%000_00000000_11000100,d6	* S,Z,PVのみを保存し、あとはクリア
	bset	#0,d6			* Cフラグを1に
	or.b	d0,d6			* F5,F3を反映
	;
	addq.w	#1,d7
	andi.w	#$3fff,d7
	bne	rts_common
	PC_page_inc
	rts

; CPLの挙動は以下の通り
; * A : 反転
; * S : 変化しない
; * Z : 変化しない
; * F5: 反転後のA レジスタの bit5
; * H : 1
; * F3: 反転後のA レジスタの bit3
; * PV: 変化しない
; * N : 1
; * C : 変化しない
CPL:	bsr	eval_flag_all		* 全てのフラグを再評価
	eori.b	#$ff,d4			* Aレジスタの値を反転
	move.b	d4,d0			* 反転後のAレジスタの値を取得
	andi.b	#%00101000,d0		* AレジスタからF5,F3を取得
	and.l	#%000_00000000_11000101,d6	* S,Z,PV,Cのみを保存し、あとはクリア
	ori.b	#%00010010,d6		* N,Hを1に
	or.b	d0,d6			* F5,F3を反映
	;
	addq.w	#1,d7
	andi.w	#$3fff,d7
	bne	rts_common
	PC_page_inc
	rts

DI:	move.b	#0,interrupt_enable
	addq.w	#1,d7
	andi.w	#$3fff,d7
	bne	rts_common
	PC_page_inc
	rts

EI:	move.b	#2,interrupt_enable	* EIは１命令おいて実行されるので、2をセットして、最低1命令無視されるようにする
	;move.w	#1,cpu_yield		* DI中に割り込みがあった場合に割り込みをかけられるよう、yieldをセットする → 負荷高いので削除
	addq.w	#1,d7
	andi.w	#$3fff,d7
	bne	1f
	PC_page_inc
1:	rts

RST_XXH	macro	value
	move.l	d7,d1
	lsr.l	#2,d7			* d7 = pp00????_????????
	andi.w	#%11000000_00000000,d7	* d7 = pp000000_00000000
	or.w	d7,d1
	addq.w	#1,d1			* d1 = PC (R800) = next instruction
	subq.w	#2,sp_(a3)		* PUSH	
	move.w	sp_(a3),d0
	jsr	ms_write_mem_16
	move.w	value,d7
	PC_page_set
	endm

RST_00H:
	RST_XXH	#$0000
	rts
RST_08H:
	RST_XXH	#$0008
	rts
RST_10H:
	RST_XXH	#$0010
	rts
RST_18H:
	RST_XXH	#$0018
	rts
RST_20H:
	RST_XXH	#$0020
	rts
RST_28H:
	RST_XXH	#$0028
	rts
RST_30H:
	RST_XXH	#$0030
	rts
RST_38H:
	RST_XXH	#$0038
	rts

*	------ ＲＬＣＡ ------
*	------ ＲＬＡ ------
*	------ ＲＲＣＡ ------
*	------ ＲＲＡ ------

RXXA	macro	isLeft, isCircular
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:	bsr	eval_flag_HC_C
	.if isCircular
	  ; キャリーを経由せずにローテート
	  .if isLeft
	    rol.b	#1,d4
	  .else
	    ror.b	#1,d4
	  .endif
	.else
	  ; キャリーを経由してローテート
	  ; Xフラグにキャリーをセットし、rox命令を使う
	  btst.l	#0,d6
	  bne	1f
	  andi.b	#%11101111,ccr	; Xフラグをリセット
	  bra	2f
1:  	  ori.b		#%00010000,ccr	; Xフラグをセット
2:
	  .if isLeft
	    roxl.b	#1,d4
	  .else
	    roxr.b	#1,d4
	  .endif
	.endif
	; はみ出したキャリーをCフラグにセット
	bcs	1f
	andi.w	#%11101100_11101100,d6	* HC,N,Cをクリア
	bra	2f
1:	andi.w	#%11101100_11101100,d6	* HC,N,Cをクリア
	ori.w	#%00000000_00000001,d6	* Cをセット
2:
	endm

RLCA:	RXXA	1, 1
	rts
RRCA:	RXXA	0, 1
	rts
RLA:	RXXA	1, 0
	rts
RRA:	RXXA	0, 0
	rts

*	------ ＨＡＬＴ ------
HALT:
	pea.l	halt_msg
	DOS	__PRINT
	lea.l	4(sp),sp
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	9f
	PC_page_inc

9:	cmpi.b	#0,interrupt_enable
	beq	9b		* DIなら割り込まない(永遠に出られない？ NMIなら出られるようにすべき？)
	; あらためて割り込み要求端子の値(ms_cpu_int)を見て割り込み要求があるかどうかを見る
	cmpi.b	#0,ms_cpu_int
	beq	9b
	bsr	INT		* 割り込みがかかったので割り込み処理を実施
	rts

halt_msg:
	.dc.b	'HALT',0x0d,0x0a,0x00,0x00

	.even

*************************** ここまで

*
*	＄ＣＢライン命令
*
*	  c    b   
*	%1100_1011_cccc_crrr
*
*		ccccc ・ 00000	RLC
*			 00001	RRC
*			 00010	RL
*			 00011	RR
*			 00100	SLA
*			 00101	SRA
*			 00110	SLI		* undifined instruction
*			 00111	SRL
*
*			 01000
*			   |	BIT 0〜7
*			 01111
*
*			 10000
*			   |	RES 0〜7
*			 10111
*
*			 11000
*			   |	SET 0〜7
*			 11111
*
*		rrr ・・ 000 - b
*			 001 - c
*			 010 - d
*			 011 - e
*			 100 - h
*			 101 - l
*			 110 - (hl)
*			 111 - a
*
*
CB:	move.b	1(a4,d7.w),d0		* 第二オペコードを読み込む
	addq.w	#2,d7
	btst.l	#14,d7
	beq	@f			* PC がページ境界をまたいだか？
	PC_page_inc			* またいだ時
	andi.w	#$3fff,d7
	beq	@f
	move.b	(a4),d0			* 読み直し
@@:	bclr.l	#7,d0			* ００Ｈ〜７ＦＨの命令かどうか
	beq	case2			* そうなら case2へ
case1:
	bclr.l	#6,d0
	beq	RES			* ＲＥＳ命令

*	------ ＳＥＴ ------
SET:	move.b	d0,d1
	andi.w	#%00000000_00111000,d0		* BIT_n_? の n を d0にロード
	lsr.w	#3,d0

	andi.w	#%00000000_00000111,d1		* レジスタの値をロード
	addq.w	#2,d1
	bclr.l	#3,d1
	bne	SET_aorhl			* SET A, SET (HL)の時
	bset.b	d0,a(a3,d1.w)			* レジスタの nビット目をセット
	rts

SET_aorhl:
	tst.w	d1
	beq	set_lhll
	bset.l	d0,d4				* A レジスタの nビット目をセット
	rts
set_lhll
	move.w	d0,-(sp)
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	move.w	(sp)+,d1
	bset.l	d1,d0				* (HL)の nビット目をセット
	move.b	d0,d1
	move.w	hl(a3),d0
	jsr	ms_write_mem_8		
	rts

*	------ ＲＥＳ ------
RES:	move.b	d0,d1
	andi.w	#%00000000_00111000,d0		* BIT_n_? の n を d0にロード
	lsr.w	#3,d0

	andi.w	#%00000000_00000111,d1		* レジスタの値をロード
	addq.w	#2,d1
	bclr.l	#3,d1
	bne	RES_aorhl			* RES A, RES (HL)の時
	bclr.b	d0,a(a3,d1.w)			* レジスタの nビット目をクリア
	rts
RES_aorhl:
	tst.w	d1
	beq	RES_lhll
	bclr.l	d0,d4				* A レジスタの nビット目をクリア
	rts
RES_lhll
	move.w	d0,-(sp)
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	move.w	(sp)+,d1
	bclr.l	d1,d0				* (HL)の nビット目をセット
	move.b	d0,d1
	move.w	hl(a3),d0
	jsr	ms_write_mem_8		
	rts


case2:
	bclr.l	#6,d0
	beq	rot_sft			* ローテート、シフト関係の命令

*	------ ＢＩＴ ------
; ＢＩＴ命令の挙動は以下の通り
; * S : BIT 7,?の時だけ、対象のbit7が1なら1。それ以外の時は0
; * Z : 対象のbitが0なら1。それ以外の時は0
; * F5: 対象のbit5
; * H : 1
; * F3: 対象のbit3
; * PV: Zフラグと同じ
; * N : 0
; * C : 変化しない
; ただし、対象が(HL)の場合だけ、F5,F3は内部のWZレジスタの上位8bitの値(bit13,11)が入るらしい
BIT:	bsr	eval_flag_HC_C		* HC,C フラグを再評価
	andi.l	#%000_00000000_00000001,d6	* Cフラグ以外をクリア
	ori.l	#%000_00000000_00010000,d6	* Hフラグをセット
	move.w	d0,d1
	andi.w	#%00000000_00111000,d0	* BIT_n_? の n を d0にロード
	lsr.w	#3,d0
	moveq.l	#1,d2
	lsrl	d0,d2			* 対象位置のビットをセット

	andi.w	#%00000000_00000111,d1
	addq.w	#2,d1
	andi.w	#%00000111,d1
	cmpi.w	#1,d1
	beq	BIT_a			* BIT Aの時
	blt	BIT_lHLl		* BIT (HL)の時
	move.b	a(a3,d1.w),d0		* B,C,D,E,H,Lのいずれかのレジスタの値をロード
	move.b	d0,d1			* F5,F3に反映させるレジスタ値をd1にロード
	bra	@f
BIT_a:
	move.b	d4,d0			* Aレジスタの値をロード
	move.b	d0,d1			* F5,F3に反映させるレジスタ値をd1にロード
	bra	@f
BIT_lhll:
	move.w	d2,-(sp)
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	move.w	(sp)+,d2
	move.b	w(a3),d1		* F5,F3に反映させるレジスタ値をd1にロード  (hl)の時は wレジスタが使われるらしい
@@:
	andi.b	#%00101000,d1		* F5,F3を取得
	or.b	d1,d6			* F5,F3をFレジスタに反映
	and.b	d2,d0			* レジスタの nビット目をテストするためにマスク
	beq	1f
	ori.l	#%000_00000000_01000100,d6	* Z,PVフラグをセット
1:	andi.b	#%10000000,d0		* bit7のみ残す
	or.b	d0,d6			* bit7を Sフラグに反映
	rts


*	------ ローテート,シフト ------
rot_sft:
	andi.w	#%0000_0000_0011_1111,d0	* 命令にジャンプ
	move.w	Rot_Sft_JPT(pc,d0.w*2),d0
	jmp	Rot_Sft_JPT(pc,d0.w)

Rot_Sft_JPT:
	.dc.w	RLC_B-Rot_Sft_JPT	* $00
	.dc.w	RLC_C-Rot_Sft_JPT
	.dc.w	RLC_D-Rot_Sft_JPT
	.dc.w	RLC_E-Rot_Sft_JPT
	.dc.w	RLC_H-Rot_Sft_JPT
	.dc.w	RLC_L-Rot_Sft_JPT
	.dc.w	RLC_lHLl-Rot_Sft_JPT
	.dc.w	RLC_A-Rot_Sft_JPT
	.dc.w	RRC_B-Rot_Sft_JPT	* $08
	.dc.w	RRC_C-Rot_Sft_JPT
	.dc.w	RRC_D-Rot_Sft_JPT
	.dc.w	RRC_E-Rot_Sft_JPT
	.dc.w	RRC_H-Rot_Sft_JPT
	.dc.w	RRC_L-Rot_Sft_JPT
	.dc.w	RRC_lHLl-Rot_Sft_JPT
	.dc.w	RRC_A-Rot_Sft_JPT	* $0f

	.dc.w	RL_B-Rot_Sft_JPT	* $10
	.dc.w	RL_C-Rot_Sft_JPT
	.dc.w	RL_D-Rot_Sft_JPT
	.dc.w	RL_E-Rot_Sft_JPT
	.dc.w	RL_H-Rot_Sft_JPT
	.dc.w	RL_L-Rot_Sft_JPT
	.dc.w	RL_lHLl-Rot_Sft_JPT
	.dc.w	RL_A-Rot_Sft_JPT
	.dc.w	RR_B-Rot_Sft_JPT	* $18
	.dc.w	RR_C-Rot_Sft_JPT
	.dc.w	RR_D-Rot_Sft_JPT
	.dc.w	RR_E-Rot_Sft_JPT
	.dc.w	RR_H-Rot_Sft_JPT
	.dc.w	RR_L-Rot_Sft_JPT
	.dc.w	RR_lHLl-Rot_Sft_JPT
	.dc.w	RR_A-Rot_Sft_JPT	* $1f

	.dc.w	SLA_B-Rot_Sft_JPT	* $20
	.dc.w	SLA_C-Rot_Sft_JPT
	.dc.w	SLA_D-Rot_Sft_JPT
	.dc.w	SLA_E-Rot_Sft_JPT
	.dc.w	SLA_H-Rot_Sft_JPT
	.dc.w	SLA_L-Rot_Sft_JPT
	.dc.w	SLA_lHLl-Rot_Sft_JPT
	.dc.w	SLA_A-Rot_Sft_JPT
	.dc.w	SRA_B-Rot_Sft_JPT	* $28
	.dc.w	SRA_C-Rot_Sft_JPT
	.dc.w	SRA_D-Rot_Sft_JPT
	.dc.w	SRA_E-Rot_Sft_JPT
	.dc.w	SRA_H-Rot_Sft_JPT
	.dc.w	SRA_L-Rot_Sft_JPT
	.dc.w	SRA_lHLl-Rot_Sft_JPT
	.dc.w	SRA_A-Rot_Sft_JPT	* $2f

	.dc.w	SLI_B-Rot_Sft_JPT	* $30	SLI 未定義命令(Shift Left ?????)
	.dc.w	SLI_C-Rot_Sft_JPT	*	ビット０に１が入る左シフト
	.dc.w	SLI_D-Rot_Sft_JPT
	.dc.w	SLI_E-Rot_Sft_JPT
	.dc.w	SLI_H-Rot_Sft_JPT
	.dc.w	SLI_L-Rot_Sft_JPT
	.dc.w	SLI_lHLl-Rot_Sft_JPT
	.dc.w	SLI_A-Rot_Sft_JPT
	.dc.w	SRL_B-Rot_Sft_JPT	* $38
	.dc.w	SRL_C-Rot_Sft_JPT
	.dc.w	SRL_D-Rot_Sft_JPT
	.dc.w	SRL_E-Rot_Sft_JPT
	.dc.w	SRL_H-Rot_Sft_JPT
	.dc.w	SRL_L-Rot_Sft_JPT
	.dc.w	SRL_lHLl-Rot_Sft_JPT
	.dc.w	SRL_A-Rot_Sft_JPT	* $3f

;
; RLC, RRC, RL, RR のローテーション(最後にAがついてない方)をまとめたマクロ
;
; フラグの挙動は以下の通り
; * S : 結果の最上位ビット
; * Z : 結果が0なら1。それ以外の時は0
; * F5: 結果のbit5
; * H : 0
; * F3: 結果のbit3
; * PV: 結果のパリティ
; * N : 0
; * C : ローテーションによってはみ出た値
;
RXX_	macro	target, isLeft, isCircular
	bsr	eval_flag_HC_C		* HC,C フラグを再評価
	move.b	target,d0
	.if isCircular
	  ; キャリーを経由せずにローテート
	  .if isLeft
	    rol.b	#1,d0
	  .else
	    ror.b	#1,d0
	  .endif
	.else
	  ; キャリーを経由してローテート
	  ; Xフラグにキャリーをセットし、rox命令を使う
	  btst.l	#0,d0
	  bne	1f
	  andi.b	#%11101111,ccr	; Xフラグをリセット
	  bra	2f
1:  	  ori.b		#%00010000,ccr	; Xフラグをセット
2:
	  .if isLeft
	    roxl.b	#1,d0
	  .else
	    roxr.b	#1,d0
	  .endif
	.endif
	; はみ出したキャリーをCフラグにセット
	bcs	1f
	; b18 : don't care
	; b17 : 論理演算なので1
	; b16 : don't care
	andi.l	#%000_11101100_11101100,d6	* HC,N,Cをクリア
	ori.l	#%010_11000100_00000001,d6	* Cは0、SZとPVはダーティビットを立てる
	bra	2f
1:
	andi.l	#%000_11101100_11101100,d6	* HC,N,Cをクリア
	ori.l	#%010_11000100_00000001,d6	* Cは1、SZとPVはダーティビットを立てる
2:	move.b	d0,d5				* 論理演算結果を保存
	move.b	d0,target
	endm

*	------ ＲＬＣ ------
RLC_A:	RXX_	d4, 1, 1
	rts
RLC_B:	RXX_	b(a3), 1, 1
	rts
RLC_C:	RXX_	c(a3), 1, 1
	rts
RLC_D:	RXX_	d(a3), 1, 1
	rts
RLC_E:	RXX_	e(a3), 1, 1
	rts
RLC_H:	RXX_	h(a3), 1, 1
	rts
RLC_L:	RXX_	l(a3), 1, 1
	rts
RLC_lHLl:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	RXX_	d0, 1, 1
	move.b	d0,d1
	move.w	hl(a3),d0
	jsr	ms_write_mem_8
	rts

*	------ ＲＲＣ ------
RRC_A:	RXX_	d4, 0, 1
	rts
RRC_B:	RXX_	b(a3), 0, 1
	rts
RRC_C:	RXX_	c(a3), 0, 1
	rts
RRC_D:	RXX_	d(a3), 0, 1
	rts
RRC_E:	RXX_	e(a3), 0, 1
	rts
RRC_H:	RXX_	h(a3), 0, 1
	rts
RRC_L:	RXX_	l(a3), 0, 1
	rts
RRC_lHLl:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	RXX_	d0, 0, 1
	move.b	d0,d1
	move.w	hl(a3),d0
	jsr	ms_write_mem_8
	rts

*	------ ＲＬ ------
RL_A:	RXX_	d4, 1, 0
	rts
RL_B:	RXX_	b(a3), 1, 0
	rts
RL_C:	RXX_	c(a3), 1, 0
	rts
RL_D:	RXX_	d(a3), 1, 0
	rts
RL_E:	RXX_	e(a3), 1, 0
	rts
RL_H:	RXX_	h(a3), 1, 0
	rts
RL_L:	RXX_	l(a3), 1, 0
	rts
RL_lHLl:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	RXX_	d0, 1, 0
	move.b	d0,d1
	move.w	hl(a3),d0
	jsr	ms_write_mem_8
	rts

*	------ ＲＲ ------
RR_A:	RXX_	d4, 0, 0
	rts
RR_B:	RXX_	b(a3), 0, 0
	rts
RR_C:	RXX_	c(a3), 0, 0
	rts
RR_D:	RXX_	d(a3), 0, 0
	rts
RR_E:	RXX_	e(a3), 0, 0
	rts
RR_H:	RXX_	h(a3), 0, 0
	rts
RR_L:	RXX_	l(a3), 0, 0
	rts
RR_lHLl:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	RXX_	d0, 0, 0
	move.b	d0,d1
	move.w	hl(a3),d0
	jsr	ms_write_mem_8
	rts

;
; SLA, SRA, SLI, SRL のシフトをまとめたマクロ
;
; フラグの挙動は以下の通り
; * S : 結果の最上位ビット
; * Z : 結果が0なら1。それ以外の時は0
; * F5: 結果のbit5
; * H : 0
; * F3: 結果のbit3
; * PV: 結果のパリティ
; * N : 0
; * C : 命令による(SLA:はみ出た値、SRA:はみ出た値、SLI:はみ出た値、SRL:はみ出た値)
;
; RXXほどの対称性はないのでちょっと分かりづらいが、以下のような動作をする
; * SLA: 左に1ビットシフト、bit0には0が入る、はみ出た値は C フラグにセット
; * SRA: 右に1ビットシフト、bit7は元の値の最上位ビット、はみ出た値は C フラグにセット
; * SLI: 左に1ビットシフト、bit0には1が入る、はみ出た値は C フラグにセット(未定義命令)
; * SRL: 右に1ビットシフト、bit7は0、はみ出た値は C フラグにセット
;
; 以上を１つのマクロで実現するため、isLeft, insert という２つの引数を使っている
; * isLeft: 1の時は左シフト、0の時は右シフト
; * insert : 0の時は0を挿入、1の時は1を挿入、2の時は 最上位ビットの値を挿入
SXX	macro	target, isLeft, insert
	bsr	eval_flag_HC_C		* HC,C フラグを再評価
	move.b	target,d0
	.if insert == 0
	  andi.b	#%11101111,ccr	; Xフラグをリセット
	.elseif insert == 1
	  ori.b		#%00010000,ccr	; Xフラグをセット
	.else
	  btst	#7,d0
	  bne	1f
	  andi.b	#%11101111,ccr	; Xフラグをリセット
	  bra	2f
1: 	  ori.b		#%00010000,ccr	; Xフラグをセット
2:
	.endif
	.if isLeft
	  roxl.b	#1,d0			; Xフラグを使えるのはローテートだけなのでローテートを使う
	.else
	  roxr.b	#1,d0			; Xフラグを使えるのはローテートだけなのでローテートを使う	
	.endif

	; はみ出したキャリーをCフラグにセット
	bcs	1f
	; b18 : don't care
	; b17 : 論理演算なので1
	; b16 : don't care
	andi.l	#%000_11101100_11101100,d6	* HC,N,Cをクリア
	ori.l	#%010_11000100_00000000,d6	* Cは0、SZとPVはダーティビットを立てる
	bra	2f
1:
	andi.l	#%000_11101100_11101100,d6	* HC,N,Cをクリア
	ori.l	#%010_11000100_00000001,d6	* Cは1、SZとPVはダーティビットを立てる
2:	move.b	d0,d5				* 論理演算結果を保存
	move.b	d0,target
	endm

*	------ ＳＬＡ ------
SLA_A:
	SXX	d4, 1, 0
	rts
SLA_B:
	SXX	b(a3), 1, 0
	rts
SLA_C:
	SXX	c(a3), 1, 0
	rts
SLA_D:
	SXX	d(a3), 1, 0
	rts
SLA_E:
	SXX	e(a3), 1, 0
	rts
SLA_H:
	SXX	h(a3), 1, 0
	rts
SLA_L:
	SXX	l(a3), 1, 0
	rts
SLA_lHLl:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	SXX	d0, 1, 0
	move.b	d0,d1
	move.w	hl(a3),d0
	jsr	ms_write_mem_8
	rts

*	------ ＳＲＡ ------
SRA_A:
	SXX	d4, 0, 2
	rts
SRA_B:
	SXX	b(a3), 0, 2
	rts
SRA_C:
	SXX	c(a3), 0, 2
	rts
SRA_D:
	SXX	d(a3), 0, 2
	rts
SRA_E:
	SXX	e(a3), 0, 2
	rts
SRA_H:
	SXX	h(a3), 0, 2
	rts
SRA_L:
	SXX	l(a3), 0, 2
	rts
SRA_lHLl:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	SXX	d0, 0, 2
	move.b	d0,d1
	move.w	hl(a3),d0
	jsr	ms_write_mem_8
	rts

*	------ ＳＲＬ ------
SRL_A:
	SXX	d4, 0, 0
	rts
SRL_B:
	SXX	b(a3), 0, 0
	rts
SRL_C:
	SXX	c(a3), 0, 0
	rts
SRL_D:
	SXX	d(a3), 0, 0
	rts
SRL_E:
	SXX	e(a3), 0, 0
	rts
SRL_H:
	SXX	h(a3), 0, 0
	rts
SRL_L:
	SXX	l(a3), 0, 0
	rts
SRL_lHLl:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	SXX	d0, 0, 0
	move.b	d0,d1
	move.w	hl(a3),d0
	jsr	ms_write_mem_8
	rts

*	------ ＳＬＩ ------
SLI_A:
	SXX	d4, 1, 1
	rts
SLI_B:
	SXX	b(a3), 1, 1
	rts
SLI_C:
	SXX	c(a3), 1, 1
	rts
SLI_D:
	SXX	d(a3), 1, 1
	rts
SLI_E:
	SXX	e(a3), 1, 1
	rts
SLI_H:
	SXX	h(a3), 1, 1
	rts
SLI_L:
	SXX	l(a3), 1, 1
	rts
SLI_lHLl:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	SXX	d0, 1, 1
	move.b	d0,d1
	move.w	hl(a3),d0
	jsr	ms_write_mem_8
	rts


*	------ ＲＬＤ,ＲＲＤ ------
;
; RLD, RRD の挙動は以下の通り
; * S : 結果の最上位ビット
; * Z : 結果が0なら1。それ以外の時は0
; * F5: 結果のAレジスタのbit5
; * H : 0
; * F3: 結果のAレジスタのbit3
; * PV: 結果のAレジスタのパリティ
; * N : 0
; * C : 変化しない
RLD_lHLl:
	move.w	hl(a3),d0		* d0.w = |00|00|(H|L)|
	jsr	ms_read_mem_8
	andi.w	#%00000000_11111111,d0

	lsl.w	#4,d0			* d0.w = |00|(H|L)|00|
	move.b	d4,d1
	andi.w 	#%00000000_00001111,d1
	or.b	d0,d1			* d1.w = |00|(H|L)|Al|

	andi.b	#%11110000,d4		* d4.b = |Ah|00|
	lsr.w	#8,d0			* d0.b = |00|(H|
	or.b	d0,d4			* d4.b = |Ah|(H|

	move.w	hl(a3),d0
	jsr	ms_write_mem_8

	andi.l	#%000_11101101_11101101,d6	* HC,Nをクリア
	ori.l	#%010_11000100_00000000,d6	* SZとPVはダーティビットを立てる
	move.b	d4,d5			* 論理演算結果を保存
	rts

RRD_lHLl:
	move.w	hl(a3),d0		* d0.w = |??|??|(H|L)|
	jsr	ms_read_mem_8

	move.b	d4,d1
	lsl.w	#8,d1			* d1.w = |Ah|Al|00|00|
	move.b	d0,d1			* d1.w = |Ah|Al|(H|L)|

	lsr.w	#4,d1			* d1.w = |00|Ah|Al|(H|
	andi.w 	#%00000000_00001111,d0	
					* d0.w = |00|00|00|L)| 
	andi.b	#%11110000,d4		* d4.b =       |Ah|00|
	or.b	d0,d4			* d4.b =       |Ah|L)|

	move.w	hl(a3),d0
	jsr	ms_write_mem_8

	andi.l	#%000_11101101_11101101,d6	* HC,Nをクリア
	ori.l	#%010_11000100_00000000,d6	* SZとPVはダーティビットを立てる
	move.b	d4,d5			* 論理演算結果を保存

	rts

********************************************************************
*
*	＄ＥＤライン命令
*
********************************************************************
ED:	clr.w	d0
	move.b	1(a4,d7.w),d0		* 第二オペコードを読み込む
	addq.w	#2,d7
	btst.l	#14,d7
	beq	@f			* PC がページ境界をまたいだか？
	PC_page_inc			* またいだ時
	andi.w	#$3fff,d7
	beq	@f
	move.b	(a4),d0			* 読み直し
@@:	subi.w	#$40,d0
	bcs	other			* ＄３ｆ以下の時は特殊命令へ
	movea.l	ED_JPT(pc,d0.w*4),a0
	jmp	(a0)

ED_JPT:	.dc.l	IN_B_c			* $40
	.dc.l	OUT_c_B
	.dc.l	SBC_HL_BC
	.dc.l	LD_lnnl_BC
	.dc.l	NEG
	.dc.l	RETN
	.dc.l	IM_0
	.dc.l	LD_I_A
	.dc.l	IN_C_c			* $48
	.dc.l	OUT_c_C
	.dc.l	ADC_HL_BC
	.dc.l	LD_BC_lnnl
	.dc.l	none_ED
	.dc.l	RETI
	.dc.l	none_ED
	.dc.l	LD_R_A			* $4f

	.dc.l	IN_D_c			* $50
	.dc.l	OUT_c_D
	.dc.l	SBC_HL_DE
	.dc.l	LD_lnnl_DE
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	IM_1
	.dc.l	LD_A_I
	.dc.l	IN_E_c			* $58
	.dc.l	OUT_c_E
	.dc.l	ADC_HL_DE
	.dc.l	LD_DE_lnnl
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	IM_2
	.dc.l	LD_A_R			* $5f

	.dc.l	IN_H_c			* $60
	.dc.l	OUT_c_H
	.dc.l	SBC_HL_HL
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	RRD_lHLl
	.dc.l	IN_L_c			* $68
	.dc.l	OUT_c_L
	.dc.l	ADC_HL_HL
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	RLD_lHLl		* $6f

	.dc.l	IN_F_c			* $70
	.dc.l	none_ED
	.dc.l	SBC_HL_SP
	.dc.l	LD_lnnl_SP
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	IN_A_c			* $78
	.dc.l	OUT_c_A
	.dc.l	ADC_HL_SP
	.dc.l	LD_SP_lnnl
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED			* $7f

	.dc.l	none_ED			* $80
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED			* $88
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED			* $8f

	.dc.l	none_ED			* $90
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED			* $98
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED			* $9f

	.dc.l	LDI			* $a0
	.dc.l	CPI
	.dc.l	INI
	.dc.l	OUTI
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	LDD			* $a8
	.dc.l	CPD
	.dc.l	IND
	.dc.l	OUTD
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED			* $af

	.dc.l	LDIR			* $b0
	.dc.l	CPIR
	.dc.l	INIR
	.dc.l	OTIR
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	LDDR			* $b8
	.dc.l	CPDR
	.dc.l	INDR
	.dc.l	OTDR
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED			* $bf

	.dc.l	none_ED			* $c0
	.dc.l	MULB_A_B
	.dc.l	none_ED
	.dc.l	MULW_HL_BC
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED			* $c8
	.dc.l	MULB_A_C
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED			* $cf

	.dc.l	none_ED			* $d0
	.dc.l	MULB_A_D
	.dc.l	none_ED
	.dc.l	MULW_HL_DE
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED			* $d8
	.dc.l	MULB_A_E
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED			* $df

	.dc.l	none_ED			* $e0
	.dc.l	MULB_A_H
	.dc.l	none_ED
	.dc.l	MULW_HL_HL
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED			* $e8
	.dc.l	MULB_A_L
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED			* $ef

	.dc.l	none_ED			* $f0
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	MULW_HL_SP
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED			* $f8
	.dc.l	MULB_A_A
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED
	.dc.l	none_ED			* $ff

none_ED:				* おかしな命令を実行しました
	move.w	d0,d1
	lsr.w	#4,d0
	lea.l	HEX,a0
	move.b	(a0,d0.w),number_ed+0
	andi.w	#$0f,d1
	move.b	(a0,d1.w),number_ed+1

	pea.l	errms_ed
	DOS	__PRINT
	lea.l	4(sp),sp
	move.b	#$ff,d0
	rts

errms_ed:
	.dc.b	'おかしな命令を実行しました。0xed,0x'
number_ed:
	.dc.b	'00'
	.dc.b	0x0d,0x0a,0x00

	.even

*
*	６８０ｘ０ネイティブルーチンの呼びだし
*
*
other:					* ＭＳ用に拡張した命令
	; この時点の d0 には、0x00-0x3f の値に -0x40 した値が入っている
	move.b	d0,-(sp)
	move.l	native_jpt_add,d1
	beq	none_ED			* ネイティブルーチンがセットされていなければ未定義エラー
	;	AF レジスタをセット
	bsr	eval_flag_all
	move.b	d4,a(a3)
	move.b	d6,f(a3)

	move.b	(sp)+,d0
	add.w	#$20,d0			* 0x20を足してプラスの場合、つまり元々0x20-0x3fの時は CALL
	bpl	CALL68

JP68:	add.w	#$20,d0			* 0x20を足すと、元々の0x00-0x1fの値が得られる
	lsl.w	#8,d0			* d0 = d0 * 256
	move.b	0(a4,d7.w),d0		* d0 = ルーチン番号 (0x0000-0x1fff)
	addq.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	@f
	PC_page_inc
@@:
	lsl.w	#2,d0			* d0 = d0 * 4
	movea.l	native_jpt_add,a1
	move.l	0(a1,d0.w),a1

	movem.l	d4-d6/a3-a4,-(sp)
	jsr	(a1)
	movem.l	(sp)+,d4-d6/a3-a4

	move.w	d0,d7			* d0.w に戻り先の番地が入っている
	PC_page_set
	bra	next_jp_call_68

CALL68:	add.w	#$20,d0			* d0には、元々の0x20-0x3fが入っている
	lsl.w	#8,d0			* d0 = d0 * 256
	move.b	0(a4,d7.w),d0		* d0 = ルーチン番号 (0x2000-0x3fff)
	addq.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	@f
	PC_page_inc
@@:
	lsl.w	#2,d0			* d0 = d0 * 4
	lea.l	native_jpt_add,a1
	move.l	0(a1,d0.w),a1

	movem.l	d4-d6/a3-a4,-(sp)
	jsr	(a1)
	movem.l	(sp)+,d4-d6/a3-a4

*
*	フラグの描き戻しなどの後処理
*
next_jp_call_68:
	move.b	a(a3),d4		* Aレジスタをセット
	move.b	f(a3),d6		* フラグのロード
	andi.l	#000_00000000_11111111,d6	* フラグのダーティビットをクリア
	rts
	

*	------ ＩＭ ------
IM_0:	move.b	#0,interrupt_mode
	rts

IM_1:	move.b	#1,interrupt_mode
	rts

IM_2:	move.b	#2,interrupt_mode
	rts

*	------ ＬＤ ＸＸ,(nn) ------
LD_BC_lnnl:
	move.b	1(a4,d7.w),d0		* nn の上位８ビットを読む 
	lsl.w	#8,d0
	move.b	0(a4,d7.w),d0		* nn の下位８ビットを読む 
	addq.w	#2,d7
	btst.l	#14,d7
	bne	1f
	jsr	ms_read_mem_16
	move.w	d0,bc(a3)
	rts
1:	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	bne	2f
	jsr	ms_read_mem_16		* d7 = 0 の時
	move.w	d0,bc(a3)
	rts
2:	move.b	d0,d2			* d7 = 1 の時
	move.b	(a4),d0			* nn の上位８ビットを読む
	lsl.w	#8,d0
	move.b	d2,d0
	jsr	ms_read_mem_16
	move.w	d0,bc(a3)
	rts

LD_DE_lnnl:
	move.b	1(a4,d7.w),d0		* nn の上位８ビットを読む 
	lsl.w	#8,d0
	move.b	0(a4,d7.w),d0		* nn の下位８ビットを読む 
	addq.w	#2,d7
	btst.l	#14,d7
	bne	1f
	jsr	ms_read_mem_16
	move.w	d0,de(a3)
	rts
1:	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	bne	2f
	jsr	ms_read_mem_16
	move.w	d0,de(a3)
	rts
2:	move.b	d0,d2			* d7 = 1 の時
	move.b	(a4),d0			* nn の上位８ビットを読む
	lsl.w	#8,d0
	move.b	d2,d0
	jsr	ms_read_mem_16
	move.w	d0,de(a3)
	rts

LD_SP_lnnl:
	move.b	1(a4,d7.w),d0		* nn の上位８ビットを読む 
	lsl.w	#8,d0
	move.b	0(a4,d7.w),d0		* nn の下位８ビットを読む 
	addq.w	#2,d7
	btst.l	#14,d7
	bne	1f
	jsr	ms_read_mem_16
	move.w	d0,sp_(a3)
	rts
1:	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	bne	2f
	jsr	ms_read_mem_16
	move.w	d0,sp_(a3)
	rts
2:	move.b	d0,d2			* d7 = 1 の時
	move.b	(a4),d0			* nn の上位８ビットを読む
	lsl.w	#8,d0
	move.b	d2,d0
	jsr	ms_read_mem_16
	move.w	d0,sp_(a3)
	rts

*	------ ＬＤ (nn),ＸＸ ------
LD_lnnl_BC:
	move.w	bc(a3),d1
	move.b	1(a4,d7.w),d0		* nn の上位８ビットを読む 
	lsl.w	#8,d0
	move.b	0(a4,d7.w),d0		* nn の下位８ビットを読む 
	addq.w	#2,d7
	btst.l	#14,d7
	bne	@f
	jsr	ms_write_mem_16
	rts
@@:	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	bne	@f
	jsr	ms_write_mem_16
	rts
@@:	move.b	d0,d2			* d7 = 1 の時
	move.b	(a4),d0			* nn の上位８ビットを読む
	lsl.w	#8,d0
	move.b	d2,d0
	jsr	ms_write_mem_16
	rts

LD_lnnl_DE:
	move.w	de(a3),d1
	move.b	1(a4,d7.w),d0		* nn の上位８ビットを読む 
	lsl.w	#8,d0
	move.b	0(a4,d7.w),d0		* nn の下位８ビットを読む 
	addq.w	#2,d7
	btst.l	#14,d7
	bne	@f
	jsr	ms_write_mem_16
	rts
@@:	PC_page_inc
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	bne	@f
	jsr	ms_write_mem_16
	rts
@@:	move.b	d0,d2			* d7 = 1 の時
	move.b	(a4),d0			* nn の上位８ビットを読む
	lsl.w	#8,d0
	move.b	d2,d0
	jsr	ms_write_mem_16
	rts

LD_lnnl_SP:
	move.w	sp_(a3),d1
	move.b	1(a4,d7.w),d0		* nn の上位８ビットを読む 
	lsl.w	#8,d0
	move.b	0(a4,d7.w),d0		* nn の下位８ビットを読む 
	addq.w	#2,d7
	btst.l	#14,d7
	bne	@f
	jsr	ms_write_mem_16
	rts
@@:	PC_page_inc			* 命令がページ境界をまたぐ時
	andi.w	#$3fff,d7
	bne	@f
	jsr	ms_write_mem_16		* d7 = 0 の時
	rts
@@:	move.b	d0,d2			* d7 = 1 の時
	move.b	(a4),d0			* nn の上位８ビットを読む
	lsl.w	#8,d0
	move.b	d2,d0
	jsr	ms_write_mem_16
	rts


*	------ ＡＤＣ ------

; ADC HL,XX の挙動は以下の通り
; * S : 結果のHLのbit15
; * Z : 結果のHLが0の時1、それ以外の時0
; * F5: 上位8bitの加算の結果のbit5
; * H : 上位8bitの加算の実行によるハーフキャリー
; * F3: 上位8bitの加算の結果のbit5
; * PV: 上位8bitの加算の実行によるオーバーフロー
; * N : 0
; * C : 上位8bitの加算の実行によるキャリー
ADC_HL_XX macro	target
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:	bsr	eval_flag_HC_C
	; b18 : 加算なので0
	; b17 : 算術演算なので0
	; b16 : キャリーなしなので0
	; b1  : 加算なのでN=0
	andi.l	#%000_10111101_10111101,d6	* 16bit演算の時は Zフラグを直接セットするので、Zのダーティビットを立てずに0に初期化する
	ori.l	#%000_10111101_00000000,d6	* S,F5,H,F3,PV,Cのダーティビットを立てる
	move.w	hl(a3),d0
	move.w	target,d1
	; Xフラグにキャリーをセットし、addx命令を使う
	btst.l	#0,d0
	bne	1f
	andi.b	#%11101111,ccr		* Xフラグをクリア
	bra	2f
1:  	ori.b	#%00010000,ccr		* Xフラグをセット
2:
	addx.b	d1,d0			* 下位８ビット+キャリーを加算
	bcc	@f			* キャリーが発生していない場合はスキップ
	ori.l	#%001_00000000_00000000,d6	* 再計算用キャリーをセット
@@:	move.b	d0,l(a3)		* 下位８ビットを保存
	lsr.w	#8,d0
	lsr.w	#8,d1
	move.b	d0,d5			* 第1項
	lsl.w	#8,d5
	move.b	d1,d5			* 足す数を 第2項に
	swap	d5
	btst	#16,d6
	bne	1f
	and.b	#%11101111,ccr		* Xフラグをクリア
	bra	2f
1:	or.b	#%00010000,ccr		* Xフラグをセット
2:	addx.b	d1,d0			* 演算実行
	move.b	d0,d5			* 結果を保存
	move.b	d0,h(a3)		* 上位８ビットを保存
	move.w	hl(a3),d0
	bne	1f
	ori.l	#%000_00000000_01000000,d6	* Zフラグをセット
1:
	endm

ADC_HL_BC:
	ADC_HL_XX	bc(a3)
	rts

ADC_HL_DE:
	ADC_HL_XX	de(a3)
	rts

ADC_HL_HL:
	ADC_HL_XX	hl(a3)
	rts

ADC_HL_SP:
	ADC_HL_XX	sp_(a3)
	rts

*	------ ＳＢＣ ------

; SBC HL,XX の挙動は以下の通り
; * S : 結果のHLのbit15
; * Z : 結果のHLが0の時1、それ以外の時0
; * F5: 上位8bitの減算の結果のbit5
; * H : 上位8bitの減算の実行によるハーフキャリー
; * F3: 上位8bitの減算の結果のbit5
; * PV: 上位8bitの減算の実行によるオーバーフロー
; * N : 1
; * C : 上位8bitの減算の実行によるキャリー
SBC_HL_XX macro	target
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:	; b18 : 減算なので1
	; b17 : 算術演算なので0
	; b16 : キャリーなしなので0
	; b1  : 減算なのでN=1
	andi.l	#%100_10111101_10111101,d6	* 16bit演算の時は Zフラグを直接セットするので、Zのダーティビットを立てずに0に初期化する
	ori.l	#%100_10111101_00000010,d6	* S,F5,H,F3,PV,Cのダーティビットを立てる、N=1にする
	move.w	hl(a3),d0
	move.w	target,d1
	; Xフラグにキャリーをセットし、addx命令を使う
	btst.l	#0,d0
	bne	1f
	andi.b	#%11101111,ccr		* Xフラグをクリア
	bra	2f
1:  	ori.b	#%00010000,ccr		* Xフラグをセット
2:
	subx.b	d1,d0			* 下位８ビット+キャリーを減算
	bcc	@f			* キャリーが発生していない場合はスキップ
	ori.l	#%001_00000000_00000000,d6	* 再計算用キャリーをセット
@@:	move.b	d0,l(a3)		* 下位８ビットを保存
	lsr.w	#8,d0
	lsr.w	#8,d1
	move.b	d0,d5			* 第1項
	lsl.w	#8,d5
	move.b	d1,d5			* 引く数を 第2項に
	swap	d5
	btst	#16,d6
	bne	1f
	and.b	#%11101111,ccr		* Xフラグをクリア
	bra	2f
1:
	or.b	#%00010000,ccr		* Xフラグをセット
2:	subx.b	d1,d0			* 演算実行
	move.b	d0,d5			* 結果を保存
	move.b	d0,h(a3)		* 上位８ビットを保存
	move.w	hl(a3),d0
	bne	1f
	ori.l	#%000_00000000_01000000,d6	* Zフラグをセット
1:
	endm

SBC_HL_BC:
	SBC_HL_XX	bc(a3)
	rts

SBC_HL_DE:
	SBC_HL_XX	de(a3)
	rts

SBC_HL_HL:
	SBC_HL_XX	hl(a3)
	rts

SBC_HL_SP:
	SBC_HL_XX	sp_(a3)
	rts

*	------ ＬＤＩ ------
LDI:	andi.w	#%11110101_11111111,d6	* Ｎ,HC modeをクリア
	move.b	d5,HC2(a3)		* Ｈを０に
	move.b	#0,PV(a3)
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	move.b	d0,d1
	move.w	de(a3),d0
	jsr	ms_write_mem_8
	addq.w	#1,hl(a3)
	addq.w	#1,de(a3)
	subq.w	#1,bc(a3)
	bne	rts_common
	move.b	#1,PV(a3)
	rts

ここまで

******** もっと高速化したい。 read mem, write mem の展開等 ***********
LDIR:	andi.w	#%11110101_11111111,d6	* Ｎ,HC modeをクリア
	move.b	d5,HC2(a3)		* Ｈを０に
	move.b	#1,PV(a3)
loop_LDIR:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	move.b	d0,d1
	move.w	de(a3),d0
	jsr	ms_write_mem_8

	addq.w	#1,hl(a3)
	addq.w	#1,de(a3)
	subq.w	#1,bc(a3)
	bne	loop_LDIR
	rts

LDD:	andi.w	#%11110101_11111111,d6	* Ｎ,HC modeをクリア
	move.b	d5,HC2(a3)		* Ｈを０に
	move.b	#0,PV(a3)
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	move.b	d0,d1
	move.w	de(a3),d0
	jsr	ms_write_mem_8
	subq.w	#1,hl(a3)
	subq.w	#1,de(a3)
	subq.w	#1,bc(a3)
	bne	rts_common
	move.b	#1,PV(a3)
	rts

******** もっと高速化したい。 read mem, write mem の展開等 ***********
LDDR:	andi.w	#%11110101_11111111,d6	* Ｎ,HC modeをクリア
	move.b	d5,HC2(a3)		* Ｈを０に
	move.b	#1,PV(a3)
loop_LDDR:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	move.b	d0,d1
	move.w	de(a3),d0
	jsr	ms_write_mem_8

	subq.w	#1,hl(a3)
	subq.w	#1,de(a3)
	subq.w	#1,bc(a3)
	bne	loop_LDDR
	rts


*	------ ＣＰＩ , ＣＰＤ ------
CPI:	andi.w	#%01110111_11111111,d6	* HC modeをクリア
	ori.w	#%00000010_00000000,d6	* Ｎ をセット
	clr.b	PV(a3)			* PV をセット		
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	d0,HC2(a3)		* 引く数を HC2に
	addq.w	#1,hl(a3)
	subq.w	#1,bc(a3)
	bne	@f
	move.b	#1,PV(a3)		* PV をクリア
@@:
	move.b	d4,d6
	sub.b	d0,d6			* 比較 かつ 結果を SZ にセット
	rts

CPIR:	andi.w	#%01110111_11111111,d6	* HC modeをクリア
	ori.w	#%00000010_00000000,d6	* Ｎ をセット
	clr.b	PV(a3)		* PV をセット		
loop_CPIR:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	addq.w	#1,hl(a3)
	subq.w	#1,bc(a3)
	beq	@f
	move.b	d4,d6
	sub.b	d0,d6			* 比較 かつ 結果を SZ にセット
	bne	loop_CPIR
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	d0,HC2(a3)		* 引く数を HC2に
	rts	
@@:
	move.b	#1,PV(a3)		* PV をクリア
	move.b	d4,d6
	sub.b	d0,d6			* 比較 かつ 結果を SZ にセット
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	d0,HC2(a3)		* 引く数を HC2に
	rts	

CPD:	andi.w	#%01110111_11111111,d6	* HC modeをクリア
	ori.w	#%00000010_00000000,d6	* Ｎ をセット
	clr.b	PV(a3)			* PV をセット		
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	d0,HC2(a3)		* 引く数を HC2に
	subq.w	#1,hl(a3)
	subq.w	#1,bc(a3)
	bne	@f
	move.b	#1,PV(a3)		* PV をクリア
@@:
	move.b	d4,d6
	sub.b	d0,d6			* 比較 かつ 結果を SZ にセット
	rts

CPDR:	andi.w	#%01110111_11111111,d6	* HC modeをクリア
	ori.w	#%00000010_00000000,d6	* Ｎ をセット
	clr.b	PV(a3)			* PV をセット		
loop_CPDR:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	subq.w	#1,hl(a3)
	subq.w	#1,bc(a3)
	beq	@f
	move.b	d4,d6
	sub.b	d0,d6			* 比較 かつ 結果を SZ にセット
	bne	loop_CPDR
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	d0,HC2(a3)		* 引く数を HC2に
	rts	
@@:	move.b	#1,PV(a3)		* PV をクリア
	move.b	d4,d6
	sub.b	d0,d6			* 比較 かつ 結果を SZ にセット
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	d0,HC2(a3)		* 引く数を HC2に
	rts	

*****************  フラグの動きが怪しい（たぶん大丈夫っぽいけど）***************
*	------ ＮＥＧ ------
NEG:	ori.w	#%00001011_00000000,d6	* Ｎ,Ｃ,HC modeをセット
	andi.w	#%01111111_11111111,d6	* SZ mode をクリア
	move.b	#1,PV(a3)		* PVをクリア
	neg.b	d4
	bvs	V_NEG
	bcs	C_NEG_1
	andi.w	#%11111110_11111111,d6	* Ｃをクリア
C_NEG_1:
	move.b	d4,d6			* SZ を設定
	move.b	d4,d5
	clr.b	HC2(a3)			* HC mode を１にしたから
	rts
V_NEG:
	bcs	C_NEG_2
	andi.w	#%11111110_11111111,d6	* Ｃをクリア
C_NEG_2:
	clr.b	PV(a3)			* PVをセット
	move.b	d4,d6			* SZ を設定
	move.b	d4,d5
	clr.b	HC2(a3)			* HC mode を１にしたから
	rts

*	------ 掛け算命令 ------
MULB_A_A:
	andi.w	#%01111110_00000000,d6	* Ｃ,SZ をクリア
	move.b	#1,PV(a3)		* PV をクリア
	clr.w	d0
	move.b	d4,d0			* d0 <- A
	mulu.w	d0,d0
	beq	@f
	move.b	#1,d6			* S フラグは常にクリアされるため
@@:	move.w	d0,hl(a3)		* このようにしないとダメ
	andi.w	#$ff00,d0
	beq	rts_common
	ori.w	#%00000001_00000000,d6
	rts

MULB_A_B:
	andi.w	#%01111110_00000000,d6	* Ｃ,SZ をクリア
	move.b	#1,PV(a3)		* PV をクリア
	clr.w	d0
	clr.w	d1
	move.b	d4,d0			* d0 <- A
	move.b	b(a3),d1		* d1 <- B
	mulu.w	d1,d0
	beq	@f
	move.b	#1,d6			* S フラグは常にクリアされるため
@@:
	move.w	d0,hl(a3)		* このようにしないとダメ
	andi.w	#$ff00,d0
	beq	rts_common
	ori.w	#%00000001_00000000,d6
	rts

MULB_A_C:
	andi.w	#%01111110_00000000,d6	* Ｃ,SZ をクリア
	move.b	#1,PV(a3)		* PV をクリア
	clr.w	d0
	clr.w	d1
	move.b	d4,d0			* d0 <- A
	move.b	c(a3),d1		* d1 <- B
	mulu.w	d1,d0
	beq	@f
	move.b	#1,d6			* S フラグは常にクリアされるため
@@:
	move.w	d0,hl(a3)		* このようにしないとダメ
	andi.w	#$ff00,d0
	beq	rts_common
	ori.w	#%00000001_00000000,d6
	rts

MULB_A_D:
	andi.w	#%01111110_00000000,d6	* Ｃ,SZ をクリア
	move.b	#1,PV(a3)		* PV をクリア
	clr.w	d0
	clr.w	d1
	move.b	d4,d0			* d0 <- A
	move.b	d(a3),d1		* d1 <- B
	mulu.w	d1,d0
	beq	@f
	move.b	#1,d6			* S フラグは常にクリアされるため
@@:
	move.w	d0,hl(a3)		* このようにしないとダメ
	andi.w	#$ff00,d0
	beq	rts_common
	ori.w	#%00000001_00000000,d6
	rts

MULB_A_E:
	andi.w	#%01111110_00000000,d6	* Ｃ,SZ をクリア
	move.b	#1,PV(a3)		* PV をクリア
	clr.w	d0
	clr.w	d1
	move.b	d4,d0			* d0 <- A
	move.b	e(a3),d1		* d1 <- B
	mulu.w	d1,d0
	beq	@f
	move.b	#1,d6			* S フラグは常にクリアされるため
@@:
	move.w	d0,hl(a3)		* このようにしないとダメ
	andi.w	#$ff00,d0
	beq	rts_common
	ori.w	#%00000001_00000000,d6
	rts

MULB_A_H:
	andi.w	#%01111110_00000000,d6	* Ｃ,SZ をクリア
	move.b	#1,PV(a3)		* PV をクリア
	clr.w	d0
	clr.w	d1
	move.b	d4,d0			* d0 <- A
	move.b	h(a3),d1		* d1 <- B
	mulu.w	d1,d0
	beq	@f
	move.b	#1,d6			* S フラグは常にクリアされるため
@@:
	move.w	d0,hl(a3)		* このようにしないとダメ
	andi.w	#$ff00,d0
	beq	rts_common
	ori.w	#%00000001_00000000,d6
	rts

MULB_A_L:
	andi.w	#%01111110_00000000,d6	* Ｃ,SZ をクリア
	move.b	#1,PV(a3)		* PV をクリア
	clr.w	d0
	clr.w	d1
	move.b	d4,d0			* d0 <- A
	move.b	l(a3),d1		* d1 <- B
	mulu.w	d1,d0
	beq	@f
	move.b	#1,d6			* S フラグは常にクリアされるため
@@:
	move.w	d0,hl(a3)		* このようにしないとダメ
	andi.w	#$ff00,d0
	beq	rts_common
	ori.w	#%00000001_00000000,d6
	rts

MULW_HL_BC:
	andi.w	#%01111110_00000000,d6	* Ｃ,SZ をクリア
	move.b	#1,PV(a3)		* PV をクリア
	move.w	hl(a3),d0		* d0 <- A
	mulu.w	bc(a3),d0
	beq	@f
	move.b	#1,d6			* S フラグは常にクリアされるため
@@:
	move.w	d0,hl(a3)		* このようにしないとダメ
	swap	d0
	move.w	d0,de(a3)		* 上位ワードを格納
	beq	rts_common			* 上位ワードが０の時はそのまま
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	rts

MULW_HL_DE:
	andi.w	#%01111110_00000000,d6	* Ｃ,SZ をクリア
	move.b	#1,PV(a3)		* PV をクリア
	move.w	hl(a3),d0		* d0 <- A
	mulu.w	de(a3),d0
	beq	@f
	move.b	#1,d6			* S フラグは常にクリアされるため
@@:
	move.w	d0,hl(a3)		* このようにしないとダメ
	swap	d0
	move.w	d0,de(a3)		* 上位ワードを格納
	beq	rts_common			* 上位ワードが０の時はそのまま
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	rts

MULW_HL_HL:
	andi.w	#%01111110_00000000,d6	* Ｃ,SZ をクリア
	move.b	#1,PV(a3)		* PV をクリア
	move.w	hl(a3),d0		* d0 <- A
	mulu.w	d0,d0
	beq	@f
	move.b	#1,d6			* S フラグは常にクリアされるため
@@:
	move.w	d0,hl(a3)		* このようにしないとダメ
	swap	d0
	move.w	d0,de(a3)		* 上位ワードを格納
	beq	rts_common			* 上位ワードが０の時はそのまま
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	rts

MULW_HL_SP:
	andi.w	#%01111110_00000000,d6	* Ｃ,SZ をクリア
	move.b	#1,PV(a3)		* PV をクリア
	move.w	hl(a3),d0		* d0 <- A
	mulu.w	sp_(a3),d0
	beq	@f
	move.b	#1,d6			* S フラグは常にクリアされるため
@@:
	move.w	d0,hl(a3)		* このようにしないとダメ
	swap	d0
	move.w	d0,de(a3)		* 上位ワードを格納
	beq	rts_common			* 上位ワードが０の時はそのまま
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	rts


*	------ ＬＤ Ｒ ------
*	RレジスタはM1サイクルごとにインクリメントされるレジスタ
*	LD R,A で代入も可能。インクリメントされるのは下位7bit(Z80)のため、
*	bit7は LR R,Aで代入した値がそのまま残る
*	ms.x では、M1サイクルを正確に数えていないので、emu_counterで代用
LD_A_R:	andi.w	#%01110101_11111111,d6	* HC mode, N をクリア
	move.b	emu_counter,d0
	andi.b	#%01111111,d0		* 下位7bitのみ
	move.b	r(a3),d4
	andi.b	#%10000000,d4		* bit7 を取り出す
	or.b	d0,d4
	move.b	d4,d6			* SZ をセット
	move.b	d5,HC2(a3)		* HC を０に (HC1であるd5とメモリ上のHC2を同じにする)

	move.b	#1,PV(a3)		* PV をクリア(1が奇数個ならPV=0)
	cmpi.b	#0,interrupt_enable	* IFF の状態を反映
	beq	rts_common		* DI 状態の時 P/V <- 0
	move.b	#0,PV(a3)		* PV をセット(1が偶数個ならPV=1)
	rts		* EI 状態の時 P/V <- 1

LD_R_A:	move.b	d4,r(a3)
	rts


*	------ ＬＤ Ｉ ------
LD_A_I:	andi.w	#%01110101_11111111,d6	* HC mode, N をクリア
	move.b	i(a3),d4
	move.b	d4,d6			* SZ をセット
	move.b	d5,HC2(a3)		* HC を０に (HC1であるd5とメモリ上のHC2を同じにする)

	move.b	#1,PV(a3)		* PV をクリア(1が奇数個ならPV=0)
	cmpi.b	#0,interrupt_enable	* IFF の状態を反映
	beq	rts_common		* DI 状態の時 P/V <- 0
	move.b	#0,PV(a3)		* PV をセット(1が偶数個ならPV=1)
	rts		* EI 状態の時 P/V <- 1

LD_I_A:	move.b	d4,i(a3)
	rts

*	ちゃんとやってない
*	------ ＲＥＴＮ ------
RETN:	move.w	sp_(a3),d0
	jsr	ms_read_mem_16
	addq.w	#2,sp_(a3)
	move.w	d0,d7
	PC_page_set
	rts

*	------ ＲＥＴＩ ------
RETI:	move.w	sp_(a3),d0
	jsr	ms_read_mem_16
	addq.w	#2,sp_(a3)
	move.w	d0,d7
	PC_page_set
	rts

*************************************************************************
*
*	＄ＤＤ,＄ＦＤライン命令
*		（Ｉｎｄｅｘ関係）
*
*************************************************************************
DD:	clr.w	d0
	move.b	1(a4,d7.w),d0
	addq.w	#2,d7
	btst.l	#14,d7
	beq	@f			* PC がページ境界をまたいだか？
	PC_page_inc			* またいだ時
	andi.w	#$3fff,d7
	beq	@f
	move.b	(a4),d0			* 読み直し
@@:	move.w	DD_FD_JPT(pc,d0.w*2),d2
	clr.l	d1
	jmp	DD_FD_JPT(pc,d2.w)

FD:	clr.w	d0
	move.b	1(a4,d7.w),d0
	addq.w	#2,d7
	btst.l	#14,d7
	beq	@f			* PC がページ境界をまたいだか？
	PC_page_inc			* またいだ時
	andi.w	#$3fff,d7
	beq	@f
	move.b	(a4),d0			* 読み直し
@@:	move.w	DD_FD_JPT(pc,d0.w*2),d2
	moveq.l	#2,d1
	jmp	DD_FD_JPT(pc,d2.w)

DD_2:	move.b	0(a4,d7.w),d0
	add.w	#1,d7
	andi.w	#$3fff,d7
	bne	@f
	PC_page_inc
@@:	move.w	DD_FD_JPT(pc,d0.w*2),d2
	clr.l	d1
	jmp	DD_FD_JPT(pc,d2.w)

FD_2:	move.b	0(a4,d7.w),d0
	add.w	#1,d7
	andi.w	#$3fff,d7
	bne	@f
	PC_page_inc
@@:	move.w	DD_FD_JPT(pc,d0.w*2),d2
	moveq.l	#2,d1
	jmp	DD_FD_JPT(pc,d2.w)


DD_FD_JPT:
	.dc.w	none_DD_FD-DD_FD_JPT		* $00
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	LD_B_n_2-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $08
	.dc.w	ADD_Idx_BC-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	LD_C_n_2-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $0f

	.dc.w	none_DD_FD-DD_FD_JPT		* $10
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	LD_D_n_2-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $18
	.dc.w	ADD_Idx_DE-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	LD_E_n_2-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $1f

	.dc.w	none_DD_FD-DD_FD_JPT		* $20
	.dc.w	LD_Idx_nn-DD_FD_JPT
	.dc.w	LD_lnnl_Idx-DD_FD_JPT
	.dc.w	INC_Idx-DD_FD_JPT
	.dc.w	INC_IdxH-DD_FD_JPT
	.dc.w	DEC_IdxH-DD_FD_JPT
	.dc.w	LD_IdxH_n-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $28
	.dc.w	ADD_Idx_Idx-DD_FD_JPT
	.dc.w	LD_Idx_lnnl-DD_FD_JPT
	.dc.w	DEC_Idx-DD_FD_JPT
	.dc.w	INC_IdxL-DD_FD_JPT
	.dc.w	DEC_IdxL-DD_FD_JPT
	.dc.w	LD_IdxL_n-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $2f

	.dc.w	none_DD_FD-DD_FD_JPT		* $30
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	INC_lIdx_dl-DD_FD_JPT
	.dc.w	DEC_lIdx_dl-DD_FD_JPT
	.dc.w	LD_lIdx_dl_n-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $38
	.dc.w	ADD_Idx_SP-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	LD_A_n_2-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $3f

	.dc.w	LD_B_B_2-DD_FD_JPT		* $40
	.dc.w	LD_B_C_2-DD_FD_JPT
	.dc.w	LD_B_D_2-DD_FD_JPT
	.dc.w	LD_B_E_2-DD_FD_JPT
	.dc.w	LD_B_IdxH-DD_FD_JPT
	.dc.w	LD_B_IdxL-DD_FD_JPT
	.dc.w	LD_B_lIdx_dl-DD_FD_JPT
	.dc.w	LD_B_A_2-DD_FD_JPT
	.dc.w	LD_C_B_2-DD_FD_JPT		* $48
	.dc.w	LD_C_C_2-DD_FD_JPT
	.dc.w	LD_C_D_2-DD_FD_JPT
	.dc.w	LD_C_E_2-DD_FD_JPT
	.dc.w	LD_C_IdxH-DD_FD_JPT
	.dc.w	LD_C_IdxL-DD_FD_JPT
	.dc.w	LD_C_lIdx_dl-DD_FD_JPT
	.dc.w	LD_C_A_2-DD_FD_JPT		* $4f

	.dc.w	LD_D_B_2-DD_FD_JPT		* $50
	.dc.w	LD_D_C_2-DD_FD_JPT
	.dc.w	LD_D_D_2-DD_FD_JPT
	.dc.w	LD_D_E_2-DD_FD_JPT
	.dc.w	LD_D_IdxH-DD_FD_JPT
	.dc.w	LD_D_IdxL-DD_FD_JPT
	.dc.w	LD_D_lIdx_dl-DD_FD_JPT
	.dc.w	LD_D_A_2-DD_FD_JPT
	.dc.w	LD_E_B_2-DD_FD_JPT		* $58
	.dc.w	LD_E_C_2-DD_FD_JPT
	.dc.w	LD_E_D_2-DD_FD_JPT
	.dc.w	LD_E_E_2-DD_FD_JPT
	.dc.w	LD_E_IdxH-DD_FD_JPT
	.dc.w	LD_E_IdxL-DD_FD_JPT
	.dc.w	LD_E_lIdx_dl-DD_FD_JPT
	.dc.w	LD_E_A_2-DD_FD_JPT		* $5f

	.dc.w	LD_IdxH_B-DD_FD_JPT		* $60
	.dc.w	LD_IdxH_C-DD_FD_JPT
	.dc.w	LD_IdxH_D-DD_FD_JPT
	.dc.w	LD_IdxH_E-DD_FD_JPT
	.dc.w	LD_IdxH_IdxH-DD_FD_JPT
	.dc.w	LD_IdxH_IdxL-DD_FD_JPT
	.dc.w	LD_H_lIdx_dl-DD_FD_JPT
	.dc.w	LD_IdxH_A-DD_FD_JPT
	.dc.w	LD_IdxL_B-DD_FD_JPT		* $68
	.dc.w	LD_IdxL_C-DD_FD_JPT
	.dc.w	LD_IdxL_D-DD_FD_JPT
	.dc.w	LD_IdxL_E-DD_FD_JPT
	.dc.w	LD_IdxL_IdxH-DD_FD_JPT
	.dc.w	LD_IdxL_IdxL-DD_FD_JPT
	.dc.w	LD_L_lIdx_dl-DD_FD_JPT
	.dc.w	LD_IdxL_A-DD_FD_JPT		* $6f

	.dc.w	LD_lIdx_dl_B-DD_FD_JPT	* $70
	.dc.w	LD_lIdx_dl_C-DD_FD_JPT
	.dc.w	LD_lIdx_dl_D-DD_FD_JPT
	.dc.w	LD_lIdx_dl_E-DD_FD_JPT
	.dc.w	LD_lIdx_dl_H-DD_FD_JPT
	.dc.w	LD_lIdx_dl_L-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	LD_lIdx_dl_A-DD_FD_JPT
	.dc.w	LD_A_B_2-DD_FD_JPT		* $78
	.dc.w	LD_A_C_2-DD_FD_JPT
	.dc.w	LD_A_D_2-DD_FD_JPT
	.dc.w	LD_A_E_2-DD_FD_JPT
	.dc.w	LD_A_IdxH-DD_FD_JPT
	.dc.w	LD_A_IdxL-DD_FD_JPT
	.dc.w	LD_A_lIdx_dl-DD_FD_JPT
	.dc.w	LD_A_A_2-DD_FD_JPT		* $7f

	.dc.w	none_DD_FD-DD_FD_JPT		* $80
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	ADD_A_IdxH-DD_FD_JPT
	.dc.w	ADD_A_IdxL-DD_FD_JPT
	.dc.w	ADD_A_lIdx_dl-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $88
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	ADC_A_IdxH-DD_FD_JPT
	.dc.w	ADC_A_IdxL-DD_FD_JPT
	.dc.w	ADC_A_lIdx_dl-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $8f

	.dc.w	none_DD_FD-DD_FD_JPT		* $90
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	SUB_IdxH-DD_FD_JPT
	.dc.w	SUB_IdxL-DD_FD_JPT
	.dc.w	SUB_lIdx_dl-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $98
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	SBC_A_IdxH-DD_FD_JPT
	.dc.w	SBC_A_IdxL-DD_FD_JPT
	.dc.w	SBC_A_lIdx_dl-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $9f

	.dc.w	none_DD_FD-DD_FD_JPT		* $a0
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	AND_IdxH-DD_FD_JPT
	.dc.w	AND_IdxL-DD_FD_JPT
	.dc.w	AND_lIdx_dl-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $a8
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	XOR_IdxH-DD_FD_JPT
	.dc.w	XOR_IdxL-DD_FD_JPT
	.dc.w	XOR_lIdx_dl-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $af

	.dc.w	none_DD_FD-DD_FD_JPT		* $b0
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	OR_IdxH-DD_FD_JPT
	.dc.w	OR_IdxL-DD_FD_JPT
	.dc.w	OR_lIdx_dl-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $b8
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	CP_IdxH-DD_FD_JPT
	.dc.w	CP_IdxL-DD_FD_JPT
	.dc.w	CP_lIdx_dl-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $bf

	.dc.w	none_DD_FD-DD_FD_JPT		* $c0
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $c8
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	DD_FD_CB-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $cf

	.dc.w	none_DD_FD-DD_FD_JPT		* $d0
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $d8
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	DD_2-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $df

	.dc.w	none_DD_FD-DD_FD_JPT		* $e0
	.dc.w	POP_Idx-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	EX_lSPl_Idx-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	PUSH_Idx-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $e8
	.dc.w	JP_lIdxl-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $ef

	.dc.w	none_DD_FD-DD_FD_JPT		* $f0
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT		* $f8
	.dc.w	LD_SP_Idx-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	none_DD_FD-DD_FD_JPT
	.dc.w	FD_2-DD_FD_JPT
	.dc.w	stop-DD_FD_JPT
	.dc.w	system_end-DD_FD_JPT		* $ff

none_DD_FD:					* おかしな命令を実行しました
	move.w	d0,d1
	lsr.w	#4,d0
	lea.l	HEX,a0
	move.b	(a0,d0.w),number_ddfd+0
	andi.w	#$0f,d1
	move.b	(a0,d1.w),number_ddfd+1

	pea.l	errms_ddfd
	DOS	__PRINT
	lea.l	4(sp),sp
	move.b	#$ff,d0
	rts

errms_ddfd:
	.dc.b	'おかしな命令を実行しました。0xdd or 0xfd,0x'
number_ddfd:
	.dc.b	'00'
	.dc.b	0x0d,0x0a,0x00

	.even

LD_A_A_2:
	rts
LD_A_B_2:
	move.b	b(a3),d4
	rts
LD_A_C_2:
	move.b	c(a3),d4
	rts
LD_A_D_2:
	move.b	d(a3),d4
	rts
LD_A_E_2:
	move.b	e(a3),d4
	rts
LD_A_IdxH:
	move.b	ix_h(a3,d1.w),d4
	rts
LD_A_IdxL:
	move.b	ix_l(a3,d1.w),d4
	rts
LD_A_n_2:
	move.b	0(a4,d7.w),d4
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

LD_B_A_2:
	move.b	d4,b(a3)
	rts
LD_B_B_2:
	rts
LD_B_C_2:
	move.b	c(a3),b(a3)
	rts
LD_B_D_2:
	move.b	d(a3),b(a3)
	rts
LD_B_E_2:
	move.b	e(a3),b(a3)
	rts
LD_B_IdxH:
	move.b	ix_h(a3,d1.w),b(a3)
	rts
LD_B_IdxL:
	move.b	ix_l(a3,d1.w),b(a3)
	rts
LD_B_n_2:
	move.b	0(a4,d7.w),b(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

LD_C_A_2:
	move.b	d4,c(a3)
	rts
LD_C_B_2:
	move.b	b(a3),c(a3)
	rts
LD_C_C_2:
	rts
LD_C_D_2:
	move.b	d(a3),c(a3)
	rts
LD_C_E_2:
	move.b	e(a3),c(a3)
	rts
LD_C_IdxH:
	move.b	ix_h(a3,d1.w),c(a3)
	rts
LD_C_IdxL:
	move.b	ix_l(a3,d1.w),c(a3)
	rts
LD_C_n_2:
	move.b	0(a4,d7.w),c(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

LD_D_A_2:
	move.b	d4,d(a3)
	rts
LD_D_B_2:
	move.b	b(a3),d(a3)
	rts
LD_D_C_2:
	move.b	c(a3),d(a3)
	rts
LD_D_D_2:
	rts
LD_D_E_2:
	move.b	e(a3),d(a3)
	rts
LD_D_IdxH:
	move.b	ix_h(a3,d1.w),d(a3)
	rts
LD_D_IdxL:
	move.b	ix_l(a3,d1.w),d(a3)
	rts
LD_D_n_2:
	move.b	0(a4,d7.w),d(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

LD_E_A_2:
	move.b	d4,e(a3)
	rts
LD_E_B_2:
	move.b	b(a3),e(a3)
	rts
LD_E_C_2:
	move.b	c(a3),e(a3)
	rts
LD_E_D_2:
	move.b	d(a3),e(a3)
	rts
LD_E_E_2:
	rts
LD_E_IdxH:
	move.b	ix_h(a3,d1.w),e(a3)
	rts
LD_E_IdxL:
	move.b	ix_l(a3,d1.w),e(a3)
	rts
LD_E_n_2:
	move.b	0(a4,d7.w),e(a3)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7			* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

LD_IdxH_A:
	move.b	d4,ix_h(a3,d1.w)
	rts
LD_IdxL_A:
	move.b	d4,ix_l(a3,d1.w)
	rts
LD_IdxH_B:
	move.b	b(a3),ix_h(a3,d1.w)
	rts
LD_IdxL_B:
	move.b	b(a3),ix_l(a3,d1.w)
	rts
LD_IdxH_C:
	move.b	c(a3),ix_h(a3,d1.w)
	rts
LD_IdxL_C:
	move.b	c(a3),ix_l(a3,d1.w)
	rts
LD_IdxH_D:
	move.b	d(a3),ix_h(a3,d1.w)
	rts
LD_IdxL_D:
	move.b	d(a3),ix_l(a3,d1.w)
	rts
LD_IdxH_E:
	move.b	e(a3),ix_h(a3,d1.w)
	rts
LD_IdxL_E:
	move.b	e(a3),ix_l(a3,d1.w)
	rts
LD_IdxH_IdxH:
	rts
LD_IdxL_IdxH:
	move.b	ix_h(a3,d1.w),ix_l(a3,d1.w)
	rts
LD_IdxH_IdxL:
	move.b	ix_l(a3,d1.w),ix_h(a3,d1.w)
	rts
LD_IdxL_IdxL:
	rts
LD_IdxH_n:
	move.b	0(a4,d7.w),ix_h(a3,d1.w)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts
LD_IdxL_n:
	move.b	0(a4,d7.w),ix_l(a3,d1.w)
	addq.w	#1,d7			* PC += 1
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	rts_common
	PC_page_inc
	rts

ADD_A_IdxH:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	ix_h(a3,d1.w),d0
	move.b	d0,HC2(a3)		* 足す数を HC2に
	add.b	d0,d4
	bvs	V_ADD_A			* オーバーフロー？
	bcc	NC_ADD_A1
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6			* 結果を SZ にセット		
	move.b	d4,d5			* 結果を HC1にセット
	rts
ADD_A_IdxL:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	ix_l(a3,d1.w),d0
	move.b	d0,HC2(a3)		* 足す数を HC2に
	add.b	d0,d4
	bvs	V_ADD_A			* オーバーフロー？
	bcc	NC_ADD_A1
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6			* 結果を SZ にセット		
	move.b	d4,d5			* 結果を HC1にセット
	rts

ADC_A_IdxH:
	btst.l	#8,d6
	beq	ADD_A_IdxH		* Cy が０の時 ADD と同じ
	andi.w	#%01111100_00000000,d6	* ＮＣをクリア
	ori.w	#%00001000_00000000,d6	* HC モードをセット
	subq.b	#1,d6			* X ビットをセット
	move.b	ix_h(a3,d1.w),d0
	move.b	d0,HC2(a3)		* 足す数を HC2に
	addx.b	d0,d4
	bvs	V_ADC_A			* オーバーフロー？
	bcc	NC_ADC_A1
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6			* 結果を SZ にセット		
	move.b	d4,d5			* 結果を HC1にセット
	rts
ADC_A_IdxL:
	btst.l	#8,d6
	beq	ADD_A_IdxL		* Cy が０の時 ADD と同じ
	andi.w	#%01111100_00000000,d6	* ＮＣをクリア
	ori.w	#%00001000_00000000,d6	* HC モードをセット
	subq.b	#1,d6			* X ビットをセット
	move.b	ix_l(a3,d1.w),d0
	move.b	d0,HC2(a3)		* 足す数を HC2に
	addx.b	d0,d4
	bvs	V_ADC_A			* オーバーフロー？
	bcc	NC_ADC_A1
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6			* 結果を SZ にセット		
	move.b	d4,d5			* 結果を HC1にセット
	rts

SUB_IdxH:
	andi.w	#%01110110_11111111,d6	* Ｃ,HC mode をクリア
	ori.w	#%00000010_00000000,d6	* Ｎをセット
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	ix_h(a3,d1.w),HC2(a3)	* 引く数を HC2に
	sub.b	HC2(a3),d4
	bvs	V_SUB_A			* オーバーフロー？
	bcs	C_SUB_A1
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6
	rts
SUB_IdxL:
	andi.w	#%01110110_11111111,d6	* Ｃ,HC mode をクリア
	ori.w	#%00000010_00000000,d6	* Ｎをセット
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	ix_l(a3,d1.w),HC2(a3)	* 引く数を HC2に
	sub.b	HC2(a3),d4
	bvs	V_SUB_A			* オーバーフロー？
	bcs	C_SUB_A1
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6
	rts

SBC_A_IdxH:
	btst.l	#8,d6
	beq	SUB_IdxH		* Cy が０の時 SUB と同じ
	ori.w	#%00001011_00000000,d6	* Ｎ,Ｃ, HC mode をセット
	clr.w	d0			* X ビットをセット
	subq.w	#1,d0
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	ix_h(a3,d1.w),d0
	move.b	d0,HC2(a3)		* 引く数を HC2に
	subx.b	d0,d4
	bvs	V_SBC_A			* オーバーフロー？
	bcc	NC_SBC_A1
	move.b	#1,PV(a3)		* PVをクリア
	andi.w	#%01111111_11111111,d6	* SZ mode をクリア
	move.b	d4,d6			* 結果を SZ にセット
	rts
SBC_A_IdxL:
	btst.l	#8,d6
	beq	SUB_IdxL		* Cy が０の時 SUB と同じ
	ori.w	#%00001011_00000000,d6	* Ｎ,Ｃ, HC mode をセット
	clr.w	d0			* X ビットをセット
	subq.w	#1,d0
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	ix_l(a3,d1.w),d0
	move.b	d0,HC2(a3)		* 引く数を HC2に
	subx.b	d0,d4
	bvs	V_SBC_A			* オーバーフロー？
	bcc	NC_SBC_A1
	move.b	#1,PV(a3)		* PVをクリア
	andi.w	#%01111111_11111111,d6	* SZ mode をクリア
	move.b	d4,d6			* 結果を SZ にセット
	rts

AND_IdxH:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	clr.b	d5			* HC を 1に
	move.b	#1,HC2(a3)
	and.b	ix_h(a3,d1.w),d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	
AND_IdxL:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	clr.b	d5			* HC を 1に
	move.b	#1,HC2(a3)
	and.b	ix_l(a3,d1.w),d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

XOR_IdxH:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC を 0に。( HC1 = HC2 の時, HCは０)
	move.b	ix_h(a3,d1.w),d0	* eor <ea>,Dn という命令はないので。
	eor.b	d0,d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	
XOR_IdxL:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC を 0に。( HC1 = HC2 の時, HCは０)
	move.b	ix_l(a3,d1.w),d0	* eor <ea>,Dn という命令はないので。
	eor.b	d0,d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

OR_IdxH:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC を 0に。( HC1 = HC2 の時, HCは０)
	or.b	ix_h(a3,d1.w),d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	
OR_IdxL:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC を 0に。( HC1 = HC2 の時, HCは０)
	or.b	ix_l(a3,d1.w),d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

CP_IdxH:
	andi.w	#%01110110_11111111,d6	* Ｃ,HC mode をクリア
	ori.w	#%00000010_00000000,d6	* Ｎをセット
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	ix_h(a3,d1.w),HC2(a3)	* 引く数を HC2に
	move.b	d4,d6			* 比較かつ結果をSZにセット
	sub.b	ix_h(a3,d1.w),d6
	bvs	V_CP_A			* オーバーフロー？
	bcs	C_CP_A1
	move.b	#1,PV(a3)		* PVをクリア
	rts
CP_IdxL:
	andi.w	#%01110110_11111111,d6	* Ｃ,HC mode をクリア
	ori.w	#%00000010_00000000,d6	* Ｎをセット
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	ix_l(a3,d1.w),HC2(a3)	* 引く数を HC2に
	move.b	d4,d6			* 比較かつ結果をSZにセット
	sub.b	ix_h(a3,d1.w),d6
	bvs	V_CP_A			* オーバーフロー？
	bcs	C_CP_A1
	move.b	#1,PV(a3)		* PVをクリア
	rts

INC_IdxH:
	andi.w	#%01110101_11111111,d6	* Ｎ,HC modeをクリア
	clr.b	PV(a3)		* PVをセット	
	move.b	ix_h(a3,d1.w),d0
	addq.b	#1,d0
	bVS	@f
	move.b	#1,PV(a3)		* PVをクリア
@@:	move.b	d0,d6
	move.b	d0,d5
	move.b	d0,ix_h(a3,d1.w)
	move.b	#1,HC2(a3)
	rts
INC_IdxL:
	andi.w	#%01110101_11111111,d6	* Ｎ,HC modeをクリア
	clr.b	PV(a3)			* PVをセット	
	move.b	ix_l(a3,d1.w),d0
	addq.b	#1,d0
	bVS	@f
	move.b	#1,PV(a3)		* PVをクリア
@@:	move.b	d0,d6
	move.b	d0,d5
	move.b	d0,ix_l(a3,d1.w)
	move.b	#1,HC2(a3)
	rts

DEC_IdxH:
	ori.w	#%00001010_00000000,d6	* Ｎ,HC modeをセット
	andi.w	#%01111111_11111111,d6
	clr.b	PV(a3)			* PVをセット	
	move.b	ix_h(a3,d1.w),d0
	move.b	d0,d5			* 引かれる数を HC1 に
	subq.b	#1,d0
	bVS	@f
	move.b	#1,PV(a3)		* PVをクリア
@@:	move.b	d0,d6
	move.b	d0,ix_h(a3,d1.w)
	clr.b	HC2(a3)
	rts
DEC_IdxL:
	ori.w	#%00001010_00000000,d6	* Ｎ,HC modeをセット
	andi.w	#%01111111_11111111,d6
	clr.b	PV(a3)			* PVをセット	
	move.b	ix_l(a3,d1.w),d0
	move.b	d0,d5			* 引かれる数を HC1 に
	subq.b	#1,d0
	bVS	@f
	move.b	#1,PV(a3)		* PVをクリア
@@:	move.b	d0,d6
	move.b	d0,ix_l(a3,d1.w)
	clr.b	HC2(a3)
	rts



ADD_A_lIdx_dl:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	@f
	PC_page_inc
@@:
	jsr	ms_read_mem_8
	move.b	d0,HC2(a3)		* 足す数を HC2に
	add.b	d0,d4
	bvs	V_ADD_A			* オーバーフロー？
	bcc	NC_ADD_A1
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6
	move.b	d4,d5
	rts

ADC_A_lIdx_dl:
	btst.l	#8,d6
	beq	ADD_A_lIdx_dl		* Cy が０の時 ADD と同じ
	andi.w	#%01111100_00000000,d6	* Ｎ,Ｃ,HC mode をクリア
	ori.w	#%00001000_00000000,d6	* HC モードをセット
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	@f
	PC_page_inc
@@:
	jsr	ms_read_mem_8
	subq.b	#1,d6			* X ビットをセット
	move.b	d0,HC2(a3)		* 足す数を HC2に
	addx.b	d0,d4
	bvs	V_ADD_A			* オーバーフロー？
	bcc	NC_ADD_A1
	ori.w	#%00000001_00000000,d6	* Ｃをセット
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6			* 結果を SZ にセット		
	move.b	d4,d5			* 結果を HC1にセット
	rts

SUB_lIdx_dl:
	andi.w	#%01110110_11111111,d6	* Ｃ,HC mode をクリア
	ori.w	#%00000010_00000000,d6	* Ｎをセット
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	@f
	PC_page_inc
@@:
	jsr	ms_read_mem_8
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	d0,HC2(a3)		* 引く数を HC2に
	sub.b	d0,d4
	bvs	V_SUB_A			* オーバーフロー？
	bcs	C_SUB_A1
	move.b	#1,PV(a3)		* PVをクリア
	move.b	d4,d6
	rts

SBC_A_lIdx_dl:
	btst.l	#8,d6
	beq	SUB_lIdx_dl		* Cy が０の時 SUB と同じ
	ori.w	#%00001011_00000000,d6	* Ｎ,Ｃ, HC mode をセット
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	@f
	PC_page_inc
@@:
	jsr	ms_read_mem_8
	clr.b	d6			* X ビットをセット
	subq.b	#1,d6
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	d0,HC2(a3)		* 引く数を HC2に
	subx.b	d0,d4
	bvs	V_SBC_A			* オーバーフロー？
	bcc	NC_SBC_A1
	move.b	#1,PV(a3)		* PVをクリア
	andi.w	#%01111111_11111111,d6
	move.b	d4,d6			* 結果を SZ にセット
	rts

AND_lIdx_dl:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	clr.b	d5			* HC を 1に
	move.b	#1,HC2(a3)
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	@f
	PC_page_inc
@@:
	jsr	ms_read_mem_8
	and.b	d0,d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

XOR_lIdx_dl:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC を 0に。( HC1 = HC2 の時, HCは０)
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	@f
	PC_page_inc
@@:
	jsr	ms_read_mem_8
	eor.b	d0,d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

OR_lIdx_dl:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC を 0に。( HC1 = HC2 の時, HCは０)
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	@f
	PC_page_inc
@@:
	jsr	ms_read_mem_8
	or.b	d0,d4
	move.b	d4,PV(a3)		* PV をセット
	move.b	d4,d6			* SZ をセット
	rts	

CP_lIdx_dl:
	andi.w	#%01110110_00000000,d6	* Ｃ,HC mode をクリア。SZ,SZ modeを０に
	ori.w	#%00000010_00000000,d6	* Ｎをセット
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	@f
	PC_page_inc
@@:
	jsr	ms_read_mem_8
	move.b	d4,d5			* 引かれる数を HC1に
	move.b	d0,HC2(a3)		* 引く数を HC2に
	move.b	d4,d6
	sub.b	d0,d6
	bvs	V_CP_A			* オーバーフロー？
	bcs	C_CP_A1
	move.b	#1,PV(a3)		* PVをクリア
	rts

INC_lIdx_dl:
	andi.w	#%01110101_00000000,d6	* Ｎ,HC modeをクリア。SZ,SZ modeを０に
	clr.b	PV(a3)			* PVをセット	
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	@f
	PC_page_inc
@@:
	move.w	d0,-(sp)
	jsr	ms_read_mem_8
	addq.b	#1,d0
	bVS	@f			* オーバーフロー？
	move.b	#1,PV(a3)		* PVをクリア
@@:
	move.b	d0,d6
	move.b	d0,d5
	move.b	#1,HC2(a3)

	move.b	d0,d1
	move.w	(sp)+,d0
	jsr	ms_write_mem_8
	rts

DEC_lIdx_dl:
	ori.w	#%00001010_00000000,d6	* Ｎ,HC modeをセット
	andi.w	#%01111111_11111111,d6	* SZ mode をクリア
	clr.b	PV(a3)			* PVをセット	
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	@f
	PC_page_inc
@@:	move.w	d0,-(sp)
	jsr	ms_read_mem_8
	move.b	d0,d5			* 引かれる数を HC1 に
	subq.b	#1,d0
	bVS	@f			* オーバーフロー？
	move.b	#1,PV(a3)		* PVをクリア
@@:	move.b	d0,d6
	clr.b	HC2(a3)

	move.b	d0,d1
	move.w	(sp)+,d0
	jsr	ms_write_mem_8
	rts


ADD_Idx_BC:
	andi.w	#%11111100_11111111,d6	* ＣｙとＮをクリア
	move.w	bc(a3),d0
	add.w	d0,ix(a3,d1.w)
	bcc	rts_common
	ori.w	#%00000001_00000000,d6	* Ｃｙをセット
	rts

ADD_Idx_DE:
	andi.w	#%11111100_11111111,d6	* ＣｙとＮをクリア
	move.w	de(a3),d0
	add.w	d0,ix(a3,d1.w)
	bcc	rts_common
	ori.w	#%00000001_00000000,d6	* Ｃｙをセット
	rts

ADD_Idx_SP:
	andi.w	#%11111100_11111111,d6	* ＣｙとＮをクリア
	move.w	sp_(a3),d0
	add.w	d0,ix(a3,d1.w)
	bcc	rts_common
	ori.w	#%00000001_00000000,d6	* Ｃｙをセット
	rts

ADD_Idx_Idx:
	andi.w	#%11111100_11111111,d6	* ＣｙとＮをクリア
	move.w	ix(a3,d1.w),d0
	add.w	d0,ix(a3,d1.w)
	bcc	rts_common
	ori.w	#%00000001_00000000,d6	* Ｃｙをセット
	rts


*	------ ＬＤ Ｉｄｘ ------
LD_Idx_nn:
	move.b	0(a4,d7.w),ix_l(a3,d1.w)	* nn の下位８ビットを読む 
	move.b	1(a4,d7.w),ix_h(a3,d1.w)	* nn の上位８ビットを読む 
	addq.w	#2,d7
	btst.l	#14,d7
	beq	rts_common
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	bne	@f
	PC_page_inc		* d7 = 0 の時
	rts
@@:	PC_page_inc		* d7 = 1 の時
	move.b	(a4),ix_h(a3,d1.w)	* nn の上位８ビットを読む
	rts

LD_Idx_lnnl:
	move.b	1(a4,d7.w),d0		* nn の上位８ビットを読む 
	lsl.w	#8,d0
	move.b	0(a4,d7.w),d0		* nn の下位８ビットを読む 
	addq.w	#2,d7
	btst.l	#14,d7
	bne	@f
	jsr	ms_read_mem_16
	move.w	d0,ix(a3,d1.w)
	rts
@@:	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	bne	@f
	PC_page_inc		* d7 = 0 の時
	jsr	ms_read_mem_16
	move.w	d0,ix(a3,d1.w)
	rts
@@:
	move.b	d0,d2			* d7 = 1 の時
	PC_page_inc
	move.b	(a4),d0			* nn の上位８ビットを読む
	lsl.w	#8,d0
	move.b	d2,d0
	jsr	ms_read_mem_16
	move.w	d0,ix(a3,d1.w)
	rts

LD_lnnl_Idx:
	move.w	ix(a3,d1.w),d1
	move.b	1(a4,d7.w),d0		* nn の上位８ビットを読む 
	lsl.w	#8,d0
	move.b	0(a4,d7.w),d0		* nn の下位８ビットを読む 
	addq.w	#2,d7
	btst.l	#14,d7
	bne	@f
	jsr	ms_write_mem_16
	rts
@@:	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	bne	@f
	PC_page_inc		* d7 = 0 の時
	jsr	ms_write_mem_16
	rts
@@:
	move.b	d0,d2			* d7 = 1 の時
	PC_page_inc
	move.b	(a4),d0			* nn の上位８ビットを読む
	lsl.w	#8,d0
	move.b	d2,d0
	jsr	ms_write_mem_16
	rts

LD_SP_Idx:
	move.w	ix(a3,d1.w),sp_(a3)
	rts


*	------ ＩＮＣ ------
INC_Idx:				* フラグは不変
	addq.w	#1,ix(a3,d1.w)
	rts
DEC_Idx:
	subq.w	#1,ix(a3,d1.w)
	rts

*	------ ＬＤ ？,（Ｉｄｘ＋ｄ） ------
LD_A_lIdx_dl:
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,d4
	rts

LD_B_lIdx_dl:
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,b(a3)
	rts

LD_C_lIdx_dl:
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,c(a3)
	rts

LD_D_lIdx_dl:
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,d(a3)
	rts

LD_E_lIdx_dl:
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,e(a3)
	rts

LD_H_lIdx_dl:
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,h(a3)
	rts

LD_L_lIdx_dl:
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:
	jsr	ms_read_mem_8		*メモリから 8ビットのデータを d0に読み込む。
	move.b	d0,l(a3)
	rts


*	------ ＬＤ （Ｉｄｘ＋ｄ）,？ ------
LD_lIdx_dl_A:
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:
	move.b	d4,d1
	jsr	ms_write_mem_8
	rts

LD_lIdx_dl_B:
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:
	move.b	b(a3),d1
	jsr	ms_write_mem_8
	rts

LD_lIdx_dl_C:
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:
	move.b	c(a3),d1
	jsr	ms_write_mem_8
	rts

LD_lIdx_dl_D:
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:
	move.b	d(a3),d1
	jsr	ms_write_mem_8
	rts

LD_lIdx_dl_E:
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:
	move.b	e(a3),d1
	jsr	ms_write_mem_8
	rts

LD_lIdx_dl_H:
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:
	move.b	h(a3),d1
	jsr	ms_write_mem_8
	rts

LD_lIdx_dl_L:
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	add.w	#1,d7
	andi.w	#$3fff,d7		* PC がページ境界をまたいだか？
	bne	1f
	PC_page_inc
1:
	move.b	l(a3),d1
	jsr	ms_write_mem_8
	rts

LD_lIdx_dl_n:
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0
	move.b	1(a4,d7.w),d1		* n を読む
	add.w	#2,d7
	btst.l	#14,d7
	bne	1f
	jsr	ms_write_mem_8
	rts
1:	andi.w	#$3fff,d7		* 命令がページ境界をまたぐ時
	bne	1f
	PC_page_inc		* d7 = 0 の時
	jsr	ms_write_mem_8
	rts
1:
	move.b	d0,d2			* d7 = 1 の時
	PC_page_inc
	move.b	(a4),d0			* nn の上位８ビットを読む
	lsl.w	#8,d0
	move.b	d2,d0
	jsr	ms_write_mem_8
	rts


*	------ ＰＵＳＨ Ｉｄｘ
PUSH_Idx:
	subq.w	#2,sp_(a3)
	move.w	sp_(a3),d0
	move.w	ix(a3,d1.w),d1
	jsr	ms_write_mem_16
	rts

POP_Idx:
	move.w	sp_(a3),d0
	jsr	ms_read_mem_16
	addq.w	#2,sp_(a3)
	move.w	d0,ix(a3,d1.w)
	rts


*	------ ＪＰ (Ｉｄｘ) ------
JP_lIdxl:
	move.w	ix(a3,d1.w),d7
	PC_page_set
	rts


*	------ ＥＸ ------
EX_lSPl_Idx:
	move.w	sp_(a3),d0
	jsr	ms_read_mem_16
	move.w	ix(a3,d1.w),d2
	move.w	d0,ix(a3,d1.w)
	move.w	d2,d1
	move.w	sp_(a3),d0
	jsr	ms_write_mem_16
	rts

*	------ Ｓｙｓｔｅｍ Ｅｎｄ ------
system_end:
	bra	emu_end

*	------ デバッガに制御を渡す ------
stop:
	rts



**********************************************************************
*
*	ＤＤ，ＦＤ ＣＢライン命令
*
**********************************************************************
DD_FD_CB:
	move.w	ix(a3,d1.w),d0
	move.b	0(a4,d7.w),d1		* d を加える
	ext.w	d1
	add.w	d1,d0			* d0 = Idx + d
	move.b	1(a4,d7.w),d2
	add.w	#2,d7
	btst.l	#14,d7
	beq	1f
	andi.w	#$3fff,d7		* 命令がページ境界をまたぐとき
	bne	@f
	PC_page_inc			* d7 = 0 のとき
	bra	1f
@@:	PC_page_inc			* d7 = 1 のとき
	move.b	(a4),d2			* -1(a4,d7.w) = (a4)

1:	subq.b	#6,d2
	andi.w	#$00f8,d2
	lsr.w	#2,d2			* d2 = (第二オペランド - 6) / 8 * 2
	move.w	DD_FD_CB_JPT(pc,d2.w),d1
	jmp	DD_FD_CB_JPT(pc,d1.w)

DD_FD_CB_JPT:
	.dc.w	RLC_lIdx_dl-DD_FD_CB_JPT		* 06
	.dc.w	RRC_lIdx_dl-DD_FD_CB_JPT		* 0e
	.dc.w	RL_lIdx_dl-DD_FD_CB_JPT			* 16
	.dc.w	RR_lIdx_dl-DD_FD_CB_JPT			* 1e
	.dc.w	SLA_lIdx_dl-DD_FD_CB_JPT		* 26
	.dc.w	SRA_lIdx_dl-DD_FD_CB_JPT		* 2e
	.dc.w	SLI_lIdx_dl-DD_FD_CB_JPT		* 36
	.dc.w	SRL_lIdx_dl-DD_FD_CB_JPT		* 3e

	.dc.w	BIT_lIdx_dl-DD_FD_CB_JPT		* 46
	.dc.w	BIT_lIdx_dl-DD_FD_CB_JPT		* 4e
	.dc.w	BIT_lIdx_dl-DD_FD_CB_JPT		* 56
	.dc.w	BIT_lIdx_dl-DD_FD_CB_JPT		* 5e
	.dc.w	BIT_lIdx_dl-DD_FD_CB_JPT		* 66
	.dc.w	BIT_lIdx_dl-DD_FD_CB_JPT		* 6e
	.dc.w	BIT_lIdx_dl-DD_FD_CB_JPT		* 76
	.dc.w	BIT_lIdx_dl-DD_FD_CB_JPT		* 7e

	.dc.w	RES_lIdx_dl-DD_FD_CB_JPT		* 86
	.dc.w	RES_lIdx_dl-DD_FD_CB_JPT
	.dc.w	RES_lIdx_dl-DD_FD_CB_JPT
	.dc.w	RES_lIdx_dl-DD_FD_CB_JPT
	.dc.w	RES_lIdx_dl-DD_FD_CB_JPT
	.dc.w	RES_lIdx_dl-DD_FD_CB_JPT
	.dc.w	RES_lIdx_dl-DD_FD_CB_JPT
	.dc.w	RES_lIdx_dl-DD_FD_CB_JPT		* bf

	.dc.w	SET_lIdx_dl-DD_FD_CB_JPT		* c6
	.dc.w	SET_lIdx_dl-DD_FD_CB_JPT
	.dc.w	SET_lIdx_dl-DD_FD_CB_JPT
	.dc.w	SET_lIdx_dl-DD_FD_CB_JPT
	.dc.w	SET_lIdx_dl-DD_FD_CB_JPT
	.dc.w	SET_lIdx_dl-DD_FD_CB_JPT
	.dc.w	SET_lIdx_dl-DD_FD_CB_JPT
	.dc.w	SET_lIdx_dl-DD_FD_CB_JPT		* fe

SET_lIdx_dl:
	andi.w	#%00000000_00000111,d2		* BIT_n_? の n を d2にロード
	move.w	d0,-(sp)			* Idx + d をプッシュ
	jsr	ms_read_mem_8
	bset.l	d2,d0				* (Idx + d)の nビット目をセット
	move.b	d0,d1
	move.w	(sp)+,d0
	jsr	ms_write_mem_8		
	rts

RES_lIdx_dl:
	andi.w	#%00000000_00000111,d2		* BIT_n_? の n を d2にロード
	move.w	d0,-(sp)			* Idx + d をプッシュ
	jsr	ms_read_mem_8
	bclr.l	d2,d0				* (Idx + d)の nビット目をクリア
	move.b	d0,d1
	move.w	(sp)+,d0
	jsr	ms_write_mem_8		
	rts

BIT_lIdx_dl:
	andi.w	#%11110101_00000000,d6		* N, HC modeを０に。 ＳＺを０に
	clr.b	d5				* HC を１に
	move.b	#1,HC2(a3)
	andi.w	#%00000000_00000111,d2		* BIT_n_? の n を d2にロード
	jsr	ms_read_mem_8
	btst.l	d2,d0				* (Idx + d)の nビット目をテスト
	beq	rts_common
	move.b	#1,d6
	rts

RLC_lIdx_dl:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ HC modeをクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.w	d0,-(sp)		* Idx + d をプッシュ
	jsr	ms_read_mem_8
	rol.b	#1,d0
	bcc	@f
	ori.w	#%00000001_00000000,d6	* キャリーフラグをセット
@@:
	move.b	d0,d6			* ＳＺをセット
	move.b	d0,PV(a3)		* ＰＶをセット

	move.b	d0,d1
	move.w	(sp)+,d0
	jsr	ms_write_mem_8
	rts

RRC_lIdx_dl:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ HC modeをクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.w	d0,-(sp)		* Idx + d をプッシュ
	jsr	ms_read_mem_8
	ror.b	#1,d0
	bcc	1f
	ori.w	#%00000001_00000000,d6	* キャリーフラグをセット
1:
	move.b	d0,d6			* ＳＺをセット
	move.b	d0,PV(a3)		* ＰＶをセット

	move.b	d0,d1
	move.w	(sp)+,d0
	jsr	ms_write_mem_8
	rts

RL_lIdx_dl:
	btst.l	#8,d6			* ＣＹの状態をチェック
	beq	SLA_lIdx_dl		* CY が０の時 RLは SLAと同じ動作をする
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.w	d0,-(sp)		* Idx + d をプッシュ
	jsr	ms_read_mem_8
	add.b	d0,d0
	bcc	1f
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
1:	ori.w	#%00000000_00000001,d0	* 最下位ビットをセット
	move.b	d0,d6
	move.b	d0,PV(a3)

	move.b	d0,d1
	move.w	(sp)+,d0
	jsr	ms_write_mem_8
	rts


RR_lIdx_dl:
	btst.l	#8,d6			* ＣＹの状態をチェック
	beq	SRL_lIdx_dl		* CY が０の時 RRは SRLと同じ動作をする
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.w	d0,-(sp)		* Idx + d をプッシュ
	jsr	ms_read_mem_8
	lsr.b	#1,d0
	bcc	1f
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
1:	ori.w	#%00000000_10000000,d0	* 最上位ビットをセット
	move.b	d0,d6
	move.b	d0,PV(a3)
	move.b	d0,d1
	move.w	(sp)+,d0
	jsr	ms_write_mem_8
	rts

SLA_lIdx_dl:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.w	d0,-(sp)		* Idx + d をプッシュ
	jsr	ms_read_mem_8
	add.b	d0,d0
	bcc	1f
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
1:	move.b	d0,d6
	move.b	d0,PV(a3)
	move.b	d0,d1
	move.w	(sp)+,d0
	jsr	ms_write_mem_8
	rts

SRA_lIdx_dl:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.w	d0,-(sp)		* Idx + d をプッシュ
	jsr	ms_read_mem_8
	asr.b	#1,d0
	bcc	1f
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
1:	move.b	d0,d6
	move.b	d0,PV(a3)
	move.b	d0,d1
	move.w	(sp)+,d0
	jsr	ms_write_mem_8
	rts

SRL_lIdx_dl:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.w	d0,-(sp)		* Idx + d をプッシュ
	jsr	ms_read_mem_8
	lsr.b	#1,d0
	bcc	1f
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
1:	move.b	d0,d6
	move.b	d0,PV(a3)
	move.b	d0,d1
	move.w	(sp)+,d0
	jsr	ms_write_mem_8
	rts

SLI_lIdx_dl:
	andi.w	#%01110100_11111111,d6	* Ｎ,Ｃ,HC mode をクリア
	move.b	d5,HC2(a3)		* HC をクリア
	move.w	d0,-(sp)		* Idx + d をプッシュ
	jsr	ms_read_mem_8
	add.b	d0,d0
	bcc	1f
	ori.w	#%00000001_00000000,d6	* ＣＹをセット
1:	addq.b	#1,d0
	move.b	d0,d6
	move.b	d0,PV(a3)
	move.b	d0,d1
	move.w	(sp)+,d0
	jsr	ms_write_mem_8
	rts

*****************************************************
*
*		Ｉ/Ｏ関係のルーチン
*
*****************************************************

*	------ ＩＮ ------
IN_A_n:	move.b	1(a4,d7.w),d0		* n を読む
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7			* PC がページ境界をまたいだか？
	beq	@f
	PC_page_inc
	andi.w	#$3fff,d7
	beq	@f
	move.b	(a4),d0
@@:	bsr	input
	move.b	d0,d4
	rts

IN_A_c:	andi.w	#%01111101_11111111,d6	* N をクリア
	move.b	c(a3),d0
	bsr	input
	move.b	d0,d4
	move.b	d0,d6			* SZ をセット
	move.b	d0,PV(a3)		* PV をセット
	rts

IN_B_c:	andi.w	#%01111101_11111111,d6	* N をクリア
	move.b	c(a3),d0
	bsr	input
	move.b	d0,b(a3)
	move.b	d0,d6			* SZ をセット
	move.b	d0,PV(a3)		* PV をセット
	rts

IN_C_c:	andi.w	#%01111101_11111111,d6	* N をクリア
	move.b	c(a3),d0
	bsr	input
	move.b	d0,c(a3)
	move.b	d0,d6			* SZ をセット
	move.b	d0,PV(a3)		* PV をセット
	rts

IN_D_c:	andi.w	#%01111101_11111111,d6	* N をクリア
	move.b	c(a3),d0
	bsr	input
	move.b	d0,d(a3)
	move.b	d0,d6			* SZ をセット
	move.b	d0,PV(a3)		* PV をセット
	rts

IN_E_c:	andi.w	#%01111101_11111111,d6	* N をクリア
	move.b	c(a3),d0
	bsr	input
	move.b	d0,e(a3)
	move.b	d0,d6			* SZ をセット
	move.b	d0,PV(a3)		* PV をセット
	rts

IN_H_c:	andi.w	#%01111101_11111111,d6	* N をクリア
	move.b	c(a3),d0
	bsr	input
	move.b	d0,h(a3)
	move.b	d0,d6			* SZ をセット
	move.b	d0,PV(a3)		* PV をセット
	rts

IN_L_c:	andi.w	#%01111101_11111111,d6	* N をクリア
	move.b	c(a3),d0
	bsr	input
	move.b	d0,l(a3)
	move.b	d0,d6			* SZ をセット
	move.b	d0,PV(a3)		* PV をセット
	rts

IN_F_c:	andi.w	#%01111101_11111111,d6	* N をクリア
	move.b	c(a3),d0
	bsr	input
	move.b	d0,d6			* SZ をセット
	move.b	d0,PV(a3)		* PV をセット
	rts

*	------ ＩＮＩ ------
INI:	ori.w	#%00000010_00000000,d6	* Nをセット
	andi.w	#%01111111_11111111,d6
	move.b	c(a3),d0
	bsr	input
	move.b	d0,d1
	move.w	hl(a3),d0
	jsr	ms_write_mem_8
	addq.w	#1,hl(a3)
	subq.b	#1,b(a3)
	move.b	b(a3),d6		* Z を設定
	rts

*	------ ＩＮＤ ------
IND:	ori.w	#%00000010_00000000,d6	* Nをセット
	andi.w	#%01111111_11111111,d6
	move.b	c(a3),d0
	bsr	input
	move.b	d0,d1
	move.w	hl(a3),d0
	jsr	ms_write_mem_8
	subq.w	#1,hl(a3)
	subq.b	#1,b(a3)
	move.b	b(a3),d6		* Z を設定
	rts

*	------ ＩＮＩＲ ------
INIR:	ori.w	#%00000010_00000000,d6	* Nをセット
	andi.w	#%01111111_11111111,d6
@@:
	move.b	c(a3),d0
	bsr	input
	move.b	d0,d1
	move.w	hl(a3),d0
	jsr	ms_write_mem_8
	addq.w	#1,hl(a3)
	subq.b	#1,b(a3)
	bne	@b
	clr.b	d6			* Z をセット
	rts

*	------ ＩＮＤＲ ------
INDR:	ori.w	#%00000010_00000000,d6	* Nをセット
	andi.w	#%01111111_11111111,d6
@@:
	move.b	c(a3),d0
	bsr	input
	move.b	d0,d1
	move.w	hl(a3),d0
	jsr	ms_write_mem_8
	subq.w	#1,hl(a3)
	subq.b	#1,b(a3)
	bne	@b
	clr.b	d6			* Z をセット
	rts


	
*	------ ＯＵＴ ------
OUT_n_A:
	move.b	1(a4,d7.w),d0		* n を読む
	addq.w	#2,d7			* PC += 2
	btst.l	#14,d7			* PC がページ境界をまたいだか？
	beq	@f
	PC_page_inc
	andi.w	#$3fff,d7
	beq	@f
	move.b	(a4),d0
@@:	move.b	d4,d1
	bsr	output
	rts

OUT_c_A:
	move.b	c(a3),d0
	move.b	d4,d1
	bsr	output
	rts

OUT_c_B:
	move.b	c(a3),d0
	move.b	b(a3),d1
	bsr	output
	rts

OUT_c_C:
	move.b	c(a3),d0
	move.b	d0,d1
	bsr	output
	rts

OUT_c_D:
	move.b	c(a3),d0
	move.b	d(a3),d1
	bsr	output
	rts

OUT_c_E:
	move.b	c(a3),d0
	move.b	e(a3),d1
	bsr	output
	rts

OUT_c_H:
	move.b	c(a3),d0
	move.b	h(a3),d1
	bsr	output
	rts

OUT_c_L:
	move.b	c(a3),d0
	move.b	l(a3),d1
	bsr	output
	rts

*	------ ＯＵＴＩ ------
OUTI:	ori.w	#%00000010_00000000,d6	* Nをセット
	andi.w	#%01111111_11111111,d6
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	move.b	d0,d1			* 書き込む値
	move.b	c(a3),d0		* 書き込むポート
	bsr	output
	addq.w	#1,hl(a3)
	subq.b	#1,b(a3)
	move.b	b(a3),d6		* Z を設定
	rts

*	------ ＯＵＴＤ ------
OUTD:	ori.w	#%00000010_00000000,d6	* Nをセット
	andi.w	#%01111111_11111111,d6
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	move.b	d0,d1			* 書き込む値
	move.b	c(a3),d0		* 書き込むポート
	bsr	output
	subq.w	#1,hl(a3)
	subq.b	#1,b(a3)
	move.b	b(a3),d6		* Z を設定
	rts

*	------ ＯＴＩＲ ------
OTIR:	ori.w	#%00000010_00000000,d6	* Nをセット
	andi.w	#%01111111_11111111,d6
@@:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	move.b	d0,d1			* 書き込む値
	move.b	c(a3),d0		* 書き込むポート
	bsr	output
	addq.w	#1,hl(a3)
	subq.b	#1,b(a3)
	bne	@b
	clr.b	d6			* Z をセット
	rts

*	------ ＯＴＤＲ ------
OTDR:	ori.w	#%00000010_00000000,d6	* Nをセット
	andi.w	#%01111111_11111111,d6
@@:
	move.w	hl(a3),d0
	jsr	ms_read_mem_8
	move.b	d0,d1			* 書き込む値
	move.b	c(a3),d0		* 書き込むポート
	bsr	output
	subq.w	#1,hl(a3)
	subq.b	#1,b(a3)
	bne	@b
	clr.b	d6			* Z をセット
	rts


*****************************************************************
*
*	ポートからの読み込み
*
*  (引数)
*	.d0.b	ポート番号
*  (帰り値)
*	.d0.b	読み込んだ値
*
*	d1,d2,d3 破壊可能性あり
*
*****************************************************************	
input:
	movem.l	d2-d7/a0-a5,-(sp)
	clr.w	d1
	move.b	d0,d1				* 上位バイトを０でクリア
	lea.l	ms_io_input_table,a0
	movea.l	(a0,d1.w*4),a0			* d0 の値を変えちゃだめ（68030用→68000用にする時注意）
	move.b	d0,-(sp)			* Cの関数でも呼べるように引数をセット
	move.l	#@f,-(sp)			* 戻り先アドレスをセット
	jmp	(a0)
@@:	lea	2(sp),sp
	movem.l	(sp)+,d2-d7/a0-a5
	rts

*****************************************************************
*
*	ポートへの書き込み
*
*  (引数)
*	.d0.b	ポート番号
*	.d1.b	書き込む値
*
*	d1 破壊
*
*****************************************************************	
output:
	movem.l	d2-d7/a0-a5,-(sp)
.if 1
	bsr	print_debug_out
.endif
	clr.w	d2
	move.b	d0,d2				* 上位バイトを０でクリア
	lea	ms_io_output_table,a0
	movea.l	(a0,d2.w*4),a0			* d0 の値を変えちゃだめ（68030用→68000用にする時注意）
	move.b	d1,-(sp)			* Cの関数でも呼べるように引数をセット
	move.b	d0,-(sp)			* Cの関数でも呼べるように引数をセット
	move.l	#@f,-(sp)			* 戻り先アドレスをセット
	jmp	(a0)				* rts を省略するためジャンプにしてある
@@:	lea	4(sp),sp
	movem.l	(sp)+,d2-d7/a0-a5
	rts

print_debug_out:
	cmp.w	#1,debug_log_level
	bge	@f				* ログレベルが１以上の時
	rts
@@:	movem.l	d0-d3/a0-a3,-(sp)
	lsr.w	#4,d0
	lea.l	HEX,a0
	move.b	(a0,d0.w),debug_out_number+0
	andi.w	#$0f,d1
	move.b	(a0,d1.w),debug_out_number+1
	move.w	d1,d0
	lsr.w	#4,d0
	lea.l	HEX,a0
	move.b	(a0,d0.w),debug_out_value+0
	andi.w	#$0f,d1
	move.b	(a0,d1.w),debug_out_value+1

	pea.l	debug_out_msg
	DOS	__PRINT
	lea.l	4(sp),sp
	movem.l	(sp)+,d0-d3/a0-a3
	rts

	.data


debug_out_msg:
	.dc.b	'I/Oポートに書き込みました。0x'
debug_out_number:
	.dc.b	'00'
	.dc.b	' 値:0x'
debug_out_value:
	.dc.b	'00'
	.dc.b	0x0d,0x0a,0x00




*************** ワークエリア ******************

	.data

PC_page:
	.dc.w	0	* 現在ＰＣが存在するページ

emu_loop_func:
	.dc.l	0	* エミュレータのループ関数のアドレス

ms_cpu_registers_ptr:
	.dc.l	registers

base:			* a3 の指すアドレス
registers:
	.dc.b	0	* a
	.dc.b	0	* f
	.dc.b	0	* b
	.dc.b	0	* c
	.dc.b	0	* d
	.dc.b	0	* e
	.dc.b	0	* h
	.dc.b	0	* l

	.dc.b	0	* ix_h
	.dc.b	0	* ix_l
	.dc.b	0	* iy_h
	.dc.b	0	* iy_l

	.dc.b	0	* s
	.dc.b	0	* p

pair_registers:		* 裏レジスタの保存場所
	.dc.b	0	* a'
	.dc.b	0	* f'
	.dc.b	0	* b'
	.dc.b	0	* c'
	.dc.b	0	* d'
	.dc.b	0	* e'
	.dc.b	0	* h'
	.dc.b	0	* l'


r_:	.dc.b	0	* Ｒレジスタ
i_:	.dc.b	0	* Ｉレジスタ

wz_:
w_:	.dc.b	0	* Ｗレジスタ
wz_:	.dc.b	0	* Ｚレジスタ

; CPUのメインループを極力高速化するため、Z80の割り込みや、エミュレータの割り込み(キーボード処理など)を
; yieldフラグを見て分岐するようにしています。
; yieldフラグには cpu_yieldと、emu_yieldの2つがあり、どちらも0の場合は、CPUのメインループが
; 割り込まれずに実行されます。
; この2つのフラグは、以下のような動作をします。
;
; ● cpu_yield
; cpu_yieldに1以上をセットすると、1命令処理するごとにカウントダウンし、0になるタイミングで、
; 以下の動作をします:
;   * EI状態で、VDPからの割り込み要求があるなら、割り込みを発生させる
;   * DI状態なら無視する(割り込みは取りこぼされる)
;
; 通常はX68000側のVSYNC割り込みで1をセットし、即座にZ80側の割り込みがかかるようにしますが、
; タイミング調整が必要になった場合は、このフラグを使って調整可能です。
; 走査線割り込みをサポートする場合も、このフラグに1以上の値をセットして走査線割り込みのタイミングを
; 調整することが可能です。
; VSYNC割り込みでセットされたフラグのカウントダウンをしている最中に走査線割り込みによって cpu_yieldが
; 書き潰される可能性はあるかもしれませんが、もともと両者の割り込みはZ80から見ると共有割り込みなので、
; まあ問題ないかなと思っています。
;
; ● emu_yield
; emu_yieldに1以上をセットすると、1命令処理するごとにカウントダウンし、0になるタイミングで、
; 以下の動作をします:
;    * X68000側のキーボード入力の処理を行う
;
; 通常はX68000側のVSYNC割り込みで cpu_yieldより100くらい大きめの値をセットします。これにより、
; cpu_yieldの方が先に処理され、Z80の割り込み処理ルーチンが優先的に動くようになります。
; emu_yieldの頻度を調整したい場合は、VSYNC割り込み以外のタイマー割り込みを使ってセットするように
; しても良いです。
	.quad
cpu_emu_yield:			* cpu_yieldと emu_yieldの両方を同時にロングワードアクセスするときはこちらのラベルを使用する
cpu_yield:
	.dc.w	0
emu_yield:
	.dc.w	0

debug_log_level:
	.dc.w	0

*	割り込み許可状態を示すフラグ
*	0 ・・・ DI
*	1 ・・・ EI
*	2 ・・・ EIになった直後(1命令だけ割り込みを無視する)
interrupt_enable:
	.dc.b	0

interrupt_mode:
	.dc.b	0		* インタラプトモード 0, 1, 2


	.end
