	.cpu 68030

	.include	iocscall.mac
	.include	doscall.mac
	.include	ms.mac

	.xref	_new_malloc
	.xref	_new_free
	.xref	_new_read
	.xref	base
	.xref	p_FC
	.xref	p_FD
	.xref	p_FE
	.xref	p_FF
	.xref	ms_memmap_read8
	.xref	ms_memmap_write8
	.xref	ms_memmap_read16
	.xref	ms_memmap_write16
	.xref	read_port_A8
	.xref	write_port_A8
	.xref	write_port_FC
	.xref	write_port_FD
	.xref	write_port_FE
	.xref	write_port_FF

	.xdef	page0
	.xdef	ms_memmap_current_ptr

	.xdef	ms_read_mem_8
	.xdef	ms_read_mem_16
	.xdef	ms_write_mem_8
	.xdef	ms_write_mem_16

	.xdef	r_port_A8
	.xdef	w_port_A8
	.xdef	w_port_FC,w_port_FD,w_port_FE,w_port_FF

headerlength	equ	8		* 各ページの情報を示したヘッダーの長さ
slot_type	equ	0-headerlength
total_segments	equ	1-headerlength	* マッパＲＡＭなどの時の総セグメント数
my_segment_num	equ	2-headerlength	* マッパＲＡＭなどの時の自分のセグメント番号

	.text

*******************************************************************
*
*	メモリから 8ビットのデータを読み込むサブルーチン。
*（引数）
*	d0.w ・・・ アドレス
*（動作）
*	d0.b にメモリから読み込んだ値が入る
*
*	d2 破壊
*
*******************************************************************
ms_read_mem_8:
	andi.l	#$ffff,d0
	move.l	d0,-(sp)
	bsr	ms_memmap_read8
	lea	4(sp),sp
	rts

*******************************************************************
*
*	メモリへ 8ビットのデータを書き込むサブルーチン。
*（引数）
*	d0.w ・・・ アドレス
*	d1.b ・・・ 書き込む値
*（動作）
*	d0.w のアドレスに d1の値を書き込む。  
*
*	d2 破壊
*
*******************************************************************
ms_write_mem_8:
	andi.l	#$ff,d1
	move.l	d1,-(sp)
	andi.l	#$ffff,d0
	move.l	d0,-(sp)
	bsr	ms_memmap_write8
	lea	8(sp),sp
	rts


*******************************************************************
*
*	メモリから 16ビットのデータを読み込むサブルーチン。
*（引数）
*	d0.w ・・・ アドレス
*（動作）
*	d0.w にメモリから読み込んだ値が入る
*
*	d2 破壊
*
*******************************************************************
ms_read_mem_16:
	andi.l	#$ffff,d0
	move.l	d0,-(sp)
	bsr	ms_memmap_read16
	lea	4(sp),sp
	rts

*******************************************************************
*
*	メモリへ 16ビットのデータを書き込むサブルーチン。
*（引数）
*	d0.w ・・・ アドレス
*（動作）
*	d1.w の内容をメモリに書き込む
*
*	d2 破壊
*
*******************************************************************
ms_write_mem_16:
	andi.l	#$ffff,d1
	move.l	d1,-(sp)
	andi.l	#$ffff,d0
	move.l	d0,-(sp)
	bsr	ms_memmap_write16
	lea	8(sp),sp
	rts

;
; MSXのスロットマッピングに関する情報
;

	.data
	.even

ms_memmap_current_ptr:
	.dc.l	page0		* Cから参照するためのポインタ

page0:				* 現在 page 0 に選択されているページのアドレス
	.dc.l	0		* 下の slot_x_x_pagex の値がそのままコピーされる
page1:
	.dc.l	0
page2:
	.dc.l	0
page3:
	.dc.l	0

	.text

******************************************************************
*
*	基本スロットの切り替え
*
*		ＰＯＲＴ Ａ８ への書き込み
*
*	d1.b ・・・書き込む値
*
******************************************************************
w_port_A8:
	andi.l	#$ff,d1
	move.l	d1,-(sp)
	bsr	write_port_A8
	lea	8(sp),sp
	rts	

r_port_A8:
	bsr	read_port_A8
	rts

******************************************************************
*
*	マッパーセグメントの切り替え
*
*		ＰＯＲＴ 0xＦＣ〜0xＦＦ への書き込み
*
*	d1.b ・・・書き込む値
*
******************************************************************
w_port_FC:
	andi.l	#$ff,d1
	move.l	d1,-(sp)
	bsr	write_port_FC
	lea	8(sp),sp
	rts	

w_port_FD:
	andi.l	#$ff,d1
	move.l	d1,-(sp)
	bsr	write_port_FD
	lea	8(sp),sp
	rts	

w_port_FE:
	andi.l	#$ff,d1
	move.l	d1,-(sp)
	bsr	write_port_FE
	lea	8(sp),sp
	rts	

w_port_FF:
	andi.l	#$ff,d1
	move.l	d1,-(sp)
	bsr	write_port_FF
	lea	8(sp),sp
	rts	


	.end