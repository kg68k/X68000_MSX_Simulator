	.cpu 68030

	.include	iocscall.mac
	.include	doscall.mac
	.include	ms.mac

	.xref	_new_malloc
	.xref	_new_free
	.xref	_new_read
	.xref	base
	.xref	p_FC
	.xref	p_FD
	.xref	p_FE
	.xref	p_FF
	.xref	ms_memmap_rd8_MEGAROM_8
	.xref	ms_memmap_wr8_MEGAROM_8
	.xref	ms_memmap_rd16_MEGAROM_8
	.xref	ms_memmap_wr16_MEGAROM_8
	.xref	ms_memmap_rd8_MEGAROM_KONAMI
	.xref	ms_memmap_wr8_MEGAROM_KONAMI
	.xref	ms_memmap_rd16_MEGAROM_KONAMI
	.xref	ms_memmap_wr16_MEGAROM_KONAMI
	.xref	ms_memmap_rd8_MEGAROM_KONAMI_SCC
	.xref	ms_memmap_wr8_MEGAROM_KONAMI_SCC
	.xref	ms_memmap_rd16_MEGAROM_KONAMI_SCC
	.xref	ms_memmap_wr16_MEGAROM_KONAMI_SCC


	.xdef	ms_memmap_init_mac
	.xdef	ms_memmap_deinit_mac
	.xdef	ms_memmap_set_rom
	.xdef	ms_memmap_set_main_mem
	.xdef	ms_memmap_set_cartridge
	.xdef	ms_memmap_register_rom

	.xdef	ms_memmap_slot_map_ptr

	.xdef	ms_read_mem_8
	.xdef	ms_read_mem_16
	.xdef	ms_write_mem_8
	.xdef	ms_write_mem_16

	.xdef	page0		; 暫定処理
	.xdef	page1
	.xdef	page2
	.xdef	page3

	.xdef	slot_reg

	.xdef	slot_0_0
	.xdef	slot_3_0
	.xdef	slot_3_1
	.xdef	slot_3_2
	.xdef	slot_3_3

	.xdef	rd8_sub_add_p0
	.xdef	rd8_sub_add_p1
	.xdef	rd8_sub_add_p2
	.xdef	rd8_sub_add_p3

	.xdef	wr8_sub_add_p0
	.xdef	wr8_sub_add_p1
	.xdef	wr8_sub_add_p2
	.xdef	wr8_sub_add_p3

	.xdef	rd16_sub_add_p0
	.xdef	wr16_sub_add_p0

	.xdef	r_port_A8
	.xdef	w_port_A8
	
	.xdef	w_port_FC,w_port_FD,w_port_FE,w_port_FF

headerlength	equ	8		* 各ページの情報を示したヘッダーの長さ
slot_type	equ	0-headerlength
total_segments	equ	1-headerlength	* マッパＲＡＭなどの時の総セグメント数
my_segment_num	equ	2-headerlength	* マッパＲＡＭなどの時の自分のセグメント番号

	.text

;
;	メモリマッピングの初期化
;
ms_memmap_init_mac:
	link	a6,#0
	movem.l	d3-d7/a0-a5,-(sp)

	; no slot のためのメモリ確保
	move.l	#16*1024+8,-(sp)
	bsr	_new_malloc
	btst.l	#31,d0
	beq	@f
	; メモリ確保失敗
	moveq.l	#0,d0
	bra	9f
@@:	; メモリ確保成功
	move.l	d0,no_slot_ptr
	move.l	d0,a1
	; no_slotのヘッダを転送
	lea	no_slot_header,a0
	move.l	(a0)+,(a1)+
	move.l	(a0)+,(a1)+
	; no_slotの中身を0xffでクリア
	move.w	#16*1024-1,d1
@@:	move.b	#$ff,(a1)+
	dbra	d1,@b

	; slot_0_0 から slot_3_3 までを no_slotで初期化
	addq.l	#8,d0
	lea	slot_0_0,a0
	move.w	#4*4*4-1,d1
@@:	move.l	d0,(a0)+
	dbra	d1,@b

	clr.l	exslot_reg_0		* 拡張スロット選択レジスタの値をクリア
	moveq.l	#1,d0

9:	movem.l	(sp)+,d3-d7/a0-a5
	unlk	a6
	rts

; TODO ほんとはここで、セットされたROMやメモリの解放処理を入れたい
ms_memmap_deinit_mac:
	link	a6,#0
	movem.l	d3-d7/a0-a5,-(sp)

	move.l	no_slot_ptr,d0
	beq	@f
	move.l	d0,-(sp)
	bsr	_new_free
	lea	4(sp),sp
@@:

	movem.l	(sp)+,d3-d7/a0-a5
	unlk	a6

	rts

*
*	メインメモリ設定ルーチン
*
*	void ms_memmap_set_main_mem( void *MMem, int number_of_segments);
*
ms_memmap_set_main_mem:
	link	a6,#0

	move.l	 8(a6),a0
	move.l	12(a6),d0

	subq.w	#1,d0
	clr.w	d1
@@:
	move.b	#1,(a0)+		* スロットタイプ = マッパＲＡＭ
	move.b	d0,(a0)+		* 総セグメント数 - 1
	move.b	d1,(a0)+		* 自分のセグメント番号
	adda.l	#1024*16+8-3,a0

	addq.w	#1,d1
	cmp.w	d0,d1
	bls	@b			* d1 ≦ d0 の時ループ 

	move.l	8(a6),d0
	add.l	#8,d0
	move.l	d0,slot_3_0+12		* とりあえず ページ３ - セグメント０
	add.l	#1024*16+8,d0		*	     ページ２ - セグメント１
	move.l	d0,slot_3_0+8		*	     ページ１ - セグメント２
	add.l	#1024*16+8,d0		*	     ページ０ - セグメント３
	move.l	d0,slot_3_0+4		* としてあるが実際はＲＯＭの初期化ルーチンで
	add.l	#1024*16+8,d0		* セットされるので、ページごとの番号がぶつか
	move.l	d0,slot_3_0+0		* ってなければよい。（ＭＳＸ１のＲＯＭを使っ
					* た時に、番号がぶつかってるとまずい）
	move.b	#1,slot_3_ex		* スロット３は拡張されている
	unlk	a6
	rts	

*
*	ＲＯＭ読み込みルーチン
*
*	int ms_memmap_set_rom( (void *)address, (char *)filename, (int)kind, (int)slot, (int)page);
*
*	slot %0000ssxx
*		  ||++--拡張スロット番号
*		  ++----基本スロット番号
*
ms_memmap_set_rom:
	link	a6,#0
	movem.l	d3-d7/a0-a5,-(sp)

	movea.l	8(a6),a0
	move.b	16+3(a6),(a0)		* ROM の種類をセット
	lea.l	headerlength(a0),a0
	move.l	a0,-(sp)

	move.w	#0,-(sp)
	move.l	12(a6),-(sp)		* ファイル名をセット
	DOS	__OPEN
	lea.l	6(sp),sp
	move.w	d0,f_handle

	lea.l	slot_0_0,a0
	move.l	20(a6),d0		* スロット番号
	lsl.w	#4,d0			* d0 = d0 * 16
	move.l	24(a6),d1		* ページ番号
	lsl.w	#2,d1			* d1 = d1 * 4
	add.w	d1,d0
	move.l	(sp)+,d1		* 読み込むアドレスを得る
	move.l	d1,0(a0,d0.w)

	move.l	#$4000,-(sp)		* 16K バイト読み込み
	move.l	d1,-(sp)		* アドレスセット
	move.w	f_handle,-(sp)		* ファイルハンドル
	bsr	_new_read
	DOS	__CLOSE			* 前にセットしたファイルハンドルを流用
	lea	10(sp),sp

	movem.l	(sp)+,d3-d7/a0-a5
	unlk	a6
	rts

*
*	ＲＯＭ登録ルーチン
*
*	int ms_memmap_register_rom( (void *)address, (int)kind, (int)slot, (int)page);
*
*	slot %0000ssxx
*		  ||++--拡張スロット番号
*		  ++----基本スロット番号
*
ms_memmap_register_rom:
	link	a6,#0
	movem.l	d3-d7/a0-a5,-(sp)

	movea.l	8(a6),a0		* address
	move.b	12+3(a6),(a0)		* ROM の種類をセット
	move.l	16(a6),d0		* スロット番号
	move.l	20(a6),d1		* ページ番号

	lea.l	slot_0_0,a1
	lsl.w	#4,d0			* d0 = d0 * 16
	lsl.w	#2,d1			* d1 = d1 * 4
	add.w	d1,d0
	lea.l	headerlength(a0),a0
	move.l	a0,0(a1,d0.w)		* ROM管理テーブルにセット

	movem.l	(sp)+,d3-d7/a0-a5
	unlk	a6
	rts

*
*	カートリッジ設定ルーチン
*
*	（機能）
*		カートリッジファイルを実際にシステムに組み込む
*
*	int ms_memmap_set_cartridge( crtridge_buff, location, page, kind);
*
*	location %0000ssxx
*		      ||++--拡張スロット番号
*		      ++----基本スロット番号
*
*
ms_memmap_set_cartridge:
	link	a6,#0
	movem.l	d3-d7/a0-a5,-(sp)

*	まだやってない

	movea.l	8(a6),a0		* カートリッジバッファのアドレス
	move.b	20+3(a6),(a0)		* ROM の種類をセット
	lea.l	headerlength(a0),a0
	move.l	a0,-(sp)

	lea.l	slot_0_0,a0
	move.l	12(a6),d0		* スロット番号
	lsl.w	#4,d0			* d0 = d0 * 16
	move.l	16(a6),d1		* ページ番号
	lsl.w	#2,d1			* d1 = d1 * 4
	add.w	d1,d0
	move.l	(sp)+,0(a0,d0.w)

	movem.l	(sp)+,d3-d7/a0-a5
	unlk	a6
	rts


*******************************************************************
*
*	メモリから 8ビットのデータを読み込むサブルーチン。
*（引数）
*	d0.w ・・・ アドレス
*（動作）
*	d0.b にメモリから読み込んだ値が入る
*
*	d2 破壊
*
*******************************************************************
ms_read_mem_8:
	move.w	d0,d2
	andi.w	#%11000000_00000000,d2
	rol.w	#2,d2				* d2 = page
	tst.w	d0
	bmi	page_2or3_r8
	btst.l	#14,d0
	bne	page_1_r8
page_0_r8:
	andi.w	#%00111111_11111111,d0
	movea.l	page0,a0
	movea.l	rd8_sub_add_p0,a1
	jmp	(a1)				* rts を省略するために jmp にしてある
page_1_r8:
	andi.w	#%00111111_11111111,d0
	movea.l	page1,a0
	movea.l	rd8_sub_add_p1,a1
	jmp	(a1)				* rts を省略するために jmp にしてある
page_2or3_r8:
	btst.l	#14,d0
	bne	page_3_r8
page_2_r8:
	andi.w	#%00111111_11111111,d0
	movea.l	page2,a0
	movea.l	rd8_sub_add_p2,a1
	jmp	(a1)				* rts を省略するために jmp にしてある
page_3_r8:
	andi.w	#%00111111_11111111,d0
	movea.l	page3,a0
	movea.l	rd8_sub_add_p3,a1
	cmp.w	#$3fff,d0
	beq	next_r8
	jmp	(a1)				* rts を省略するために jmp にしてある
next_r8:
	bra	exslotreg_read			* rts を省略するために jmp にしてある

*******************************************************************
*
*	メモリへ 8ビットのデータを書き込むサブルーチン。
*（引数）
*	d0.w ・・・ アドレス
*	d1.b ・・・ 書き込む値
*（動作）
*	d0.w のアドレスに d1の値を書き込む。  
*
*	d2 破壊
*
*******************************************************************
ms_write_mem_8:
	move.w	d0,d2
	andi.w	#%11000000_00000000,d2
	rol.w	#2,d2				* d2 = page
	tst.w	d0
	bmi	page_2or3_w8
	btst.l	#14,d0
	bne	page_1_w8
page_0_w8:
	andi.w	#%00111111_11111111,d0
	movea.l	page0,a0
	movea.l	wr8_sub_add_p0,a1
	jmp	(a1)				* rts を省略するために jmp にしてある
page_1_w8:
	andi.w	#%00111111_11111111,d0
	movea.l	page1,a0
	movea.l	wr8_sub_add_p1,a1
	jmp	(a1)				* rts を省略するために jmp にしてある
page_2or3_w8:
	btst.l	#14,d0
	bne	page_3_w8
page_2_w8:
	andi.w	#%00111111_11111111,d0
	movea.l	page2,a0
	movea.l	wr8_sub_add_p2,a1
	jmp	(a1)				* rts を省略するために jmp にしてある
page_3_w8:
	andi.w	#%00111111_11111111,d0
	movea.l	page3,a0
	movea.l	wr8_sub_add_p3,a1
	cmp.w	#$3fff,d0
	beq	next_w8
	jmp	(a1)				* rts を省略するために jmp にしてある
next_w8:
	bra	exslotreg_write			* rts を省略するために jmp にしてある

*******************************************************************
*
*	メモリから 16ビットのデータを読み込むサブルーチン。
*（引数）
*	d0.w ・・・ アドレス
*（動作）
*	d0.w にメモリから読み込んだ値が入る
*
*	d2 破壊
*
*******************************************************************
ms_read_mem_16:
	move.w	d0,d2
	andi.w	#%11000000_00000000,d2
	rol.w	#2,d2				* d2 = page
	tst.w	d0
	bmi	page_2or3_r16
	btst.l	#14,d0
	bne	page_1_r16
page_0_r16:
	movea.l	page0,a0
	andi.w	#$3fff,d0
	cmpi.w	#$3fff,d0
	beq	@f				* ページ境界をまたがって読み込む時
	movea.l	rd16_sub_add_p0,a1
	jmp	(a1)				* rts を省略するために jmp にしてある
@@:
	movea.l	rd8_sub_add_p0,a1
	jsr	(a1)
	move.b	d0,-(sp)
	clr.w	d0				* ページ１の $0000番地を読む
	movea.l	rd8_sub_add_p1,a1
	jsr	(a1)
	lsl.w	#8,d0				* 上位バイト読み込み
	move.b	(sp)+,d0			* 下位バイト読み込み
	rts

page_1_r16:
	movea.l	page1,a0
	andi.w	#$3fff,d0
	cmpi.w	#$3fff,d0
	beq	@f				* ページ境界をまたがって読み込む時
	movea.l	rd16_sub_add_p1,a1
	jmp	(a1)				* rts を省略するために jmp にしてある
@@:
	movea.l	rd8_sub_add_p1,a1
	jsr	(a1)
	move.b	d0,-(sp)
	clr.w	d0				* ページ２の $0000番地を読む
	movea.l	rd8_sub_add_p2,a1
	jsr	(a1)
	lsl.w	#8,d0				* 上位バイト読み込み
	move.b	(sp)+,d0			* 下位バイト読み込み
	rts

page_2or3_r16:
	btst.l	#14,d0
	bne	page_3_r16
page_2_r16:
	movea.l	page2,a0
	andi.w	#$3fff,d0
	cmpi.w	#$3fff,d0
	beq	@f				* ページ境界をまたがって読み込む時
	movea.l	rd16_sub_add_p2,a1
	jmp	(a1)				* rts を省略するために jmp にしてある
@@:
	movea.l	rd8_sub_add_p2,a1
	jsr	(a1)
	move.b	d0,-(sp)
	clr.w	d0				* ページ３の $0000番地を読む
	movea.l	rd8_sub_add_p3,a1
	jsr	(a1)
	lsl.w	#8,d0				* 上位バイト読み込み
	move.b	(sp)+,d0			* 下位バイト読み込み
	rts

page_3_r16:
	movea.l	page3,a0
	andi.w	#$3fff,d0
	move.w	d0,d2				* 0xffffか0xfffeからワード読み込みしよ 
	addq.w	#2,d2				* うとしているか？
	andi.w	#$4000,d2
	bne	@f
	movea.l	rd16_sub_add_p3,a1
	jmp	(a1)				* rts を省略するために jmp にしてある
@@:
	cmpi.w	#$3fff,d0
	beq	@f
	movea.l	rd8_sub_add_p3,a1
	jsr	(a1)
	move.b	d0,-(sp)
	bsr	exslotreg_read
	lsl.w	#8,d0				* 上位バイト読み込み
	move.b	(sp)+,d0			* 下位バイト読み込み
	rts
@@:
	bsr	exslotreg_read
	move.b	d0,-(sp)
	clr.w	d0
	movea.l	rd8_sub_add_p0,a1
	jsr	(a1)
	lsl.w	#8,d0				* 上位バイト読み込み
	move.b	(sp)+,d0			* 下位バイト読み込み
	rts

*******************************************************************
*
*	メモリへ 16ビットのデータを書き込むサブルーチン。
*（引数）
*	d0.w ・・・ アドレス
*（動作）
*	d1.w の内容をメモリに書き込む
*
*	d2 破壊
*
*******************************************************************
ms_write_mem_16:
	move.w	d0,d2
	andi.w	#%11000000_00000000,d2
	rol.w	#2,d2				* d2 = page
	tst.w	d0
	bmi	page_2or3_w16
	btst.l	#14,d0
	bne	page_1_w16
page_0_w16:
	movea.l	page0,a0
	andi.w	#$3fff,d0
	cmpi.w	#$3fff,d0
	beq	@f				* ページ境界をまたがって読み込む時
	movea.l	wr16_sub_add_p0,a1
	jmp	(a1)				* rts を省略するために jmp にしてある
@@:
	move.w	d1,-(sp)
	movea.l	wr8_sub_add_p0,a1
	jsr	(a1)
	clr.w	d0
	move.b	(sp)+,d1			* d1.b = 上位バイト
	movea.l	wr8_sub_add_p1,a1
	jmp	(a1)				* rts を省略するために jmp にしてある

page_1_w16:
	movea.l	page1,a0
	andi.w	#$3fff,d0
	cmpi.w	#$3fff,d0
	beq	@f				* ページ境界をまたがって読み込む時
	movea.l	wr16_sub_add_p1,a1
	jmp	(a1)				* rts を省略するために jmp にしてある
@@:
	move.w	d1,-(sp)
	movea.l	wr8_sub_add_p1,a1
	jsr	(a1)
	clr.w	d0
	move.b	(sp)+,d1			* d1.b = 上位バイト
	movea.l	wr8_sub_add_p2,a1
	jmp	(a1)				* rts を省略するために jmp にしてある

page_2or3_w16:
	btst.l	#14,d0
	bne	page_3_w16
page_2_w16:
	movea.l	page2,a0
	andi.w	#$3fff,d0
	cmpi.w	#$3fff,d0
	beq	@f				* ページ境界をまたがって読み込む時
	movea.l	wr16_sub_add_p2,a1
	jmp	(a1)				* rts を省略するために jmp にしてある
@@:
	move.w	d1,-(sp)
	movea.l	wr8_sub_add_p2,a1
	jsr	(a1)
	clr.w	d0
	move.b	(sp)+,d1			* d1.b = 上位バイト
	movea.l	wr8_sub_add_p3,a1
	jmp	(a1)				* rts を省略するために jmp にしてある

page_3_w16:
	movea.l	page3,a0
	andi.w	#$3fff,d0
	move.w	d0,d2				* 0xffffか0xfffeからワード読み込みしよ 
	addq.w	#2,d2				* うとしているか？
	andi.w	#$4000,d2
	bne	@f
	movea.l	wr16_sub_add_p3,a1
	jmp	(a1)				* rts を省略するために jmp にしてある
@@:
	move.w	d1,-(sp)
	cmpi.w	#$3fff,d0
	beq	@f
	movea.l	wr8_sub_add_p3,a1
	jsr	(a1)
	move.b	(sp)+,d1			* d1.b = 上位バイト
	bra	exslotreg_write			* rts を省略するために bra にしてある
@@:
	move.w	d1,-(sp)
	bsr	exslotreg_write
	clr.w	d0
	move.b	(sp)+,d1			* d1.b = 上位バイト
	movea.l	wr8_sub_add_p0,a1
	jmp	(a1)				* rts を省略するために jmp にしてある


;
; MSXのスロットマッピングに関する情報
;

	.data
	.even

f_handle:
	.dc.w	0

*	スロットに関する情報
slot_0_ex:			* slot 0 は拡張されているか？ 0・・No  1・・Yes
	.dc.b	0
slot_1_ex:
	.dc.b	0
slot_2_ex:
	.dc.b	0
slot_3_ex:
	.dc.b	0

exslot_reg_0:			* slot 0 の拡張スロット選択レジスタ
	.dc.b	0		* 拡張されてないスロットは０にしておくこと（必ず）
exslot_reg_1:
	.dc.b	0
exslot_reg_2:
	.dc.b	0
exslot_reg_3:
	.dc.b	0

slot_reg:
	.dc.b	0		* スロット選択レジスタ(I/O 0xA8)の値

	.even

page0:				* 現在 page 0 に選択されているページのアドレス
	.dc.l	0		* 下の slot_x_x_pagex の値がそのままコピーされる
page1:
	.dc.l	0
page2:
	.dc.l	0
page3:
	.dc.l	0


********************* まだちゃんとやってない（別紙参照） *********************
*		 読み込みルーチン
rd8_sub_add_0:			* ｎｏｔｈｉｎｇ		
	.dc.l	rd8_nothing
rd8_sub_add_1:			* マッパーＲＡＭ		
	.dc.l	rd8_normal
rd8_sub_add_2:			* ノーマルＲＯＭ
	.dc.l	rd8_normal
rd8_sub_add_3:			* メガＲＯＭ ( 8k)
	.dc.l	rd8_MEGAROM_8
rd8_sub_add_4:			* メガＲＯＭ (16k)
	.dc.l	rd8_MEGAROM_16
rd8_sub_add_5:			* コナミメガロム
	.dc.l	rd8_MEGAROM_KONAMI
rd8_sub_add_6:			* コナミメガロム SCC付き
	.dc.l	rd8_MEGAROM_KONAMI_SCC
rd8_sub_add_7:			* コナミサウンドカートリッジ
	.dc.l	rd8_SOUND
rd8_sub_add_8:			* パナソニックメガロム ( A1-GT等の slot3-3)
	.dc.l	rd8_MEGAROM_PANA
rd8_sub_add_9:			* ＤＯＳ-ＲＯＭ (turbo R)
	.dc.l	rd8_normal
rd8_sub_add_10:			* ＰＡＣ
	.dc.l	rd8_PAC

rd8_sub_add_p0:			* 現在 page x に選択されているスロットから８ビットの読み
	.dc.l	rd8_sub_add_0	* 込みを行う際の読み込みルーチンのアドレス。
rd8_sub_add_p1:
	.dc.l	rd8_sub_add_0
rd8_sub_add_p2:
	.dc.l	rd8_sub_add_0
rd8_sub_add_p3:
	.dc.l	rd8_sub_add_0

*		 書き込みルーチン
wr8_sub_add_0:			* ｎｏｔｈｉｎｇ		
	.dc.l	wr8_nothing
wr8_sub_add_1:			* マッパーＲＡＭ		
	.dc.l	wr8_RAM
wr8_sub_add_2:			* ノーマルＲＯＭ
	.dc.l	wr8_ROM
wr8_sub_add_3:			* メガＲＯＭ ( 8k)
	.dc.l	wr8_MEGAROM_8
wr8_sub_add_4:			* メガＲＯＭ (16k)
	.dc.l	wr8_MEGAROM_16
wr8_sub_add_5:			* コナミメガロム
	.dc.l	wr8_MEGAROM_KONAMI
wr8_sub_add_6:			* コナミメガロム SCC付き
	.dc.l	wr8_MEGAROM_KONAMI_SCC
wr8_sub_add_7:			* コナミサウンドカートリッジ
	.dc.l	wr8_SOUND
wr8_sub_add_8:			* パナソニックメガロム ( A1-GT等の slot3-3)
	.dc.l	wr8_MEGAROM_PANA
wr8_sub_add_9:			* ＤＯＳ-ＲＯＭ (turbo R)
	.dc.l	wr8_DOS_ROM
wr8_sub_add_10:			* ＰＡＣ
	.dc.l	wr8_PAC

base2:

wr8_sub_add_p0:			* 現在 page x に選択されているスロットに８ビットの書き
	.dc.l	wr8_sub_add_0	* 込みを行う際の書き込みルーチンのアドレス。
wr8_sub_add_p1:
	.dc.l	wr8_sub_add_0
wr8_sub_add_p2:
	.dc.l	wr8_sub_add_0
wr8_sub_add_p3:
	.dc.l	wr8_sub_add_0

*		 読み込みルーチン
rd16_sub_add_0:			* ｎｏｔｈｉｎｇ		
	.dc.l	rd16_nothing
rd16_sub_add_1:			* マッパーＲＡＭ		
	.dc.l	rd16_normal
rd16_sub_add_2:			* ノーマルＲＯＭ
	.dc.l	rd16_normal
rd16_sub_add_3:			* メガＲＯＭ ( 8k)
	.dc.l	rd16_MEGAROM_8
rd16_sub_add_4:			* メガＲＯＭ (16k)
	.dc.l	rd16_MEGAROM_16
rd16_sub_add_5:			* コナミメガロム
	.dc.l	rd16_MEGAROM_KONAMI
rd16_sub_add_6:			* コナミメガロム SCC付き
	.dc.l	rd16_MEGAROM_KONAMI_SCC
rd16_sub_add_7:			* コナミサウンドカートリッジ
	.dc.l	rd16_SOUND
rd16_sub_add_8:			* パナソニックメガロム ( A1-GT等の slot3-3)
	.dc.l	rd16_MEGAROM_PANA
rd16_sub_add_9:			* ＤＯＳ-ＲＯＭ (turbo R)
	.dc.l	rd16_normal
rd16_sub_add_10:			* ＰＡＣ
	.dc.l	rd16_PAC


rd16_sub_add_p0:		* 現在 page x に選択されているスロットから１６ビットの読
	.dc.l	rd16_sub_add_0	* み込みを行う際の読み込みルーチンのアドレス。
rd16_sub_add_p1:
	.dc.l	rd16_sub_add_0
rd16_sub_add_p2:
	.dc.l	rd16_sub_add_0
rd16_sub_add_p3:
	.dc.l	rd16_sub_add_0

*		 書き込みルーチン
wr16_sub_add_0:			* ｎｏｔｈｉｎｇ		
	.dc.l	wr16_nothing
wr16_sub_add_1:			* マッパーＲＡＭ		
	.dc.l	wr16_RAM
wr16_sub_add_2:			* ノーマルＲＯＭ
	.dc.l	wr16_ROM
wr16_sub_add_3:			* メガＲＯＭ ( 8k)
	.dc.l	wr16_MEGAROM_8
wr16_sub_add_4:			* メガＲＯＭ (16k)
	.dc.l	wr16_MEGAROM_16
wr16_sub_add_5:			* コナミメガロム
	.dc.l	wr16_MEGAROM_KONAMI
wr16_sub_add_6:			* コナミメガロム SCC付き
	.dc.l	wr16_MEGAROM_KONAMI_SCC
wr16_sub_add_7:			* コナミサウンドカートリッジ
	.dc.l	wr16_SOUND
wr16_sub_add_8:			* パナソニックメガロム ( A1-GT等の slot3-3)
	.dc.l	wr16_MEGAROM_PANA
wr16_sub_add_9:			* ＤＯＳ-ＲＯＭ (turbo R)
	.dc.l	wr16_DOS_ROM
wr16_sub_add_10:		* ＰＡＣ
	.dc.l	wr16_PAC

wr16_sub_add_p0:		* 現在 page x に選択されているスロットに１６ビットの書き
	.dc.l	wr16_sub_add_0	* 込みを行う際の書き込みルーチンのアドレス。
wr16_sub_add_p1:
	.dc.l	wr16_sub_add_0
wr16_sub_add_p2:
	.dc.l	wr16_sub_add_0
wr16_sub_add_p3:
	.dc.l	wr16_sub_add_0

*	このアドレスはヘッダ等を含まない部分を指す。よって、ヘッダは
*	(アドレス) - 8 のアドレスから存在する。
ms_memmap_slot_map_ptr:
	.dc.l	slot_0_0	* スロットマップ構造体の先頭アドレス(Cから参照)

slot_0_0:
	.dc.l	0		* slot 0-0 page0 が存在するアドレス
	.dc.l	0		* slot 0-0 page1 が存在するアドレス
	.dc.l	0		* slot 0-0 page2 が存在するアドレス
	.dc.l	0		* slot 0-0 page3 が存在するアドレス
slot_0_1:
	.dc.l	0
	.dc.l	0
	.dc.l	0
	.dc.l	0
slot_0_2:
	.dc.l	0
	.dc.l	0
	.dc.l	0
	.dc.l	0
slot_0_3:
	.dc.l	0
	.dc.l	0
	.dc.l	0
	.dc.l	0

slot_1_0:
	.dc.l	0		* slot 1-0 page0 が存在するアドレス
	.dc.l	0
	.dc.l	0
	.dc.l	0
slot_1_1:
	.dc.l	0
	.dc.l	0
	.dc.l	0
	.dc.l	0
slot_1_2:
	.dc.l	0
	.dc.l	0
	.dc.l	0
	.dc.l	0
slot_1_3:
	.dc.l	0
	.dc.l	0
	.dc.l	0
	.dc.l	0

slot_2_0:
	.dc.l	0
	.dc.l	0
	.dc.l	0
	.dc.l	0
slot_2_1:
	.dc.l	0
	.dc.l	0
	.dc.l	0
	.dc.l	0
slot_2_2:
	.dc.l	0
	.dc.l	0
	.dc.l	0
	.dc.l	0
slot_2_3:
	.dc.l	0
	.dc.l	0
	.dc.l	0
	.dc.l	0

slot_3_0:
	.dc.l	0
	.dc.l	0
	.dc.l	0
	.dc.l	0
slot_3_1:
	.dc.l	0
	.dc.l	0
	.dc.l	0
	.dc.l	0
slot_3_2:
	.dc.l	0
	.dc.l	0
	.dc.l	0
	.dc.l	0
slot_3_3:
	.dc.l	0
	.dc.l	0
	.dc.l	0
	.dc.l	0

*	ＰＡＣのバンクセレクトレジスタ
PAC_reg_0:			* PAC のバンク切り替え用レジスタ
	.dc.b	0		* $5ffE 番地に対応
PAC_reg_1:
	.dc.b	0		* $5fff 番地に対応


*	何もないスロットのためのダミーヘッダ
no_slot_header:
	.dc.b	0		* slot type = nothing
	.dc.b	0,0,0,0,0,0,0
*	実際に確保した no slot 領域のアドレス
no_slot_ptr:
	.dc.l	0

	.text
	.even

*****************************************************
*
*	８ビットメモリ読み込みサブルーチン
*
*	a0.l		ベースアドレス(68000)
*	d2.w		ページ番号
*	d0.w		アドレス  (R800)
* 返り値
*	d0.b	 	メモリから読み込んだ値を入れる
*
*	d0 以外破壊してはならない
*
*******************************************************
rd8_nothing:
	move.b	#$ff,d0
	rts

rd8_normal:
	move.b	0(a0,d0.w),d0
	rts

rd8_MEGAROM_8:
	movem.l	d1-d7/a0-a5,-(sp)
	andi.l	#$ffff,d0
	move.l	d0,-(sp)
	andi.l	#$3,d2
	move.l	d2,-(sp)
	move.l	a0,-(sp)
	bsr	ms_memmap_rd8_MEGAROM_8
	lea	12(sp),sp
	movem.l	(sp)+,d1-d7/a0-a5
	rts

rd8_MEGAROM_16:
	rts

rd8_MEGAROM_KONAMI:
	movem.l	d1-d7/a0-a5,-(sp)
	andi.l	#$ffff,d0
	move.l	d0,-(sp)
	andi.l	#$3,d2
	move.l	d2,-(sp)
	move.l	a0,-(sp)
	bsr	ms_memmap_rd8_MEGAROM_KONAMI
	lea	12(sp),sp
	movem.l	(sp)+,d1-d7/a0-a5
	rts

rd8_MEGAROM_KONAMI_SCC:		* まだやってない
	movem.l	d1-d7/a0-a5,-(sp)
	andi.l	#$ffff,d0
	move.l	d0,-(sp)
	andi.l	#$3,d2
	move.l	d2,-(sp)
	move.l	a0,-(sp)
	bsr	ms_memmap_rd8_MEGAROM_KONAMI_SCC
	lea	12(sp),sp
	movem.l	(sp)+,d1-d7/a0-a5
	rts

rd8_MEGAROM_PANA:		* まだやってない
	rts

rd8_SOUND:
	rts

rd8_PAC:				* pac のレジスタは読み込み出来ない
	cmpi.w	#$4d69,PAC_reg_0	* $5ffe に 4d, $5fff に 69 が書き込まれている
	bne	rd8_nothing		* 時は Ｓ-ＲＡＭモード
	move.b	0(a0,d0.w),d0
	rts


*****************************************************
*
*	８ビットメモリ書き込みルーチン
*
*	a0.l		ベースアドレス(68000)
*	d2.w		ページ番号
*	d0.w		アドレス  (R800)	
*	d1.b		書き込む値
*
*******************************************************
wr8_nothing:

wr8_ROM:
	rts

wr8_RAM:
	move.b	d1,0(a0,d0.w)
	rts

wr8_MEGAROM_8:
	movem.l	d1-d7/a0-a5,-(sp)
	andi.l	#$ff,d1
	move.l	d1,-(sp)
	andi.l	#$ffff,d0
	move.l	d0,-(sp)
	andi.l	#$3,d2
	move.l	d2,-(sp)
	move.l	a0,-(sp)
	bsr	ms_memmap_wr8_MEGAROM_8
	lea	16(sp),sp
	movem.l	(sp)+,d1-d7/a0-a5
	rts

wr8_MEGAROM_16:
	rts

wr8_MEGAROM_KONAMI:
	movem.l	d1-d7/a0-a5,-(sp)
	andi.l	#$ff,d1
	move.l	d1,-(sp)
	andi.l	#$ffff,d0
	move.l	d0,-(sp)
	andi.l	#$3,d2
	move.l	d2,-(sp)
	move.l	a0,-(sp)
	bsr	ms_memmap_wr8_MEGAROM_KONAMI
	lea	16(sp),sp
	movem.l	(sp)+,d1-d7/a0-a5
	rts

wr8_MEGAROM_KONAMI_SCC:
	movem.l	d1-d7/a0-a5,-(sp)
	andi.l	#$ff,d1
	move.l	d1,-(sp)
	andi.l	#$ffff,d0
	move.l	d0,-(sp)
	andi.l	#$3,d2
	move.l	d2,-(sp)
	move.l	a0,-(sp)
	bsr	ms_memmap_wr8_MEGAROM_KONAMI_SCC
	lea	16(sp),sp
	movem.l	(sp)+,d1-d7/a0-a5
	rts

wr8_MEGAROM_PANA:		* まだやってない
	rts

wr8_SOUND:		* まだやってない
	rts

wr8_PAC:
	cmpi.w	#$1ffe,d0
	beq	set_reg_0
	cmpi.w	#$1fff,d0
	beq	set_reg_1
	cmpi.w	#$4d69,PAC_reg_0	* $5ffe に 4d, $5fff に 69 が書き込まれている
	bne	wr8_nothing		* 時は Ｓ-ＲＡＭモード
	move.b	d1,0(a0,d0.w)
	rts

set_reg_0:
	move.b	d1,PAC_reg_0
	rts
set_reg_1:
	move.b	d1,PAC_reg_1
	rts	

wr8_DOS_ROM:
	cmpi.w	#$3ff0,d0
	bne	wr8_nothing
					* ＤＯＳのページ切り替え（ローカルバンク）
		* まだやってない
	rts	

*****************************************************
*
*	１６ビットメモリ読み込みサブルーチン
*
*	a0.l		ベースアドレス(68000)
*	d2.w		ページ番号
*	d0.w		アドレス  (R800)	
* 返り値
*	d0.w	 	メモリから読み込んだ値を入れる
*
*	d0 以外破壊してはならない
*
*******************************************************
rd16_nothing:
	move.w	#$ffff,d0
	rts

rd16_normal:
	move.b	1(a0,d0.w),-(sp)
	move.b	0(a0,d0.w),1(sp)
	move.w	(sp)+,d0
	rts

rd16_MEGAROM_8:
	movem.l	d1-d7/a0-a5,-(sp)
	andi.l	#$ffff,d0
	move.l	d0,-(sp)
	andi.l	#$3,d2
	move.l	d2,-(sp)
	move.l	a0,-(sp)
	bsr	ms_memmap_rd16_MEGAROM_8
	lea	12(sp),sp
	movem.l	(sp)+,d1-d7/a0-a5
	rts

rd16_MEGAROM_16:		* まだやってない
	rts

rd16_MEGAROM_KONAMI:
	movem.l	d1-d7/a0-a5,-(sp)
	andi.l	#$ffff,d0
	move.l	d0,-(sp)
	andi.l	#$3,d2
	move.l	d2,-(sp)
	move.l	a0,-(sp)
	bsr	ms_memmap_rd16_MEGAROM_KONAMI
	lea	12(sp),sp
	movem.l	(sp)+,d1-d7/a0-a5
	rts

rd16_MEGAROM_KONAMI_SCC:
	movem.l	d1-d7/a0-a5,-(sp)
	andi.l	#$ffff,d0
	move.l	d0,-(sp)
	andi.l	#$3,d2
	move.l	d2,-(sp)
	move.l	a0,-(sp)
	bsr	ms_memmap_rd16_MEGAROM_KONAMI_SCC
	lea	12(sp),sp
	movem.l	(sp)+,d1-d7/a0-a5
	rts

rd16_MEGAROM_PANA:		* まだやってない
	rts

rd16_SOUND:
	rts

rd16_PAC:				* pac のレジスタは読み込み出来ない
	cmpi.w	#$4d69,PAC_reg_0	* $5ffe に 4d, $5fff に 69 が書き込まれている
	bne	rd16_nothing		* 時は Ｓ-ＲＡＭモード
	move.b	1(a0,d0.w),-(sp)
	move.w	(sp)+,d0
	move.b	0(a0,d0.w),d0
	rts


*****************************************************
*
*	１６ビットメモリ書き込みルーチン
*
*	a0.l		ベースアドレス(68000)
*	d2.w		ページ番号
*	d0.w		アドレス  (R800)	
*	d1.w		書き込む値
*
*******************************************************
wr16_nothing:
	rts

wr16_ROM:
	rts

wr16_RAM:
	move.b	d1,0(a0,d0.w)
	lsr.w	#8,d1
	move.b	d1,1(a0,d0.w)
	rts

wr16_MEGAROM_8:
	movem.l	d1-d7/a0-a5,-(sp)
	andi.l	#$ffff,d1
	move.l	d1,-(sp)
	andi.l	#$ffff,d0
	move.l	d0,-(sp)
	andi.l	#$3,d2
	move.l	d2,-(sp)
	move.l	a0,-(sp)
	bsr	ms_memmap_wr16_MEGAROM_8
	lea	16(sp),sp
	movem.l	(sp)+,d1-d7/a0-a5
	rts

wr16_MEGAROM_16:		* まだやってない
	rts

wr16_MEGAROM_KONAMI:
	movem.l	d1-d7/a0-a5,-(sp)
	andi.l	#$ffff,d1
	move.l	d1,-(sp)
	andi.l	#$ffff,d0
	move.l	d0,-(sp)
	andi.l	#$3,d2
	move.l	d2,-(sp)
	move.l	a0,-(sp)
	bsr	ms_memmap_wr16_MEGAROM_KONAMI
	lea	16(sp),sp
	movem.l	(sp)+,d1-d7/a0-a5
	rts

wr16_MEGAROM_KONAMI_SCC:
	movem.l	d1-d7/a0-a5,-(sp)
	andi.l	#$ffff,d1
	move.l	d1,-(sp)
	andi.l	#$ffff,d0
	move.l	d0,-(sp)
	andi.l	#$3,d2
	move.l	d2,-(sp)
	move.l	a0,-(sp)
	bsr	ms_memmap_wr16_MEGAROM_KONAMI_SCC
	lea	16(sp),sp
	movem.l	(sp)+,d1-d7/a0-a5
	rts

wr16_MEGAROM_PANA:		* まだやってない

wr16_SOUND:		* まだやってない

wr16_DOS_ROM:		* まだやってない

wr16_PAC:
	rts


;
; MSXのスロット切り替えルーチン
;
;

	.text

****************************************************************************
*
*
*	スロット切り替えサブルーチン群
*
*
****************************************************************************
*
*	拡張スロット選択レジスタの値の読み込み
*
*	d0.b 読み込んだ値
*
exslotreg_read:
	move.b	slot_reg,d0			* page 3 のスロット番号を調べる
	lsr.b	#6,d0
	ext.w	d0
	lea	slot_0_ex,a0
	cmpi.b	#0,(a0,d0.w)			* そのスロットは拡張されているか？
	beq	not_extend_r
	lea	exslot_reg_0,a0
	move.b	(a0,d0.w),d0			* 拡張スロット選択レジスタの値を読む
	eori.b	#$ff,d0				* １の補数を取る
	rts
not_extend_r:					* 拡張されてなければそのまま読む
	jmp	(a1)				* rts省略のため jmpにしてある

*****************************************************************************
*
*	拡張スロット選択レジスタへの値の書き込み。切り替えたスロットが
*	表に出ていればそれを切り替える。
*
*	d1.b ・・・ 書き込む値
*
*****************************************************************************
exslotreg_write:
	move.b	slot_reg,d2			* page 3 のスロット番号を調べる
	lsr.b	#6,d2
	ext.w	d2
	lea	slot_0_ex,a0
	cmpi.b	#0,(a0,d2.w)			* そのスロットは拡張されているか？
	beq	not_extend_w
	lea	exslot_reg_0,a0
	move.b	d1,(a0,d2.w)			* 拡張スロット選択レジスタへ値を書く

	move.l	a2,-(sp)
	move.l	a1,-(sp)
	lea.l	base2,a2
	lea.l	slot_0_0,a1

*	ページ３は当然表に出ているので切り替え
	move.w	d2,-(sp)
	lsl.w	#6,d2				* d2 = 切り替えたスロット番号 * 64
	move.b	d1,d0
	andi.w	#%00000000_11000000,d0
	lsr.w	#2,d0				* d0 = 拡張スロット番号 * 16
	add.w	d2,d0
	movea.l	4*3(a1,d0.w),a0
	move.l	a0,page3

	move.b	slot_type(a0),d0		* スロットの種類に応じて読み書きルーチ
	ext.w	d0				* ンを設定
	move.l	 wr8_sub_add_0-base2(a2,d0.w*4), wr8_sub_add_p3-base2(a2)
	move.l	wr16_sub_add_0-base2(a2,d0.w*4),wr16_sub_add_p3-base2(a2)
	move.l	 rd8_sub_add_0-base2(a2,d0.w*4), rd8_sub_add_p3-base2(a2)
	move.l	rd16_sub_add_0-base2(a2,d0.w*4),rd16_sub_add_p3-base2(a2)

*	ページ０は表に出てるか？
	move.b	slot_reg,d0
	andi.w	#%00000000_00000011,d0
	move.w	(sp),d2
	cmp.w	d2,d0
	bne	not_exist0
	lsl.w	#6,d2				* d2 = 切り替えたスロット番号 * 64
	move.b	d1,d0
	andi.w	#%00000000_00000011,d0
	lsl.w	#4,d0				* d0 = 拡張スロット番号 * 16
	add.w	d2,d0
	movea.l	4*0(a1,d0.w),a0
	move.l	a0,page0

	move.b	slot_type(a0),d0		* スロットの種類に応じて読み書きルーチ
	ext.w	d0				* ンを設定
	move.l	 wr8_sub_add_0-base2(a2,d0.w*4), wr8_sub_add_p0-base2(a2)
	move.l	wr16_sub_add_0-base2(a2,d0.w*4),wr16_sub_add_p0-base2(a2)
	move.l	 rd8_sub_add_0-base2(a2,d0.w*4), rd8_sub_add_p0-base2(a2)
	move.l	rd16_sub_add_0-base2(a2,d0.w*4),rd16_sub_add_p0-base2(a2)

*	ページ１は表に出てるか？
not_exist0:
	move.b	slot_reg,d0	
	andi.w	#%00000000_00001100,d0
	move.w	(sp),d2
	lsl.w	#2,d2
	cmp.w	d2,d0
	bne	not_exist1
	lsl.w	#4,d2				* d2 = 切り替えたスロット番号 * 64
	move.b	d1,d0
	andi.w	#%00000000_00001100,d0
	lsl.w	#2,d0				* d0 = 拡張スロット番号 * 16
	add.w	d2,d0
	movea.l	4*1(a1,d0.w),a0
	move.l	a0,page1

	move.b	slot_type(a0),d0		* スロットの種類に応じて読み書きルーチ
	ext.w	d0				* ンを設定
	move.l	 wr8_sub_add_0-base2(a2,d0.w*4), wr8_sub_add_p1-base2(a2)
	move.l	wr16_sub_add_0-base2(a2,d0.w*4),wr16_sub_add_p1-base2(a2)
	move.l	 rd8_sub_add_0-base2(a2,d0.w*4), rd8_sub_add_p1-base2(a2)
	move.l	rd16_sub_add_0-base2(a2,d0.w*4),rd16_sub_add_p1-base2(a2)

*	ページ２は表に出てるか？
not_exist1:
	move.b	slot_reg,d0
	andi.w	#%00000000_00110000,d0
	move.w	(sp)+,d2
	lsl.w	#4,d2
	cmp.w	d2,d0
	bne	not_exist2
	lsl.w	#2,d2				* d2 = 切り替えたスロット番号 * 64
	move.b	d1,d0
	andi.w	#%00000000_00110000,d0		* d0 = 拡張スロット番号 * 16
	add.w	d2,d0
	movea.l	4*2(a1,d0.w),a0
	move.l	a0,page2

	move.b	slot_type(a0),d0		* スロットの種類に応じて読み書きルーチ
	ext.w	d0				* ンを設定
	move.l	 wr8_sub_add_0-base2(a2,d0.w*4), wr8_sub_add_p2-base2(a2)
	move.l	wr16_sub_add_0-base2(a2,d0.w*4),wr16_sub_add_p2-base2(a2)
	move.l	 rd8_sub_add_0-base2(a2,d0.w*4), rd8_sub_add_p2-base2(a2)
	move.l	rd16_sub_add_0-base2(a2,d0.w*4),rd16_sub_add_p2-base2(a2)
not_exist2:
	move.l	(sp)+,a1
	move.l	(sp)+,a2
	rts

not_extend_w:				* 拡張されてなければそのまま書き込む
	jmp	(a1)			* rts省略のため jmpにしてある


******************************************************************
*
*	基本スロットの切り替え
*
*		ＰＯＲＴ Ａ８ への書き込み
*
*	d1.b ・・・書き込む値
*
******************************************************************
w_port_A8:
	move.b	d1,slot_reg

	lea.l	base2,a2

	move.b	d1,d0
	andi.w	#%00000011,d0			* ページ０の切り替え
	lea	exslot_reg_0,a0
	move.b	(a0,d0.w),d2	* 拡張スロット選択レジスタの値を読む
	andi.w	#%00000011,d2			* d2 = ページ０の拡張スロット番号
	lsl.w	#4,d2
	lsl.w	#6,d0
	add.w	d2,d0
	lea.l	slot_0_0,a1
	movea.l	4*0(a1,d0.w),a1
	move.l	a1,page0
	move.b	slot_type(a1),d0		* スロットの種類に応じて読み書きルーチ
						* ンを設定
						* d0の上位バイトは０になってるはずだか
						* ら、ext.w d0 はいらない
	move.l	 wr8_sub_add_0-base2(a2,d0.w*4), wr8_sub_add_p0-base2(a2)
	move.l	wr16_sub_add_0-base2(a2,d0.w*4),wr16_sub_add_p0-base2(a2)
	move.l	 rd8_sub_add_0-base2(a2,d0.w*4), rd8_sub_add_p0-base2(a2)
	move.l	rd16_sub_add_0-base2(a2,d0.w*4),rd16_sub_add_p0-base2(a2)

	move.b	d1,d0
	andi.w	#%00001100,d0			* ページ１の切り替え
	lsr.w	#2,d0
	move.b	(a0,d0.w),d2			* 拡張スロット選択レジスタの値を読む
	andi.w	#%00001100,d2			* d2 = ページ１の拡張スロット番号
	lsl.w	#2,d2
	lsl.w	#6,d0
	add.w	d2,d0
	lea.l	slot_0_0,a1
	movea.l	4*1(a1,d0.w),a1
	move.l	a1,page1
	move.b	slot_type(a1),d0		* スロットの種類に応じて読み書きルーチ
						* ンを設定
	move.l	 wr8_sub_add_0-base2(a2,d0.w*4), wr8_sub_add_p1-base2(a2)
	move.l	wr16_sub_add_0-base2(a2,d0.w*4),wr16_sub_add_p1-base2(a2)
	move.l	 rd8_sub_add_0-base2(a2,d0.w*4), rd8_sub_add_p1-base2(a2)
	move.l	rd16_sub_add_0-base2(a2,d0.w*4),rd16_sub_add_p1-base2(a2)


	move.b	d1,d0
	andi.w	#%00110000,d0			* ページ２の切り替え
	lsr.w	#4,d0
	move.b	(a0,d0.w),d2			* 拡張スロット選択レジスタの値を読む
	andi.w	#%00110000,d2			* d2 = ページ２の拡張スロット番号
	lsl.w	#6,d0
	add.w	d2,d0
	lea.l	slot_0_0,a1
	movea.l	4*2(a1,d0.w),a1
	move.l	a1,page2
	move.b	slot_type(a1),d0		* スロットの種類に応じて読み書きルーチ
						* ンを設定
	move.l	 wr8_sub_add_0-base2(a2,d0.w*4), wr8_sub_add_p2-base2(a2)
	move.l	wr16_sub_add_0-base2(a2,d0.w*4),wr16_sub_add_p2-base2(a2)
	move.l	 rd8_sub_add_0-base2(a2,d0.w*4), rd8_sub_add_p2-base2(a2)
	move.l	rd16_sub_add_0-base2(a2,d0.w*4),rd16_sub_add_p2-base2(a2)


	andi.w	#%11000000,d1			* ページ３の切り替え
	move.w	d1,d0
	lsr.w	#6,d1				* 68000 の時は rol.b #2,d1 の方が速い
	move.b	(a0,d1.w),d2			* 拡張スロット選択レジスタの値を読む
	andi.w	#%11000000,d2			* d2 = ページ３の拡張スロット番号
	lsr.w	#2,d2
	add.w	d2,d0
	lea.l	slot_0_0,a1
	movea.l	4*3(a1,d0.w),a1
	move.l	a1,page3
	move.b	slot_type(a1),d0		* スロットの種類に応じて読み書きルーチ
						* ンを設定
	move.l	 wr8_sub_add_0-base2(a2,d0.w*4), wr8_sub_add_p3-base2(a2)
	move.l	wr16_sub_add_0-base2(a2,d0.w*4),wr16_sub_add_p3-base2(a2)
	move.l	 rd8_sub_add_0-base2(a2,d0.w*4), rd8_sub_add_p3-base2(a2)
	move.l	rd16_sub_add_0-base2(a2,d0.w*4),rd16_sub_add_p3-base2(a2)

	swap	d7				* PC のベースポインタも変更
	lea	page0,a0
	movea.l	(a0,d7.w*4),a4			* （変わってないかもしれないが、
	swap	d7				*   チェックするより常に変えるほ
						*   うが早い）
	rts	

r_port_A8:				* スロット選択レジスタの値
	move.b	slot_reg,d0
	rts

******************************************************************
*
*	マッパーセグメントの切り替え
*
*		ＰＯＲＴ 0xＦＣ〜0xＦＦ への書き込み
*
*	d1.b ・・・書き込む値
*
******************************************************************
w_port_FC:
	move.b	d1,p_FC

	lea.l	slot_0_0,a0
	movea.l	a0,a2			* 下で使う
	move.w	#16-1,d0
@@:
	movea.l	(a0),a1
	cmp.b	#1,slot_type(a1)	* slot#x-x はマッパＲＡＭかどうか
	bne	1f
	move.b	total_segments(a1),d2	* 総セグメント数−１
	and.b	d1,d2			* d2 ・・ 切り替えるセグメント番号
	sub.b	my_segment_num(a1),d2	* d2 ・・ 現在のセグメント番号との差（符号あり）
	ext.w	d2
	muls.w	#16384+8,d2
	add.l	d2,(a0)
1:	lea.l	16(a0),a0
	dbra	d0,@b

	move.b	slot_reg,d0
	andi.w	#%00000011,d0			* d0 = ページ０の基本スロット番号
	lea	exslot_reg_0,a0
	move.b	(a0,d0.w),d2			* 拡張スロット選択レジスタの値を読む
	andi.w	#%00000011,d2			* d2 = ページ０の拡張スロット番号
	lsl.w	#4,d2
	lsl.w	#6,d0
	add.w	d2,d0
	move.w	4*0(a2,d0.w),page0

	swap	d7				* PC のベースポインタも変更
	lea	page0,a0
	movea.l	(a0,d7.w*4),a4			* （変わってないかもしれないが、
	swap	d7				*   チェックするより常に変えるほ
						*   うが早い）
	rts	

w_port_FD:
	move.b	d1,p_FD

	lea.l	slot_0_0,a0
	movea.l	a0,a2			* 下で使う
	move.w	#16-1,d0
@@:
	movea.l	(a0),a1
	cmp.b	#1,slot_type(a1)	* slot#x-x はマッパＲＡＭかどうか
	bne	1f
	move.b	total_segments(a1),d2	* 総セグメント数−１
	and.b	d1,d2			* d2 ・・ 切り替えるセグメント番号
	sub.b	my_segment_num(a1),d2	* d2 ・・ 現在のセグメント番号との差（符号あり）
	ext.w	d2
	muls.w	#16384+8,d2
	add.l	d2,(a0)
1:	lea.l	16(a0),a0
	dbra	d0,@b

	move.b	slot_reg,d0
	andi.w	#%00001100,d0			* d0 = ページ１の基本スロット番号
	lsr.w	#2,d0
	lea	exslot_reg_0,a0
	move.b	(a0,d0.w),d2			* 拡張スロット選択レジスタの値を読む
	andi.w	#%00001100,d2			* d2 = ページ１の拡張スロット番号
	lsl.w	#2,d2
	lsl.w	#6,d0
	add.w	d2,d0
	move.w	4*1(a2,d0.w),page1

	swap	d7				* PC のベースポインタも変更
	lea	page0,a0
	movea.l	(a0,d7.w*4),a4			* （変わってないかもしれないが、
	swap	d7				*   チェックするより常に変えるほ
						*   うが早い）
	rts	

w_port_FE:
	move.b	d1,p_FE

	lea.l	slot_0_0,a0
	movea.l	a0,a2			* 下で使う
	move.w	#16-1,d0
@@:
	movea.l	(a0),a1
	cmp.b	#1,slot_type(a1)	* slot#x-x はマッパＲＡＭかどうか
	bne	1f
	move.b	total_segments(a1),d2	* 総セグメント数−１
	and.b	d1,d2			* d2 ・・ 切り替えるセグメント番号
	sub.b	my_segment_num(a1),d2	* d2 ・・ 現在のセグメント番号との差（符号あり）
	ext.w	d2
	muls.w	#16384+8,d2
	add.l	d2,(a0)
1:	lea.l	16(a0),a0
	dbra	d0,@b

	move.b	slot_reg,d0
	andi.w	#%00110000,d0			* d0 = ページ２の基本スロット番号
	lsr.w	#4,d0
	lea	exslot_reg_0,a0
	move.b	(a0,d0.w),d2			* 拡張スロット選択レジスタの値を読む
	andi.w	#%00110000,d2			* d2 = ページ２の拡張スロット番号
	lsl.w	#6,d0
	add.w	d2,d0
	move.w	4*2(a2,d0.w),page2

	swap	d7				* PC のベースポインタも変更
	lea	page0,a0
	movea.l	(a0,d7.w*4),a4			* （変わってないかもしれないが、
	swap	d7				*   チェックするより常に変えるほ
						*   うが早い）
	rts	

w_port_FF:
	move.b	d1,p_FF

	lea.l	slot_0_0,a0
	movea.l	a0,a2			* 下で使う
	move.w	#16-1,d0
@@:
	movea.l	(a0),a1
	cmp.b	#1,slot_type(a1)	* slot#x-x はマッパＲＡＭかどうか
	bne	1f
	move.b	total_segments(a1),d2	* 総セグメント数−１
	and.b	d1,d2			* d2 ・・ 切り替えるセグメント番号
	sub.b	my_segment_num(a1),d2	* d2 ・・ 現在のセグメント番号との差（符号あり）
	ext.w	d2
	muls.w	#16384+8,d2
	add.l	d2,(a0)
1:	lea.l	16(a0),a0
	dbra	d0,@b

	move.b	slot_reg,d0
	andi.w	#%11000000,d0			* d0 = ページ３の基本スロット番号
	move.w	d0,d1
	lsr.w	#6,d0
	lea	exslot_reg_0,a0
	move.b	(a0,d0.w),d2			* 拡張スロット選択レジスタの値を読む
	andi.w	#%11000000,d2			* d2 = ページ３の拡張スロット番号
	lsr.w	#2,d2
	add.w	d2,d1
	move.w	4*3(a2,d1.w),page3

	swap	d7				* PC のベースポインタも変更
	lea	page0,a0
	movea.l	(a0,d7.w*4),a4			* （変わってないかもしれないが、
	swap	d7				*   チェックするより常に変えるほ
						*   うが早い）
	rts	

	.end