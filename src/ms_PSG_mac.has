*
*	Ｍｓｘ Ｓｉｍｕｌａｔｅｒ
*
*		[[[ ＰＳＧ Ｓｉｍｕｌａｔｅｒ ]]]		
*
*				1995.10.19		by Kuni.
*

	.include	iocscall.mac
	.include	doscall.mac


	.xref	PSG2OPM_tbl

	.xdef	r_port_A0		* アドレスセット
	.xdef	r_port_A2		* レジスタリード

	.xdef	w_port_A0
	.xdef	w_port_A1

	.xdef	_PSG_INIT

OPM_regset	equ	$e90001		* ＯＰＭアクセスレジスタ設定ポート
OPM_port	equ	$e90003		* ＯＰＭアクセスポート

portA_8255	equ	$e9a001
portB_8255	equ	$e9a003
cont_8255	equ	$e9a007

	.68000

***************************************************************
*       OPMレジスタ書き込みマクロ
***************************************************************
w_OPM	macro	val,regnum

@@:	tst.b	OPM_port		* ウェイト
	bmi	@b
	move.b	regnum,OPM_regset
@@:	tst.b	OPM_port		* ウェイト
	bmi	@b
	move.b	val,OPM_port

	endm
***************************************************************

	.text
	.even

***************************************************************
*
*	ＰＳＧ初期化ルーチン
*
*	int PSG_INIT();
*
*	返り値
*		０・・・・・正常終了
*		０以外・・・異状終了
*
***************************************************************
_PSG_INIT:
	movem.l	d3-d7/a0-a5,-(sp)

*	レジスタ初期化
	w_OPM	#%00000010,#$01

	w_OPM	#%00000000,#$08
	w_OPM	#%00000001,#$08
	w_OPM	#%00000010,#$08
	w_OPM	#%00000011,#$08
	w_OPM	#%00000100,#$08
	w_OPM	#%00000101,#$08
	w_OPM	#%00000110,#$08
	w_OPM	#%00000111,#$08

	w_OPM	#%00000000,#$0f
*
*	ＰＳＧトーン周波数 −＞ ノート番号 変換テーブルの作成
*
*	テーブルのフォーマット
*		：
*	.dc.b	キーコード, キーフラクション
*	.dc.b	キーコード, キーフラクション
*		：
*
*　　（備考）
*	６８はＯＰＭのマニュアルと192.27セント（約１音）ずれている。よってノート番号で
*	-200セント(半音)調整し、キーフラクションで+7.8125セント調整する。
*
	move.l	#$10D7*4,-(sp)			* 本当は $1000*2でよくも出来るけど
	DOS	__MALLOC				* 手抜きのため。
	lea.l	4(sp),sp

	tst.l	d0
	bmi	err_PSG_INIT
	move.l	d0,PSG2OPM_tbl
	movea.l	d0,a0

	move.w	#$17-1,d0
@@:	move.w	#%01111110_11111100,(a0)+	* ＯＰＭで出せる最高音
	dbra	d0,@b

	move.w	#%01111110_10010100,(a0)+	* D と D#の中間音
	move.w	#%01111110_00010100,(a0)+	* D の中

	lea.l	tone_tbl_end-2,a1
	lea.l	note_tbl,a2
	move.b	#%01111011,d0			* キーコード初期値
	move.b	#%00010100,d1			* キーフラクション初期値（7.8125セント）
	move.w	#(tone_tbl_end-tone_tbl)/2-1,d2	* ループカウンタ

1:
	move.w	-(a1),d3
	sub.w	2(a1),d3			* d3 = (x-y)	ループの回数
	clr.w	d4
2:
	addq.w	#1,d4
	clr.l	d5
	move.w	d4,d5
	lsl.w	#8,d5				* d5 = 64*d4*4
	divu.w	d3,d5				* d5 = 64*d4*4/(x-y)

	move.b	d0,d6				* キーコードを一時読み込み
	move.b	d1,d7				* キーフラクションを一時読み込み
	sub.b	d5,d7				* キーフラクションを設定
	bcs	3f				* キーフラクションが負になったか
	tst.b	d5				* d5.w は２５６か？
	bne	@f
3:	subq.b	#1,d6				* キーコードを−１
	move.b	d6,d5
	andi.b	#%00001111,d5
	cmpi.b	#%00001111,d5
	bne	@f
	subq.b	#4,d6 
@@:
	move.b	d6,-(sp)
	move.b	d6,d5				* キーコードセット
	andi.w	#$0f,d5
	andi.b	#$f0,d6
	or.b	0(a2,d5.w),d6
	move.b	d6,(a0)+
	move.b	d7,(a0)+			* キーフラクションセット
	move.b	(sp)+,d6

	cmp.w	d4,d3
	bne	2b

	move.b	d6,d0				* 新しいキーコードをセット
	move.b	#%00010100,d1			* 新しいキーフラクションをセット

	dbra	d2,1b


*	ＰＳＧ音色設定
	move.w	#$40,d1
	move.w	#3-1,d3				* ３パートにＰＳＧ音色をセット

@@:	lea.l	PSG_data,a0

	bsr	SLOT_set			* M1 セット

	add.w	#16,d1				* C1 セット
	lea.l	11(a0),a0
	bsr	SLOT_set

	subq.w	#8,d1				* M2 セット
	lea.l	11(a0),a0
	bsr	SLOT_set

	add.w	#16,d1				* C2 セット
	lea.l	11(a0),a0
	bsr	SLOT_set

	sub.w	#24-1,d1	
	dbra	d3,@b


	lea.l	11(a0),a0			* 共通項目のセット

	move.b	1(a0),d2			* FB
	lsl.b	#3,d2
	or.b	 (a0),d2			* AR
	w_OPM	d2,#$20
	w_OPM	d2,#$21
	w_OPM	d2,#$22

	w_OPM	4(a0),#$1b			* WF

	w_OPM	#$00,#$18
	w_OPM	#$00,#$19			* AMD
	w_OPM	#$80,#$19			* PMD

	w_OPM	#$00,#$38			* PMS AMS ch.1
	w_OPM	#$00,#$39			*	  ch.2
	w_OPM	#$00,#$3a			*	  ch.3

*	すべてキーオン
	w_OPM	#%01111000,#$08
	w_OPM	#%01111001,#$08
	w_OPM	#%01111010,#$08

*	ノイズジェネレータの初期化
	w_OPM	#%10001111,#$0f

*	割り込みの設定
	lea.l	OPM_int,a1
	IOCS	__OPMINTST
	tst.l	d0
	beq	@f

	pea.l	errms_OPM_int			* 既に使用中のとき
	DOS	__PRINT
	lea.l	4(sp),sp
	move.w	sr,d0
	move.w	d0,-(sp)
	or.w	#%00000111_00000000,d0		* 割り込み禁止
	move.w	d0,sr
	clr.l	a1
	IOCS	__OPMINTST
	move.w	(sp)+,sr			* 割り込み復帰
	lea.l	OPM_int,a1
	IOCS	__OPMINTST

@@:	w_OPM	#$dc,#$10			* CLKA = 881
	w_OPM	#$01,#$11			* 143*16μｓごとに割り込み

	w_OPM	#%00000101,#$14			* 割り込み開始

	clr.l	d0
	movem.l	(sp)+,d3-d7/a0-a5

	rts

err_PSG_INIT:
	moveq.l	#-1,d0
	rts

OPM_int:
	btst.b	#1,OPM_port
	bne	@f
	rte
@@:						* タイマＡの割り込みだ
*	w_OPM	#%00010101,#$14			* タイマＡオーバーフローフラグの
						* リセット

	rte

*	スロットに音色データを出力
*
*	d1.w	スロット番号−１＋＄４０	チャンネル１はスロット１，９，１７，２５
*						で構成される
*	a0.l	出力データのアドレス
*
*	a0,d1 変化せず。	d2 破壊
*
SLOT_set:
	move.b	8(a0),d2			* DT1
	lsl.b	#4,d2
	or.b	7(a0),d2			* MUL
	w_OPM	d2,d1
	add.w	#$20,d1

	w_OPM	5(a0),d1			* TL
	add.w	#$20,d1

	move.b	6(a0),d2			* KS
	lsl.b	#6,d2
	or.b	 (a0),d2			* AR
	w_OPM	d2,d1
	add.w	#$20,d1

	move.b	10(a0),d2			* AMS Enable
	lsl.b	#7,d2
	or.b	1(a0),d2			* 1DR
	w_OPM	d2,d1
	add.w	#$20,d1

	move.b	9(a0),d2			* DT2
	lsl.b	#6,d2
	or.b	2(a0),d2			* 2DR
	w_OPM	d2,d1
	add.w	#$20,d1

	move.b	4(a0),d2			* 1DL
	lsl.b	#4,d2
	or.b	3(a0),d2			* RR
	w_OPM	d2,d1

	sub.w	#$a0,d1				* ずれた分を戻す 

	rts

***************************************************************
*
*	ＰＳＧレジスタからの読み込みルーチン群
*
*    (返り値）
*	d0.b ・・・ 読み込んだ値
*
***************************************************************
r_port_A0:
	move.w	p_A0,d0
	rts

r_port_A2:
	move.w	p_A0,d0
	add.w	d0,d0
	add.w	d0,d0
	move.l	r_psg_reg_jpt(pc,d0.w),a0
	jmp	(a0)

r_psg_reg_jpt:
	.dc.l	r_PSG_R00
	.dc.l	r_PSG_R01
	.dc.l	r_PSG_R02
	.dc.l	r_PSG_R03
	.dc.l	r_PSG_R04
	.dc.l	r_PSG_R05
	.dc.l	r_PSG_R06
	.dc.l	r_PSG_R07
	.dc.l	r_PSG_R08
	.dc.l	r_PSG_R09
	.dc.l	r_PSG_R10
	.dc.l	r_PSG_R11
	.dc.l	r_PSG_R12
	.dc.l	r_PSG_R13
	.dc.l	r_PSG_R14
	.dc.l	r_PSG_R15

r_PSG_R00:				* チャンネルＡ音程分周比 下位８ビット
	move.w	PSG_R00,d0
	rts
r_PSG_R01:				* チャンネルＡ音程分周比 上位４ビット
	move.w	PSG_R00,d0
	lsr.w	#8,d0
	rts

r_PSG_R02:				* チャンネルＢ音程分周比 下位８ビット
	move.w	PSG_R02,d0
	rts
r_PSG_R03:				* チャンネルＢ音程分周比 上位４ビット
	move.w	PSG_R02,d0
	lsr.w	#8,d0
	rts

r_PSG_R04:				* チャンネルＣ音程分周比 下位８ビット
	move.w	PSG_R04,d0
	rts
r_PSG_R05:				* チャンネルＣ音程分周比 上位４ビット
	move.w	PSG_R04,d0
	lsr.w	#8,d0
	rts

r_PSG_R06:
	move.b	PSG_R06,d0
	rts
r_PSG_R07:
	move.b	PSG_R07,d0
	rts

r_PSG_R08:
	move.b	PSG_R08,d0
	rts
r_PSG_R09:
	move.b	PSG_R09,d0
	rts
r_PSG_R10:
	move.b	PSG_R10,d0
	rts

r_PSG_R11:				* エンベロープ周期 下位８ビット
	move.w	PSG_R12_R11,d0
	rts
r_PSG_R12:				* エンベロープ周期 上位８ビット
	move.w	PSG_R12_R11,d0
	lsr.w	#8,d0
	rts

r_PSG_R13:
	move.b	PSG_R13,d0
	rts

r_PSG_R14:				* ＰＯＲＴ Ａ
	move.w	port_sel,d0

	lea.l	portA_8255,a0
	add.w	d0,d0
	move.b	0(a0,d0.w),d0

	move.b	d0,d1
	lsr.b	#1,d1
	andi.b	#%00001111,d0
	andi.b	#%00110000,d1
	or.b	d1,d0

*
*	カセット処理とキーボード処理がまだやってない
*

	rts

r_PSG_R15:
	move.b	PSG_R15,d0
	rts

***************************************************************
*
*	ＰＳＧレジスターへの書き込みルーチン群
*
*    (引数）
*	d1.b ・・・ 書き込む値
*
***************************************************************
w_port_A0:
	andi.w	#$0f,d1
	move.w	d1,p_A0
	rts

w_port_A1:
	move.w	p_A0,d0
	add.w	d0,d0
	add.w	d0,d0
	move.l	w_psg_reg_jpt(pc,d0.w),a0
	jmp	(a0)

w_psg_reg_jpt:
	.dc.l	w_PSG_R00
	.dc.l	w_PSG_R01
	.dc.l	w_PSG_R02
	.dc.l	w_PSG_R03
	.dc.l	w_PSG_R04
	.dc.l	w_PSG_R05
	.dc.l	w_PSG_R06
	.dc.l	w_PSG_R07
	.dc.l	w_PSG_R08
	.dc.l	w_PSG_R09
	.dc.l	w_PSG_R10
	.dc.l	w_PSG_R11
	.dc.l	w_PSG_R12
	.dc.l	w_PSG_R13
	.dc.l	w_PSG_R14
	.dc.l	w_PSG_R15

w_PSG_R00:
	move.b	d1,PSG_R00+1		* チャンネルＡ音程分周比の下位８ビット
	move.w	PSG_R00,d1
	add.w	d1,d1
	movea.l	PSG2OPM_tbl,a0

	w_OPM	0(a0,d1.w),#$28		* キーコード設定
	w_OPM	1(a0,d1.w),#$30		* キーフラクション設定

	rts

w_PSG_R01:
	andi.b	#%00001111,d1
	move.b	d1,PSG_R00		* チャンネルＡ音程分周比の上位４ビット
	move.w	PSG_R00,d1
	add.w	d1,d1
	movea.l	PSG2OPM_tbl,a0

	w_OPM	0(a0,d1.w),#$28		* キーコード設定
	w_OPM	1(a0,d1.w),#$30		* キーフラクション設定

	rts

w_PSG_R02:
	move.b	d1,PSG_R02+1		* チャンネルＢ音程分周比の下位８ビット
	move.w	PSG_R02,d1
	add.w	d1,d1
	movea.l	PSG2OPM_tbl,a0

	w_OPM	0(a0,d1.w),#$29		* キーコード設定
	w_OPM	1(a0,d1.w),#$31		* キーフラクション設定

	rts
w_PSG_R03:
	andi.b	#%00001111,d1
	move.b	d1,PSG_R02		* チャンネルＢ音程分周比の上位４ビット
	move.w	PSG_R02,d1
	add.w	d1,d1
	movea.l	PSG2OPM_tbl,a0

	w_OPM	0(a0,d1.w),#$29		* キーコード設定
	w_OPM	1(a0,d1.w),#$31		* キーフラクション設定

	rts

w_PSG_R04:
	move.b	d1,PSG_R04+1		* チャンネルＣ音程分周比の下位８ビット
	move.w	PSG_R04,d1
	add.w	d1,d1
	movea.l	PSG2OPM_tbl,a0

	w_OPM	0(a0,d1.w),#$2a		* キーコード設定
	w_OPM	1(a0,d1.w),#$32		* キーフラクション設定

	rts
w_PSG_R05:
	andi.b	#%00001111,d1
	move.b	d1,PSG_R04		* チャンネルＣ音程分周比の上位４ビット
	move.w	PSG_R04,d1
	add.w	d1,d1
	movea.l	PSG2OPM_tbl,a0

	w_OPM	0(a0,d1.w),#$2a		* キーコード設定
	w_OPM	1(a0,d1.w),#$32		* キーフラクション設定

	rts

w_PSG_R06:
	move.b	d1,PSG_R06
	rts

w_PSG_R07:
	move.b	d1,PSG_R07
	bra	PSG_refresh

PSG_refresh:
	move.b	PSG_R07,d1

	w_OPM	#%00111100,#$20
	w_OPM	#%00000000,#$08		* キーオフ
	btst.l	#0,d1			* ch.1 出力制御
	bne	@f
	w_OPM	#%11111100,#$20
	w_OPM	#%01111000,#$08		* キーオン
@@:
	w_OPM	#%00111100,#$21
	w_OPM	#%00000001,#$08		* キーオフ
	btst.l	#1,d1			* ch.2 出力制御
	bne	@f
	w_OPM	#%11111100,#$21
	w_OPM	#%01111001,#$08		* キーオン
@@:
	w_OPM	#%00111100,#$22
	w_OPM	#%00000010,#$08		* キーオフ
	btst.l	#2,d1			* ch.3 出力制御
	bne	@f
	w_OPM	#%11111100,#$22
	w_OPM	#%01111010,#$08		* キーオン
@@:
	w_OPM	#%00000111,#$27
	w_OPM	#%00000111,#$08		* キーオフ
	and.b	#%00111000,d1		* ノイズ出力
	cmp.b	#%00111000,d1
	bne	@f
	w_OPM	#%11000111,#$27
	w_OPM	#%01111111,#$08		* キーオン
@@:
	rts

w_PSG_R08:
	move.b	d1,PSG_R08

	lea.l	volume_tbl,a0
	btst.l	#4,d1
	beq	1f
	moveq.l	#8,d1			* 本当はエンベロープモードの設定
	bra	@f
1:
	andi.w	#$000f,d1
@@:
	w_OPM	0(a0,d1.w),#$70		* TL のセット
	bra	PSG_refresh

w_PSG_R09:
	move.b	d1,PSG_R09

	lea.l	volume_tbl,a0
	btst.l	#4,d1
	beq	1f
	moveq.l	#8,d1			* 本当はエンベロープモードの設定
	bra	@f
1:
	andi.w	#$000f,d1
@@:
	w_OPM	0(a0,d1.w),#$71		* TL のセット
	bra	PSG_refresh

w_PSG_R10:
	move.b	d1,PSG_R10

	lea.l	volume_tbl,a0
	btst.l	#4,d1
	beq	1f
	moveq.l	#8,d1			* 本当はエンベロープモードの設定
	bra	@f
1:
	andi.w	#$000f,d1
@@:
	w_OPM	0(a0,d1.w),#$72		* TL のセット
	bra	PSG_refresh

w_PSG_R11:
	move.b	d1,PSG_R12_R11+1
	rts
w_PSG_R12:
	move.b	d1,PSG_R12_R11+0
	rts
w_PSG_R13:
	move.b	d1,PSG_R13
	rts

w_PSG_R14:
	rts

w_PSG_R15:
	move.b	d1,PSG_R15

	move.w	d1,-(sp)
	btst.l	#7,d1			* かな ＬＥＤの制御
	beq	1f			* 	0 ・・ on   1 ・・ off
	clr.b	d2			* 消灯
	moveq.l	#5,d1			* かな
	IOCS	__LEDMOD
	bra	@f

1:	moveq.l	#1,d2			* 点灯
	moveq.l	#5,d1			* かな
	IOCS	__LEDMOD

@@:	move.w	(sp)+,d1
	btst.l	#6,d1
	beq	1f
	move.w	#1,port_sel
	bra	@f

1:	clr.w	port_sel

@@:	move.b	d1,d0
	move.b	d1,d2

	andi.b	#%00000011,d1
	lsl.b	#5,d1
	andi.b	#%00001100,d2
	lsl.b	#3,d2

	move.b	#%10000000,cont_8255	* port A,B を出力に 
	move.b	d1,portA_8255
	move.b	d2,portB_8255
	move.b	#%10010010,cont_8255	* port A,B を入力にに 

	move.b	d0,d1
	andi.b	#%00010000,d1
	lsr.b	#4,d1
	or.b	#%00001000,d1		* ＰＯＲＴ Ｃのビット４にセット
	move.b	d1,cont_8255

	andi.b	#%00100000,d0
	lsr.b	#5,d0
	or.b	#%00001010,d0		* ＰＯＲＴ Ｃのビット５にセット
	move.b	d0,cont_8255

	rts

*
*		ワークエリア
*

	.data

*	PSG registers

	.even
PSG_R00:				* R00 R01
	.dc.w	0
PSG_R02:				* R02 R03
	.dc.w	0
PSG_R04:				* R04 R05
	.dc.w	0

PSG_R06:
	.dc.b	0
PSG_R07:
	.dc.b	0
PSG_R08:
	.dc.b	0
PSG_R09:
	.dc.b	0
PSG_R10:
	.dc.b	0

	.even
PSG_R12_R11:
	.dc.w	0
PSG_R13:
	.dc.b	0

PSG_R15:
	.dc.b	0

	.even

port_sel:			* R15 のビット６の保存用
	.dc.w	0


*	Ｉ／Ｏポートの値保存場所

p_A0:	.dc.w	0		* PSG register access no


*	トーンテーブル
*		 C    C#    D   D#    E    F   F#    G   G#    A    A#   B
tone_tbl:
	.dc.w					       $10D6,$FE4,$EFF,$E28
	.dc.w	$D5D,$C9C,$BE7,$B3C,$A9B,$A02,$973,$8EB,$86B,$7F2,$780,$714
	.dc.w	$6AF,$6AE,$5F4,$59E,$54E,$501,$4BA,$476,$436,$3F9,$3C0,$38A
	.dc.w	$357,$327,$2FA,$2CF,$2A7,$281,$25D,$23B,$21B,$1FD,$1E0,$1C5
	.dc.w	$1AC,$194,$17D,$168,$153,$140,$12E,$11D,$10D,$0FE,$0F0,$0E3
	.dc.w	$0D6,$0CA,$0BE,$0B4,$0AA,$0A0,$097,$08F,$087,$07F,$078,$071
	.dc.w	$06B,$065,$05F,$05A,$055,$050,$04C,$047,$043,$040,$03C,$039
	.dc.w	$035,$032,$030,$02D,$02A,$028,$026,$024,$022,$020,$01E,$01C
	.dc.w	$01B,$019,$018
tone_tbl_end:
	.dc.w	0		* ダミー


PSG_data:
*		AR 1DR 2DR  RR 1DL  TL  RS MUL DT1 DT2 AME    ＰＳＧ
	.dc.b	31,  0,  0, 15,  0, 27,  0,  2,  0,  0,  0
	.dc.b	31,  0,  0, 15,  0, 00,  0,  1,  0,  0,  0
	.dc.b	31,  0,  0, 15,  0,127,  0,  2,  0,  0,  0
	.dc.b	31,  0,  0, 15,  0,127,  0,  1,  0,  0,  0
*		AL  FB  OM PAN  WF  SY  SP PMD AMD PMS AMS
	.dc.b	 4,  7, 15,  3,  0,  0,  0,  0,  0,  0,  0

volume_tbl:
*		  0   1   2   3   4   5   6   7   8   9   a   b   c   d   e   f
	.dc.b	127, 37, 34, 32, 29, 26, 24, 21, 18, 16, 13, 10,  8,  5,  2,  0

note_tbl:
	.dc.b	$0,$1,$2,$4,$5,$6,$8,$9,$a,$c,$d,$e,$0,$0,$0,$0

	.even
errms_OPM_int:
	.dc.b	'ＯＰＭのタイマＡを強制使用します。',0x0d,0x0a,0x00,0x00

	.end

